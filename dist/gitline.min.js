function indexToX(t){return 20*t+12}var AsyncLoadingItem=function(){function t(t,e,i,n,o){this.label=t,this.data=e,this.callback=i,this.index=n,this.of=o}return t}(),AsyncLoader=function(){function t(t){this.items=[],this.suspended=!1,this.element=t}return t.prototype.then=function(t,e,i){var n=this;return this.thenSingle(t,function(){for(var o=e(),r=o.length-1;r>=0;r--)n.items.unshift(new AsyncLoadingItem(t,o[r],i,r,o.length))}),this},t.prototype.thenSingle=function(t,e){return this.items.push(new AsyncLoadingItem(t,null,e,0,1)),this},t.prototype.start=function(t){void 0===t&&(t=!0),t&&(this.element.hidden=!1),this.next()},t.prototype.next=function(){var t=this,e=this.items.shift();void 0!==e?e.index%50===0?(this.showStatus(e),window.setTimeout(function(){Logger.debug("executing "+e.label+" ("+e.index+"/"+e.of+")"),t.execute(e)},0)):this.execute(e):this.element.hidden=!0},t.prototype.suspend=function(){this.suspended=!0},t.prototype.resume=function(){this.suspended=!1,this.next()},t.prototype.showStatus=function(t){this.element.innerHTML=t.label},t.prototype.execute=function(t){try{t.callback(t.data),this.suspended||this.next()}catch(e){this.error(e)}},t.prototype.error=function(t){Logger.error(t),this.element.innerHTML=t,this.suspend()},t}(),GitlineConfig=function(){function t(){this.dotHeight=6,this.dotWidth=8,this.remoteOnly=!1,this.avatars=[this.avatar_gravatar]}return t.prototype.avatar_gravatar=function(t){return"http://www.gravatar.com/avatar/"+CryptoJS.MD5(t.toLowerCase())+"?s=16&d=404"},t}(),Expandable=function(){function t(){}return t.extend=function(t){var e=t;return t.classList.add("gitline-expandable"),e.whenFull=function(i){e.onclick=function(n){2==n.detail&&(e.innerHTML=i,n.cancelBubble=!0,t.classList.add("gitline-expandable-expanded"))}},e.whenShort=function(i){e.innerHTML=i,e.onmouseout=function(n){e.innerHTML=i+" ",t.classList.remove("gitline-expandable-expanded")}},e},t}(),CommitProvider=function(){function t(t){this.url=t}return t.prototype.whenDone=function(t){this.callback(t)},t.prototype.withErrorCallback=function(t){this.errorCallback=t},t.prototype.withCallback=function(t){this.callback=t},t.prototype.onRequested=function(t){throw new Error("onRequested not implemented on "+this)},t.prototype.request=function(){this.onRequested(this.url)},t.prototype.error=function(t){this.errorCallback(t)},t}(),__extends=this&&this.__extends||function(t,e){function i(){this.constructor=t}for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)},LocalGit2JsonProvider=function(t){function e(){t.apply(this,arguments)}return __extends(e,t),e.prototype.onRequested=function(t){var e=this;jQuery.getJSON(t,{},function(t){e.whenDone(t)}).error(function(){e.error("Error loading git data from "+t+" create it using git2json")})},e}(CommitProvider),GithubCommitProvider=function(t){function e(e,i,n){t.call(this,e),this.forks=[],this.baseBranches=[],this.data={},this.done=!1,this.accessToken=n,this.limit=i,Logger.debug("github provider initialized")}return __extends(e,t),e.prototype.gitURL=function(t,e,i){void 0===i&&(i=""),Logger.debug("github getURL requested"),-1==t.indexOf("api.github.com")&&(t=t.replace(/.*github.com/,"https://api.github.com/repos/").replace(/\/\//g,"/"));var n=t+"/"+e+"?access_token="+this.accessToken+"&per_page="+this.limit+"&"+i+"&callback=?";return Logger.debug("URL : ",n),n},e.prototype.onRequested=function(t){Logger.debug("github provider requested"),this.loadForks(t)},e.prototype.loadForks=function(t){var e=this;jQuery.when(jQuery.getJSON(this.gitURL(t,"forks")),jQuery.getJSON(this.gitURL(t,"branches"))).then(function(i,n){Logger.debug("github provider forks loaded"),e.processBranches(t,n[0].data),e.forks=i[0].data,e.loadBranches()})},e.prototype.processBranches=function(t,e){var i=this;void 0!==e.message&&this.error(e.message),e.forEach(function(e){e.repo=void 0!==t.url?t.url:t,void 0!==t.full_name&&(e.name=e.name+"@"+t.full_name),i.baseBranches.push(e)})},e.prototype.loadBranches=function(){var t=this,e=this.forks.map(function(e){return jQuery.getJSON(t.gitURL(e.url,"branches"),function(i){Logger.debug("loaded branches for "+e.name),t.processBranches(e,i.data)})});jQuery.when.apply(jQuery,e).done(function(){Logger.debug("all branches loaded"),t.loadCommits()})},e.prototype.loadCommits=function(){var t=this,e=[];this.baseBranches.forEach(function(i){var n=t.data[i.commit.sha];void 0==n&&e.push(jQuery.getJSON(t.gitURL(i.repo,"commits","sha="+i.commit.sha),function(e){Logger.debug("loaded commits for "+i.name),t.processCommits(e.data)}))}),jQuery.when.apply(jQuery,e).done(function(){t.process()})},e.prototype.processCommits=function(t){var e=this;t.map(function(t){var e={};return e.sha=t.sha,e.ssha=t.sha.substring(0,8),e.parenthashes=t.parents.map(function(t){return t.sha}),e.authorname=t.commit.author.name,e.authoremail=t.commit.author.email,e.authordate=t.commit.author.date,e.authortimestamp=new Date(t.commit.author.date).getTime(),e.committername=t.commit.committer.name,e.committeremail=t.commit.committer.email,e.committerdate=t.commit.committer.date,e.committertimestamp=new Date(t.commit.committer.date).getTime(),e.subject=t.commit.message,e.body="",e.refnames=[],e.inHeads=[],e}).forEach(function(t){e.data[t.sha]=t})},e.prototype.process=function(){var t=this;this.baseBranches.forEach(function(e){var i=t.data[e.commit.sha];void 0==i||(e.assigned=!0,i.refnames.push(e.name),t.assignHeads(i))});var e={};Object.keys(this.data).sort(function(e,i){return t.data[i].committertimestamp-t.data[e].committertimestamp}).forEach(function(i){e[i]=t.data[i]}),this.whenDone(e)},e.prototype.assignHeads=function(t){var e=this;for(t.parents1=t.parenthashes.map(function(t){return t});t.parents1.length>0;){var i=[];t.parents1.forEach(function(n){var o=e.data[n];void 0!=o&&(o.inHeads.push(t.sha),o.parenthashes.forEach(function(t){-1===i.indexOf(t)&&i.push(t)}))}),t.parents1=i}},e}(CommitProvider),Gitline=function(){function t(){this.self=this,this.maxX=0,this.maxIndexY=0,this.commits={},this.headsMap={},this.config=new GitlineConfig}return t.prototype.addCommit=function(t){this.commits[t.getFullSha()]=t,void 0===this.firstCommit&&(this.firstCommit=t)},t.prototype.addBranch=function(t,e,i){var n=new Branch(t,e,i);this.headsMap[t]=n},t.prototype.render=function(){var t=this;this.canvas=new jsgl.Panel(this.graphicalPanel),this.al.thenSingle("Loading Data",function(){t.al.suspend(),t.commitProvider.withErrorCallback(function(e){t.al.error(e)}),t.commitProvider.withCallback(function(e){t.data=e,t.al.resume()}),t.commitProvider.request()}).then("Loading Commits",function(){return Object.keys(t.data)},function(e){var i=new Commit(t,t.data[e]);t.addCommit(i)}).thenSingle("Building Graph",function(){t.buildGraph()}).then("Drawing Labels",function(){return Object.keys(t.commits)},function(e){var i=t.commits[e];t.drawCommit(i)}).thenSingle("Creating Legend",function(){t.rootLabel=document.createElement("div"),t.rootLabel.className="commit-legend",t.textPanel.appendChild(t.rootLabel)}).then("Drawing Merges",function(){return Object.keys(t.commits)},function(e){var i=t.commits[e];t.drawReferences(i)}).thenSingle("Resizing",function(){t.graphicalPanel.style.width=indexToX(t.maxX+1)+"px",t.graphicalPanel.style.height=t.getHeight()+"px"}).start(),window.onresize=function(e){t.al.then("Redrawing",function(){return Object.keys(t.commits)},function(e){var i=t.commits[e];i.view.redraw()}).thenSingle("Resizing",function(){t.graphicalPanel.style.width=indexToX(t.maxX+1)+"px",t.graphicalPanel.style.height=t.getHeight()+"px"}).start(!1)}},t.prototype.getHeight=function(){return this.rootLabel.offsetTop-this.firstCommit.view.label.offsetTop},t.prototype.buildGraph=function(){var t=this,e=Object.keys(this.commits);e.forEach(function(e){var i=t.commits[e];i.initRelations()}),e.forEach(function(e){var i=t.commits[e];i.initHeadSpecifity(),i.initMerges()}),this.initBranches()},t.prototype.drawCommit=function(t){t.view=new CommitView(this.canvas,this.config,t),t.outOfScope===!1&&(t.view.label=this.drawLabel(t),t.view.label.onclick=function(){console&&Logger.debug(t)},this.textPanel.appendChild(t.view.label),t.view.label.style["padding-left"]=indexToX(this.maxX+1)+"px")},t.prototype.drawReferences=function(t){t.view.addRelations(),t.view.redraw()},t.prototype.drawLabel=function(t){var e=document.createElement("div");e.className="commit-legend";var i=t.getShortSha(),n=t.getFullSha(),o=Expandable.extend(document.createElement("span"));if(o.whenShort(i+" "),o.whenFull(n),o.style.fontFamily="Courier",e.appendChild(o),e.appendChild(this.drawIdentity("author",t.author)),t.author.email!=t.committer.email&&e.appendChild(this.drawIdentity("committer",t.committer)),t.branch&&t.branch.commit===t&&!t.branch.anonymous){var r=document.createElement("span");r.className="head-label",r.style.backgroundColor=t.getColor(40),r.style.color="white",r.style.paddingLeft=r.style.paddingRight="2px",r.innerHTML=t.branch.ref,e.appendChild(r)}var a=document.createElement("span");return a.innerHTML=" "+t.subject,a.style.color=t.hasMerges()?"grey":"black",e.appendChild(a),e.style.position="relative",e},t.prototype.drawIdentity=function(t,e){var i=Expandable.extend(document.createElement("gitline-identity"));i.setAttribute("class",t),i.setAttribute("name",e.name);var n=e.name+" &lt;"+e.email.toLowerCase()+"&gt;";return i.setAttribute("title",n),i.style.background=this.config.avatars.map(function(t){return"url("+t(e.email)+") no-repeat"}).join(", "),i.whenFull(n),i.whenShort(" "),i},t.prototype.initBranches=function(){for(var t=Object.keys(this.headsMap),e=0;e<t.length;e++){var i=t[e],n=this.headsMap[i];n.commit.initDefaultBranch()}var o=this;t.sort(function(t,e){var i=o.headsMap[t].commit,n=o.headsMap[e].commit;return i===n?0:i.branch.category===n.branch.category?i.branch.specifity-n.branch.specifity:i.branch.category.length-n.branch.category.length});for(var r=0,e=0;e<t.length;e++){var i=t[e],n=this.headsMap[i],a=n.commit;if(a.branch===n){n.lane=r,r++;for(var s=0;s<t.length;s++){for(var h=!0,c=0;c<t.length;c++){var d=t[c],l=this.headsMap[d].commit;(void 0===l||l.branch!=n&&l.branch.lane===s&&(a.intersects(l)||a.branch.category!=l.branch.category))&&(h=!1)}if(h){Logger.debug("NO INTERSECTS: ",a.branch.ref," - ",l.branch.ref),n.lane=s;break}}this.maxX=Math.max(this.maxX,n.lane)}}},t.prototype.fromJSON=function(t){return this.fromProvider(new LocalGit2JsonProvider(t))},t.prototype.fromProvider=function(t){return this.commitProvider=t,this},t.prototype.renderTo=function(t){return void 0!==this.headerPanel&&t.appendChild(this.headerPanel),t.appendChild(this.loadingPanel=document.createElement("gitline-loadingpanel")),t.appendChild(this.contentPanel=document.createElement("gitline-contentpanel")),this.contentPanel.appendChild(this.graphicalPanel=document.createElement("gitline-graphicalpanel")),this.contentPanel.appendChild(this.textPanel=document.createElement("gitline-textpanel")),this.al=new AsyncLoader(this.loadingPanel),this.render(),this},t.prototype.withHeader=function(t){return"string"==typeof t?(this.headerPanel=document.createElement("gitline-headerpanel"),this.headerPanel.innerHTML=t):this.headerPanel=t,this},t}(),Shape=function(){function t(t,e){this.dependencies=[],this.canvas=t,this.element=e}return t.prototype.addIfMissing=function(){void 0!==this.element&&null==this.renderedTo&&(this.addElements(),this.renderedTo=this.canvas)},t.prototype.addElements=function(){this.canvas.addElement(this.element)},t.prototype.update=function(){this.dependencies.forEach(function(t){t.update()})},t.prototype.dependsOn=function(t){t.dependencies.push(this)},t}(),Dot=function(t){function e(e){t.call(this,e,e.createRectangle())}return __extends(e,t),e.prototype.size=function(t,e){return this.width=t,this.height=e,this.element.setWidth(t),this.element.setHeight(e),this.element.setXRadius(t/4),this.element.setYRadius(t/4),this.update(),this.addIfMissing(),this},e.prototype.at=function(t,e){return this.x=t,this.y=e,this.update(),this.addIfMissing(),this},e.prototype.color=function(t,e){return this.element.getStroke().setWeight(1),this.element.getStroke().setColor(t),this.element.getFill().setColor(e),this},e.prototype.update=function(){this.element.setLocationXY(this.x-this.width/2,this.y-this.height/2),t.prototype.update.call(this)},e}(Shape),BaseLink=function(t){function e(e,i){t.call(this,e,i)}return __extends(e,t),e.prototype.from=function(t){return this.dependsOn(t),this.parentDot=t,this},e.prototype.to=function(t){return this.childDot=t,this},e.prototype.color=function(t){return this.element.getStroke().setWeight(1),this.element.getStroke().setColor(t),this.lineColor=t,this.addIfMissing(),this},e}(Shape),Curve=function(t){function e(e){t.call(this,e,e.createCurve()),this.arrow=this.canvas.createPolygon()}return __extends(e,t),e.prototype.addElements=function(){t.prototype.addElements.call(this),this.canvas.addElement(this.arrow)},e.prototype.update=function(){var t=this.childDot.x,e=this.childDot.y,i=this.parentDot.x,n=this.parentDot.y,o=this.lineColor,r=i>t?1:-1;this.element.setStartPointXY(i,n-this.parentDot.height/2),this.element.setEndPointXY(t+this.childDot.width/2*r,e),this.element.setControl2PointXY(i,e),this.element.setControl1PointXY(i,e),this.element.getStroke().setWeight(1),this.element.getStroke().setColor(o),this.arrow.getStroke().setWeight(0),this.arrow.getFill().setColor(o),this.arrow.clearPoints(),this.arrow.addPointXY(0,0),this.arrow.addPointXY(6,-4),this.arrow.addPointXY(6,4);for(var a=0;a<this.arrow.getPointsCount();a++){var s=this.arrow.getPointAt(a).X,h=this.arrow.getPointAt(a).Y;this.arrow.setPointXYAt(s*r+t+this.childDot.width/2*r,h+e,a)}},e}(BaseLink),Straight=function(t){function e(e){t.call(this,e,e.createLine())}return __extends(e,t),e.prototype.update=function(){t.prototype.update.call(this),this.element.setStartPointXY(this.parentDot.x,this.parentDot.y-this.parentDot.height/2),this.element.setEndPointXY(this.childDot.x,this.childDot.y+this.childDot.height/2)},e}(BaseLink),Creation=function(t){function e(e){t.call(this,e,e.createLine()),this.secondLine=e.createLine()}return __extends(e,t),e.prototype.addElements=function(){t.prototype.addElements.call(this),this.canvas.addElement(this.secondLine)},e.prototype.update=function(){t.prototype.update.call(this),this.parentDot.x<this.childDot.x?this.element.setStartPointXY(this.parentDot.x+this.parentDot.width/2,this.parentDot.y):this.element.setStartPointXY(this.parentDot.x-this.parentDot.width/2,this.parentDot.y),this.element.setEndPointXY(this.childDot.x,this.parentDot.y),this.element.getStroke().setWeight(1),this.element.getStroke().setDashStyle(jsgl.DashStyles.DASH),this.element.getStroke().setColor(this.lineColor),this.secondLine.setStartPointXY(this.childDot.x,this.parentDot.y),this.secondLine.setEndPointXY(this.childDot.x,this.childDot.y+this.childDot.height/2),this.secondLine.getStroke().setWeight(1),this.secondLine.getStroke().setColor(this.lineColor)},e}(BaseLink),CommitView=function(){function t(t,e,i){this.lines=[],this.canvas=t,this.config=e,this.commit=i,this.dot=new Dot(this.canvas)}return t.prototype.addRelations=function(){var t=this;if(null!=this.commit.directparent){var e;e=this.commit.getLane()==this.commit.directparent.getLane()||this.commit.directparent.outOfScope?new Straight(this.canvas).from(this.commit.directparent.view.dot).to(this.dot).color(this.commit.getColor(20)):new Creation(this.canvas).from(this.commit.directparent.view.dot).to(this.dot).color(this.commit.getColor(30)),this.lines.push(e)}var i=this.commit.merges.standard.concat(this.commit.merges.anonymous);i.forEach(function(e){t.lines.push(new Curve(t.canvas).from(e.source.view.dot).to(t.dot).color(e.source.getColor(35)))})},t.prototype.redraw=function(){this.dot.at(this.commit.getX(),this.commit.getY()).size(this.config.dotWidth,this.config.dotHeight).color(this.commit.getColor(20),this.commit.getColor(80))},t}(),Identity=function(){function t(t,e,i){this.name=t,this.email=e,this.date=i}return t}(),Commit=function(){function t(t,e){this.warnings=[],this.inHeadsRef=[],this.parents=[],this.childs=[],this.siblings=[],this.outOfScope=!1,this.merges={standard:[],anonymous:[]},this.container=t,this.data=e,this.data.obj=this,null==e.inHeads&&(e.inHeads=[]),null==e.parenthashes&&(e.parenthashes=[]),null==e.refnames&&(e.refnames=[]),this.sha=e.sha,this.ssha=e.ssha,this.subject=e.subject,this.indexY=t.maxIndexY++,this.committer=new Identity(this.data.committername,this.data.committeremail,new Date(this.data.committerdate).getTime()),this.author=new Identity(this.data.authorname,this.data.authoremail,new Date(this.data.authordate).getTime())}return t.prototype.getShortSha=function(){return this.ssha},t.prototype.getFullSha=function(){return this.sha},t.prototype.initRelations=function(){var e=this,i=this;this.data.parenthashes.forEach(function(n){var o=e.container.commits[n];if(null==o&&(o=new t(e.container,{sha:n+Math.random()}),o.outOfScope=!0,i.container.addCommit(o)),e.parents.push(o),o.childs.push(e),e.siblings=o.childs,e.parents.length>0){var r=e.parents[0];e.directparent=r,r.directchild=e}}),this.data.inHeads.forEach(function(t){var i=e.container.commits[t];void 0===e.inHeadsRef.indexOf(i)&&e.inHeadsRef.push(i)})},t.prototype.initDefaultBranch=function(){for(var t=this;null!=t;)(null==t.branch||t.branch.specifity>this.branch.specifity)&&(t.branch=this.branch),t.branch.start=t,t.branch.origin=t.directparent,t=t.directparent},t.prototype.initHeadSpecifity=function(){for(var t=0;t<this.data.refnames.length;t++){var e=this.data.refnames[t];if(!this.container.config.remoteOnly||0==e.indexOf("origin/")){this.container.config.remoteOnly&&(e=e.replace(/^origin./,""));var i=1e3*e.replace(/[^\/-]/g,"").length;i+=e.replace(/[^a-zA-Z0-9-]/,"").length,this.container.addBranch(e,this,i),(null==this.maxSpecifity||i<this.maxSpecifity)&&(Logger.debug("assigning branch",e,this.sha,this.maxSpecifity,i),this.maxSpecifity=i,this.branch=this.container.headsMap[e]),this.initDefaultBranch()}}},t.prototype.initMerges=function(){if(this.merges={standard:[],anonymous:[]},this.warnings=[],1==this.parents.length){var t=this.parents[0];this.directparent=t,t.directchild=this}if(this.parents.length>=2){var t=this.parents[0];this.directparent=t,t.directchild=this;for(var e=1;e<this.parents.length;e++){var i=this.parents[e];null!=i&&(i.data.refnames.length>0||i.inHeadsRef.length!=t.inHeadsRef.length?this.merges.standard.push({source:i}):(this.merges.anonymous.push({source:i}),this.initAnonymous()))}}},t.prototype.initAnonymous=function(){var t=this;this.merges.anonymous.forEach(function(e){for(var i=e.source,n=t;null!=n&&null==n.branch;)n=n.directchild;null!=n&&null==i.branch&&(i.branch=new Branch(n.branch.ref+"/anonymous"+i.sha+Math.random(),i,n.branch.specifity+1),i.branch.anonymous=!0,i.branch.parent=n.branch,i.branch.start=n,i.branch.category=n.branch.category,t.container.headsMap[i.branch.ref]=i.branch)})},t.prototype.getColor=function(t){if(null!=this.branch){var e=this.branch;this.branch.anonymous&&(e=this.branch.parent);var i=300*e.lane/this.container.maxX;return"hsl("+i+", 100%, "+t+"%)"}this.warn("No Branch set")},t.prototype.hasMerges=function(){return this.merges.standard.length>0||this.merges.anonymous.length>0},t.prototype.getX=function(){return indexToX(this.getLane())},t.prototype.getY=function(){return this.outOfScope?this.container.rootLabel.offsetTop+20:this.view.label.offsetTop-this.container.firstCommit.view.label.offsetTop+this.view.label.offsetHeight/2},t.prototype.getOriginIndexY=function(){return void 0!=this.branch.origin?this.branch.origin.getIndexY():this.branch.start.outOfScope?this.container.maxIndexY:this.branch.start.indexY},t.prototype.intersects=function(t){var e=9999999,i=999999;return this.outOfScope||t.outOfScope?!0:(null!=t.directchild&&(e=t.directchild.indexY),null!=this.directchild&&(i=this.directchild.indexY),this.getOriginIndexY()>=Math.min(t.indexY,e)&&Math.min(i,this.indexY)<=t.getOriginIndexY())},t.prototype.getIndex=function(){return this.data.index},t.prototype.getIndexY=function(){return this.indexY},t.prototype.warn=function(t){this.warnings.push(t),this.debug(t)},t.prototype.debug=function(t){console&&Logger.debug(t,this)},t.prototype.getLane=function(){return null!=this.branch?this.branch.commit.branch.lane:null},t}(),Branch=function(){function t(t,e,i){this.ref=t,this.commit=e,this.specifity=i,this.shortname=t.split("@")[0],this.category=this.shortname.substring(0,this.shortname.lastIndexOf("/"))}return t}();
//# sourceMappingURL=data:application/json;base64,
