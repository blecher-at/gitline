function indexToX(t){return 20*t+12}var AsyncLoadingItem=function(){function t(t,e,n,i,o){this.label=t,this.data=e,this.callback=n,this.index=i,this.of=o}return t}(),AsyncLoader=function(){function t(t){this.items=[],this.suspended=!1,this.element=t}return t.prototype.then=function(t,e,n){var i=this;return this.thenSingle(t,function(){for(var o=e(),a=o.length-1;a>=0;a--)i.items.unshift(new AsyncLoadingItem(t,o[a],n,a,o.length))}),this},t.prototype.thenSingle=function(t,e){return this.items.push(new AsyncLoadingItem(t,null,e,0,1)),this},t.prototype.start=function(t){void 0===t&&(t=!0),t&&(this.element.hidden=!1),this.next()},t.prototype.next=function(){var t=this,e=this.items.shift();void 0!==e?e.index%50===0?(this.showStatus(e),window.setTimeout(function(){Logger.debug("executing "+e.label+" ("+e.index+"/"+e.of+")"),t.execute(e)},0)):this.execute(e):this.element.hidden=!0},t.prototype.suspend=function(){this.suspended=!0},t.prototype.resume=function(){this.suspended=!1,this.next()},t.prototype.showStatus=function(t){this.element.innerHTML=t.label},t.prototype.execute=function(t){t.callback(t.data),this.suspended||this.next()},t}(),GitlineConfig=function(){function t(){this.dotHeight=6,this.dotWidth=8,this.remoteOnly=!1,this.avatars=[this.avatar_gravatar]}return t.prototype.avatar_gravatar=function(t){return"http://www.gravatar.com/avatar/"+CryptoJS.MD5(t.toLowerCase())+"?s=16&d=404"},t}(),Expandable=function(){function t(){}return t.extend=function(t){var e=t;return t.classList.add("gitline-expandable"),e.whenFull=function(n){e.onclick=function(i){2==i.detail&&(e.innerHTML=n,i.cancelBubble=!0,t.classList.add("gitline-expandable-expanded"))}},e.whenShort=function(n){e.innerHTML=n,e.onmouseout=function(i){e.innerHTML=n+" ",t.classList.remove("gitline-expandable-expanded")}},e},t}(),CommitProvider=function(){function t(t){this.url=t}return t.prototype.whenDone=function(t){this.callback(t)},t.prototype.withCallback=function(t){this.callback=t},t.prototype.onRequested=function(t){throw new Error("onRequested not implemented on "+this)},t.prototype.request=function(){this.onRequested(this.url)},t}(),__extends=this&&this.__extends||function(t,e){function n(){this.constructor=t}for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i]);t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)},LocalGit2JsonProvider=function(t){function e(){t.apply(this,arguments)}return __extends(e,t),e.prototype.onRequested=function(t){var e=this;jQuery.getJSON(t,{},function(t){e.whenDone(t)}).error(function(){Gitline.displayFatalError("Error loading git data from "+t+" create it using git2json")})},e}(CommitProvider),GithubCommitProvider=function(t){function e(e,n,i){t.call(this,e),this.forks=[],this.baseBranches=[],this.data={},this.done=!1,this.accessToken=i,this.limit=n}return __extends(e,t),e.prototype.gitURL=function(t,e,n){return void 0===n&&(n=""),-1==t.indexOf("api.github.com")&&(t=t.replace(/.*github.com/,"https://api.github.com/repos/").replace(/\/\//g,"/")),t+"/"+e+"?access_token="+this.accessToken+"&per_page="+this.limit+"&callback=?&"+n},e.prototype.onRequested=function(t){this.loadForks(t)},e.prototype.loadForks=function(t){var e=this;jQuery.when(jQuery.getJSON(this.gitURL(t,"forks")),jQuery.getJSON(this.gitURL(t,"branches"))).then(function(n,i){e.processBranches(t,i[0].data),e.forks=n[0].data,e.loadBranches()})},e.prototype.processBranches=function(t,e){var n=this;e.forEach(function(e){e.repo=void 0!==t.url?t.url:t,void 0!==t.full_name&&(e.name=e.name+"@"+t.full_name),n.baseBranches.push(e)})},e.prototype.loadBranches=function(){var t=this,e=this.forks.map(function(e){return jQuery.getJSON(t.gitURL(e.url,"branches"),function(n){Logger.debug("loaded branches for "+e.name),t.processBranches(e,n.data)})});jQuery.when.apply(jQuery,e).done(function(){Logger.debug("all branches loaded"),t.loadCommits()})},e.prototype.loadCommits=function(){var t=this,e=[];this.baseBranches.forEach(function(n){var i=t.data[n.commit.sha];void 0==i&&e.push(jQuery.getJSON(t.gitURL(n.repo,"commits","sha="+n.commit.sha),function(e){Logger.debug("loaded commits for "+n.name),t.processCommits(e.data)}))}),jQuery.when.apply(jQuery,e).done(function(){t.process()})},e.prototype.processCommits=function(t){var e=this;t.map(function(t){var e={};return e.sha=t.sha,e.ssha=t.sha.substring(0,8),e.parenthashes=t.parents.map(function(t){return t.sha}),e.authorname=t.commit.author.name,e.authoremail=t.commit.author.email,e.authordate=t.commit.author.date,e.authortimestamp=new Date(t.commit.author.date).getTime(),e.committername=t.commit.committer.name,e.committeremail=t.commit.committer.email,e.committerdate=t.commit.committer.date,e.committertimestamp=new Date(t.commit.committer.date).getTime(),e.subject=t.commit.message,e.body="",e.refnames=[],e.inHeads=[],e}).forEach(function(t){e.data[t.sha]=t})},e.prototype.process=function(){var t=this;this.baseBranches.forEach(function(e){var n=t.data[e.commit.sha];void 0==n||(e.assigned=!0,n.refnames.push(e.name),t.assignHeads(n))});var e={};Object.keys(this.data).sort(function(e,n){return t.data[n].committertimestamp-t.data[e].committertimestamp}).forEach(function(n){e[n]=t.data[n]}),this.whenDone(e)},e.prototype.assignHeads=function(t){var e=this;for(t.parents1=t.parenthashes.map(function(t){return t});t.parents1.length>0;){var n=[];t.parents1.forEach(function(i){var o=e.data[i];void 0!=o&&(o.inHeads.push(t.sha),o.parenthashes.forEach(function(t){-1===n.indexOf(t)&&n.push(t)}))}),t.parents1=n}},e}(CommitProvider),Gitline=function(){function t(){this.self=this,this.maxX=0,this.maxIndexY=0,this.commits={},this.headsMap={},this.config=new GitlineConfig}return t.prototype.addCommit=function(t){this.commits[t.getFullSha()]=t,void 0===this.firstCommit&&(this.firstCommit=t)},t.prototype.addBranch=function(t,e,n){var i=new Branch(t,e,n);this.headsMap[t]=i},t.prototype.render=function(){var t=this;this.canvas=new jsgl.Panel(this.graphicalPanel),this.al.thenSingle("Loading Data",function(){t.al.suspend(),t.commitProvider.withCallback(function(e){t.data=e,t.al.resume()}),t.commitProvider.request()}).then("Loading Commits",function(){return Object.keys(t.data)},function(e){var n=new Commit(t,t.data[e]);t.addCommit(n)}).thenSingle("Building Graph",function(){t.buildGraph()}).then("Drawing Labels",function(){return Object.keys(t.commits)},function(e){var n=t.commits[e];t.drawCommit(n)}).thenSingle("Creating Legend",function(){t.rootLabel=document.createElement("div"),t.rootLabel.className="commit-legend",t.textPanel.appendChild(t.rootLabel)}).then("Drawing Merges",function(){return Object.keys(t.commits)},function(e){var n=t.commits[e];t.drawReferences(n)}).thenSingle("Resizing",function(){t.graphicalPanel.style.width=indexToX(t.maxX+1)+"px",t.graphicalPanel.style.height=t.getHeight()+"px"}).start(),window.onresize=function(e){t.al.then("Redrawing",function(){return Object.keys(t.commits)},function(e){var n=t.commits[e];n.view.redraw()}).thenSingle("Resizing",function(){t.graphicalPanel.style.width=indexToX(t.maxX+1)+"px",t.graphicalPanel.style.height=t.getHeight()+"px"}).start(!1)}},t.prototype.getHeight=function(){return this.rootLabel.offsetTop-this.firstCommit.view.label.offsetTop},t.prototype.buildGraph=function(){var t=this,e=Object.keys(this.commits);e.forEach(function(e){var n=t.commits[e];n.initRelations()}),e.forEach(function(e){var n=t.commits[e];n.initHeadSpecifity(),n.initMerges()}),this.initBranches()},t.prototype.drawCommit=function(t){t.view=new CommitView(this.canvas,this.config,t),t.outOfScope===!1&&(t.view.label=this.drawLabel(t),t.view.label.onclick=function(){console&&Logger.debug(t)},this.textPanel.appendChild(t.view.label),t.view.label.style["padding-left"]=indexToX(this.maxX+1)+"px")},t.prototype.drawReferences=function(t){t.view.addRelations(),t.view.redraw()},t.prototype.drawLabel=function(t){var e=document.createElement("div");e.className="commit-legend";var n=t.getShortSha(),i=t.getFullSha(),o=Expandable.extend(document.createElement("span"));if(o.whenShort(n+" "),o.whenFull(i),o.style.fontFamily="Courier",e.appendChild(o),e.appendChild(this.drawIdentity("author",t.author)),t.author.email!=t.committer.email&&e.appendChild(this.drawIdentity("committer",t.committer)),t.branch&&t.branch.commit===t&&!t.branch.anonymous){var a=document.createElement("span");a.className="head-label",a.style.backgroundColor=t.getColor(40),a.style.color="white",a.style.paddingLeft=a.style.paddingRight="2px",a.innerHTML=t.branch.ref,e.appendChild(a)}var r=document.createElement("span");return r.innerHTML=" "+t.subject,r.style.color=t.hasMerges()?"grey":"black",e.appendChild(r),e.style.position="relative",e},t.prototype.drawIdentity=function(t,e){var n=Expandable.extend(document.createElement("gitline-identity"));n.setAttribute("class",t),n.setAttribute("name",e.name);var i=e.name+" &lt;"+e.email.toLowerCase()+"&gt;";return n.setAttribute("title",i),n.style.background=this.config.avatars.map(function(t){return"url("+t(e.email)+") no-repeat"}).join(", "),n.whenFull(i),n.whenShort(" "),n},t.prototype.initBranches=function(){for(var t=Object.keys(this.headsMap),e=0;e<t.length;e++){var n=t[e],i=this.headsMap[n];i.commit.initDefaultBranch()}var o=this;t.sort(function(t,e){var n=o.headsMap[t].commit,i=o.headsMap[e].commit;return n===i?0:n.branch.category===i.branch.category?n.branch.specifity-i.branch.specifity:n.branch.category.length-i.branch.category.length});for(var a=0,e=0;e<t.length;e++){var n=t[e],i=this.headsMap[n],r=i.commit;if(r.branch===i){i.lane=a,a++;for(var s=0;s<t.length;s++){for(var h=!0,c=0;c<t.length;c++){var l=t[c],d=this.headsMap[l].commit;(void 0===d||d.branch!=i&&d.branch.lane===s&&(r.intersects(d)||r.branch.category!=d.branch.category))&&(h=!1)}if(h){Logger.debug("NO INTERSECTS: ",r.branch.ref," - ",d.branch.ref),i.lane=s;break}}this.maxX=Math.max(this.maxX,i.lane)}}},t.prototype.fromJSON=function(t){return this.fromProvider(new LocalGit2JsonProvider(t))},t.prototype.fromProvider=function(t){return this.commitProvider=t,this},t.prototype.renderTo=function(t){return void 0!==this.headerPanel&&t.appendChild(this.headerPanel),t.appendChild(this.loadingPanel=document.createElement("gitline-loadingpanel")),t.appendChild(this.contentPanel=document.createElement("gitline-contentpanel")),this.contentPanel.appendChild(this.graphicalPanel=document.createElement("gitline-graphicalpanel")),this.contentPanel.appendChild(this.textPanel=document.createElement("gitline-textpanel")),this.al=new AsyncLoader(this.loadingPanel),this.render(),this},t.prototype.withHeader=function(t){return"string"==typeof t?(this.headerPanel=document.createElement("gitline-headerpanel"),this.headerPanel.innerHTML=t):this.headerPanel=t,this},t.displayFatalError=function(t){alert(t)},t}(),Shape=function(){function t(t,e){this.dependencies=[],this.canvas=t,this.element=e}return t.prototype.addIfMissing=function(){void 0!==this.element&&null==this.renderedTo&&(this.addElements(),this.renderedTo=this.canvas)},t.prototype.addElements=function(){this.canvas.addElement(this.element)},t.prototype.update=function(){this.dependencies.forEach(function(t){t.update()})},t.prototype.dependsOn=function(t){t.dependencies.push(this)},t}(),Dot=function(t){function e(e){t.call(this,e,e.createRectangle())}return __extends(e,t),e.prototype.size=function(t,e){return this.width=t,this.height=e,this.element.setWidth(t),this.element.setHeight(e),this.element.setXRadius(t/4),this.element.setYRadius(t/4),this.update(),this.addIfMissing(),this},e.prototype.at=function(t,e){return this.x=t,this.y=e,this.update(),this.addIfMissing(),this},e.prototype.color=function(t,e){return this.element.getStroke().setWeight(1),this.element.getStroke().setColor(t),this.element.getFill().setColor(e),this},e.prototype.update=function(){this.element.setLocationXY(this.x-this.width/2,this.y-this.height/2),t.prototype.update.call(this)},e}(Shape),BaseLink=function(t){function e(e,n){t.call(this,e,n)}return __extends(e,t),e.prototype.from=function(t){return this.dependsOn(t),this.parentDot=t,this},e.prototype.to=function(t){return this.childDot=t,this},e.prototype.color=function(t){return this.element.getStroke().setWeight(1),this.element.getStroke().setColor(t),this.lineColor=t,this.addIfMissing(),this},e}(Shape),Curve=function(t){function e(e){t.call(this,e,e.createCurve()),this.arrow=this.canvas.createPolygon()}return __extends(e,t),e.prototype.addElements=function(){t.prototype.addElements.call(this),this.canvas.addElement(this.arrow)},e.prototype.update=function(){var t=this.childDot.x,e=this.childDot.y,n=this.parentDot.x,i=this.parentDot.y,o=this.lineColor,a=n>t?1:-1;this.element.setStartPointXY(n,i-this.parentDot.height/2),this.element.setEndPointXY(t+this.childDot.width/2*a,e),this.element.setControl2PointXY(n,e),this.element.setControl1PointXY(n,e),this.element.getStroke().setWeight(1),this.element.getStroke().setColor(o),this.arrow.getStroke().setWeight(0),this.arrow.getFill().setColor(o),this.arrow.clearPoints(),this.arrow.addPointXY(0,0),this.arrow.addPointXY(6,-4),this.arrow.addPointXY(6,4);for(var r=0;r<this.arrow.getPointsCount();r++){var s=this.arrow.getPointAt(r).X,h=this.arrow.getPointAt(r).Y;this.arrow.setPointXYAt(s*a+t+this.childDot.width/2*a,h+e,r)}},e}(BaseLink),Straight=function(t){function e(e){t.call(this,e,e.createLine())}return __extends(e,t),e.prototype.update=function(){t.prototype.update.call(this),this.element.setStartPointXY(this.parentDot.x,this.parentDot.y-this.parentDot.height/2),this.element.setEndPointXY(this.childDot.x,this.childDot.y+this.childDot.height/2)},e}(BaseLink),Creation=function(t){function e(e){t.call(this,e,e.createLine()),this.secondLine=e.createLine()}return __extends(e,t),e.prototype.addElements=function(){t.prototype.addElements.call(this),this.canvas.addElement(this.secondLine)},e.prototype.update=function(){t.prototype.update.call(this),this.parentDot.x<this.childDot.x?this.element.setStartPointXY(this.parentDot.x+this.parentDot.width/2,this.parentDot.y):this.element.setStartPointXY(this.parentDot.x-this.parentDot.width/2,this.parentDot.y),this.element.setEndPointXY(this.childDot.x,this.parentDot.y),this.element.getStroke().setWeight(1),this.element.getStroke().setDashStyle(jsgl.DashStyles.DASH),this.element.getStroke().setColor(this.lineColor),this.secondLine.setStartPointXY(this.childDot.x,this.parentDot.y),this.secondLine.setEndPointXY(this.childDot.x,this.childDot.y+this.childDot.height/2),this.secondLine.getStroke().setWeight(1),this.secondLine.getStroke().setColor(this.lineColor)},e}(BaseLink),CommitView=function(){function t(t,e,n){this.lines=[],this.canvas=t,this.config=e,this.commit=n,this.dot=new Dot(this.canvas)}return t.prototype.addRelations=function(){var t=this;if(null!=this.commit.directparent){var e;e=this.commit.getLane()==this.commit.directparent.getLane()||this.commit.directparent.outOfScope?new Straight(this.canvas).from(this.commit.directparent.view.dot).to(this.dot).color(this.commit.getColor(20)):new Creation(this.canvas).from(this.commit.directparent.view.dot).to(this.dot).color(this.commit.getColor(30)),this.lines.push(e)}var n=this.commit.merges.standard.concat(this.commit.merges.anonymous);n.forEach(function(e){t.lines.push(new Curve(t.canvas).from(e.source.view.dot).to(t.dot).color(e.source.getColor(35)))})},t.prototype.redraw=function(){this.dot.at(this.commit.getX(),this.commit.getY()).size(this.config.dotWidth,this.config.dotHeight).color(this.commit.getColor(20),this.commit.getColor(80))},t}(),Identity=function(){function t(t,e,n){this.name=t,this.email=e,this.date=n}return t}(),Commit=function(){function t(t,e){this.warnings=[],this.inHeadsRef=[],this.parents=[],this.childs=[],this.siblings=[],this.outOfScope=!1,this.merges={standard:[],anonymous:[]},this.container=t,this.data=e,this.data.obj=this,null==e.inHeads&&(e.inHeads=[]),null==e.parenthashes&&(e.parenthashes=[]),null==e.refnames&&(e.refnames=[]),this.sha=e.sha,this.ssha=e.ssha,this.subject=e.subject,this.indexY=t.maxIndexY++,this.committer=new Identity(this.data.committername,this.data.committeremail,new Date(this.data.committerdate).getTime()),this.author=new Identity(this.data.authorname,this.data.authoremail,new Date(this.data.authordate).getTime())}return t.prototype.getShortSha=function(){return this.ssha},t.prototype.getFullSha=function(){return this.sha},t.prototype.initRelations=function(){var e=this,n=this;this.data.parenthashes.forEach(function(i){var o=e.container.commits[i];if(null==o&&(o=new t(e.container,{sha:i+Math.random()}),o.outOfScope=!0,n.container.addCommit(o)),e.parents.push(o),o.childs.push(e),e.siblings=o.childs,e.parents.length>0){var a=e.parents[0];e.directparent=a,a.directchild=e}}),this.data.inHeads.forEach(function(t){var n=e.container.commits[t];void 0===e.inHeadsRef.indexOf(n)&&e.inHeadsRef.push(n)})},t.prototype.initDefaultBranch=function(){for(var t=this;null!=t;)(null==t.branch||t.branch.specifity>this.branch.specifity)&&(t.branch=this.branch),t.branch.start=t,t.branch.origin=t.directparent,t=t.directparent},t.prototype.initHeadSpecifity=function(){for(var t=0;t<this.data.refnames.length;t++){var e=this.data.refnames[t];if(!this.container.config.remoteOnly||0==e.indexOf("origin/")){this.container.config.remoteOnly&&(e=e.replace(/^origin./,""));var n=1e3*e.replace(/[^\/-]/g,"").length;n+=e.replace(/[^a-zA-Z0-9-]/,"").length,this.container.addBranch(e,this,n),(null==this.maxSpecifity||n<this.maxSpecifity)&&(Logger.debug("assigning branch",e,this.sha,this.maxSpecifity,n),this.maxSpecifity=n,this.branch=this.container.headsMap[e]),this.initDefaultBranch()}}},t.prototype.initMerges=function(){if(this.merges={standard:[],anonymous:[]},this.warnings=[],1==this.parents.length){var t=this.parents[0];this.directparent=t,t.directchild=this}if(this.parents.length>=2){var t=this.parents[0];this.directparent=t,t.directchild=this;for(var e=1;e<this.parents.length;e++){var n=this.parents[e];null!=n&&(n.data.refnames.length>0||n.inHeadsRef.length!=t.inHeadsRef.length?this.merges.standard.push({source:n}):(this.merges.anonymous.push({source:n}),this.initAnonymous()))}}},t.prototype.initAnonymous=function(){var t=this;this.merges.anonymous.forEach(function(e){for(var n=e.source,i=t;null!=i&&null==i.branch;)i=i.directchild;null!=i&&null==n.branch&&(n.branch=new Branch(i.branch.ref+"/anonymous"+n.sha+Math.random(),n,i.branch.specifity+1),n.branch.anonymous=!0,n.branch.parent=i.branch,n.branch.start=i,n.branch.category=i.branch.category,t.container.headsMap[n.branch.ref]=n.branch)})},t.prototype.getColor=function(t){if(null!=this.branch){var e=this.branch;this.branch.anonymous&&(e=this.branch.parent);var n=300*e.lane/this.container.maxX;return"hsl("+n+", 100%, "+t+"%)"}this.warn("No Branch set")},t.prototype.hasMerges=function(){return this.merges.standard.length>0||this.merges.anonymous.length>0},t.prototype.getX=function(){return indexToX(this.getLane())},t.prototype.getY=function(){return this.outOfScope?this.container.rootLabel.offsetTop+20:this.view.label.offsetTop-this.container.firstCommit.view.label.offsetTop+this.view.label.offsetHeight/2},t.prototype.getOriginIndexY=function(){return void 0!=this.branch.origin?this.branch.origin.getIndexY():this.branch.start.outOfScope?this.container.maxIndexY:this.branch.start.indexY},t.prototype.intersects=function(t){var e=9999999,n=999999;return this.outOfScope||t.outOfScope?!0:(null!=t.directchild&&(e=t.directchild.indexY),null!=this.directchild&&(n=this.directchild.indexY),this.getOriginIndexY()>=Math.min(t.indexY,e)&&Math.min(n,this.indexY)<=t.getOriginIndexY())},t.prototype.getIndex=function(){return this.data.index},t.prototype.getIndexY=function(){return this.indexY},t.prototype.warn=function(t){this.warnings.push(t),this.debug(t)},t.prototype.debug=function(t){console&&Logger.debug(t,this)},t.prototype.getLane=function(){return null!=this.branch?this.branch.commit.branch.lane:null},t}(),Branch=function(){function t(t,e,n){this.ref=t,this.commit=e,this.specifity=n,this.shortname=t.split("@")[0],this.category=this.shortname.substring(0,this.shortname.lastIndexOf("/"))}return t}();
//# sourceMappingURL=data:application/json;base64,
