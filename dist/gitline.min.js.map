{"version":3,"sources":["gitline.js","/source/AsyncLoader.ts","/source/Config.ts","/source/CommitProvider.ts","/source/Expandable.ts","/source/plugins/LocalGit2JsonProvider.ts","/source/plugins/GithubCommitProvider.ts","/source/Main.ts","/source/rendering/Shape.ts","/source/rendering/BaseLink.ts","/source/rendering/Curve.ts","/source/rendering/Straight.ts","/source/rendering/Creation.ts","/source/rendering/Dot.ts","/source/CommitView.ts","/source/Commit.ts","/source/Branch.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","Gitline","AsyncLoadingItem","label","data","callback","index","of","AsyncLoader","element","items","suspended","then","datacallback","_this","thenSingle","i","length","unshift","push","start","shield","hidden","next","nextItem","shift","undefined","showStatus","window","setTimeout","Logger","debug","execute","suspend","resume","item","innerHTML","e","error","indexToX","Config","dotHeight","dotWidth","remoteOnly","avatars","avatar_gravatar","email","CryptoJS","MD5","toLowerCase","CommitProvider","url","whenDone","withErrorCallback","callbackFn","errorCallback","withCallback","onRequested","Error","request","Expandable","extend","extended","classList","add","whenFull","onclick","$","hide","stop","fadeIn","selectElementText","whenShort","onmouseout","remove","el","sel","range","doc","document","getSelection","createRange","selectNodeContents","removeAllRanges","addRange","body","createTextRange","moveToElementText","select","Plugin","LocalGit2JsonProvider","_super","apply","arguments","xhr","jQuery","getJSON","done","json","fail","GithubCommitProvider","limit","accessToken","call","forks","baseBranches","gitURL","api","params","indexOf","replace","loadForks","message","branches","processBranches","loadBranches","fork","forEach","branch","repo","full_name","name","forkRequests","map","when","loadCommits","commitRequests","commit","sha","processCommits","process","c","ssha","substring","parenthashes","parents","x","authorname","author","authoremail","authordate","moment","date","unix","authortimestamp","valueOf","committername","committer","committeremail","committerdate","committertimestamp","subject","refnames","inHeads","assigned","assignHeads","newdata","keys","sort","a","parents1","newParents","parentHash","h","Main","maxX","maxIndexY","commits","headsMap","config","addCommit","getFullSha","firstCommit","addBranch","refname","specifity","Branch","render","canvas","jsgl","Panel","graphicalPanel","al","commitProvider","Commit","buildGraph","drawCommit","rootLabel","createElement","className","textPanel","appendChild","drawReferences","style","width","height","getHeight","onresize","view","redraw","offsetTop","shas","initRelations","initHeadSpecifity","initMerges","initBranches","CommitView","outOfScope","drawLabel","console","addRelations","shortSha","getShortSha","trim","fullSha","setAttribute","drawIdentity","anonymous","head","backgroundColor","getColor","ref","hasMerges","type","id","container","identity","fullname","background","f","join","datetime","fullDate","format","heads","headName","initDefaultBranch","self","l","r","lHead","rHead","category","maxLane","tip","lane","canUseLane","j","jheadName","headOnLane","intersects","Math","max","fromJSON","jsonFile","fromProvider","renderTo","panel","headerPanel","loadingPanel","contentPanel","withHeader","header","Rendering","Shape","dependencies","addIfMissing","renderedTo","addElements","addElement","update","dep","dependsOn","on","BaseLink","from","parentDot","to","childDot","color","lineColor","getStroke","setWeight","setColor","Curve","createCurve","arrow","createPolygon","y","parentX","parentY","direction","setStartPointXY","setEndPointXY","setControl2PointXY","setControl1PointXY","getFill","clearPoints","addPointXY","getPointsCount","px","getPointAt","X","py","Y","setPointXYAt","Straight","createLine","Creation","secondLine","setDashStyle","DashStyles","DASH","Dot","createRectangle","size","setWidth","setHeight","setXRadius","setYRadius","at","strokeColor","fillColor","setLocationXY","lines","dot","directparent","dpl","getLane","allmerges","merges","standard","concat","merge","source","getX","getY","Identity","warnings","inHeadsRef","childs","siblings","obj","indexY","hash","parentCommit","random","dp","directchild","headsha","origin","maxSpecifity","mp","initAnonymous","_merge","child","parent","lightness","hue","warn","offsetHeight","getOriginIndexY","getIndexY","getTipPlusIndexY","min","other","warning","shortname","split","lastIndexOf"],"mappings":"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","file":"gitline.min.js","sourcesContent":["var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Gitline;\n(function (Gitline) {\n    var AsyncLoadingItem = (function () {\n        function AsyncLoadingItem(label, data, callback, index, of) {\n            this.label = label;\n            this.data = data;\n            this.callback = callback;\n            this.index = index;\n            this.of = of;\n        }\n        return AsyncLoadingItem;\n    }());\n    var AsyncLoader = (function () {\n        function AsyncLoader(element) {\n            this.items = [];\n            this.suspended = false;\n            this.element = element;\n        }\n        /** do this async, display the label and the data */\n        AsyncLoader.prototype.then = function (label, datacallback, callback) {\n            var _this = this;\n            this.thenSingle(label, function () {\n                // add it to the beginning of the queue\n                var data = datacallback();\n                for (var i = data.length - 1; i >= 0; i--) {\n                    _this.items.unshift(new AsyncLoadingItem(label, data[i], callback, i, data.length));\n                }\n            });\n            return this;\n        };\n        AsyncLoader.prototype.thenSingle = function (label, callback) {\n            this.items.push(new AsyncLoadingItem(label, null, callback, 0, 1));\n            return this;\n        };\n        AsyncLoader.prototype.start = function (shield) {\n            if (shield === void 0) { shield = true; }\n            if (shield) {\n                this.element.hidden = false;\n            }\n            this.next();\n        };\n        AsyncLoader.prototype.next = function () {\n            var _this = this;\n            var nextItem = this.items.shift();\n            if (nextItem !== undefined) {\n                // avoid yielding control unnecessarily, but limit stack depth at the same time\n                if ((nextItem.index % 50) === 0) {\n                    this.showStatus(nextItem);\n                    window.setTimeout(function () {\n                        Logger.debug(\"executing \" + nextItem.label + \" (\" + nextItem.index + \"/\" + nextItem.of + \")\");\n                        _this.execute(nextItem);\n                    }, 0);\n                }\n                else {\n                    this.execute(nextItem);\n                }\n            }\n            else {\n                this.element.hidden = true;\n            }\n        };\n        AsyncLoader.prototype.suspend = function () {\n            this.suspended = true;\n        };\n        AsyncLoader.prototype.resume = function () {\n            this.suspended = false;\n            this.next();\n        };\n        AsyncLoader.prototype.showStatus = function (item) {\n            this.element.innerHTML = item.label; // + \" (\"+item.index + \"/\"+item.of+\")\";\n        };\n        AsyncLoader.prototype.execute = function (item) {\n            try {\n                item.callback(item.data);\n                if (!this.suspended) {\n                    this.next();\n                }\n            }\n            catch (e) {\n                this.error(e);\n            }\n        };\n        AsyncLoader.prototype.error = function (e) {\n            Logger.error(e);\n            this.element.innerHTML = e;\n            this.suspend();\n        };\n        return AsyncLoader;\n    }());\n    Gitline.AsyncLoader = AsyncLoader;\n})(Gitline || (Gitline = {}));\n///<reference path=\"typedefs/cryptojs.d.ts\"/>\nvar Gitline;\n(function (Gitline) {\n    function indexToX(index) {\n        return index * 20 + 12;\n    }\n    Gitline.indexToX = indexToX;\n    var Config = (function () {\n        function Config() {\n            this.dotHeight = 6;\n            this.dotWidth = 8;\n            this.remoteOnly = false;\n            this.avatars = [this.avatar_gravatar];\n        }\n        Config.prototype.avatar_gravatar = function (email) {\n            return \"http://www.gravatar.com/avatar/\" + CryptoJS.MD5(email.toLowerCase()) + \"?s=20&d=mm\";\n        };\n        return Config;\n    }());\n    Gitline.Config = Config;\n})(Gitline || (Gitline = {}));\nvar Gitline;\n(function (Gitline) {\n    var CommitProvider = (function () {\n        function CommitProvider(url) {\n            this.url = url;\n        }\n        CommitProvider.prototype.whenDone = function (data) {\n            this.callback(data);\n        };\n        CommitProvider.prototype.withErrorCallback = function (callbackFn) {\n            this.errorCallback = callbackFn;\n        };\n        CommitProvider.prototype.withCallback = function (callbackFn) {\n            this.callback = callbackFn;\n        };\n        /** this method should be overwritten. it must call whenDone(data) when all data was loaded. */\n        CommitProvider.prototype.onRequested = function (url) {\n            throw new Error(\"onRequested not implemented on \" + this);\n        };\n        CommitProvider.prototype.request = function () {\n            this.onRequested(this.url);\n        };\n        CommitProvider.prototype.error = function (e) {\n            this.errorCallback(e);\n        };\n        return CommitProvider;\n    }());\n    Gitline.CommitProvider = CommitProvider;\n})(Gitline || (Gitline = {}));\n///<reference path=\"typedefs/jquery.d.ts\"/>\nvar Gitline;\n(function (Gitline) {\n    /**\n     * Elements with two contents, that expand on double click\n     */\n    var Expandable = (function () {\n        function Expandable() {\n        }\n        Expandable.extend = function (element) {\n            var extended = element;\n            element.classList.add(\"gitline-expandable\");\n            extended.whenFull = function (innerHTML) {\n                extended.onclick = function () {\n                    extended.innerHTML = innerHTML;\n                    $(extended).hide().stop().fadeIn(\"fast\");\n                    element.classList.add(\"gitline-expandable-expanded\");\n                    Expandable.selectElementText(element);\n                };\n            };\n            extended.whenShort = function (innerHTML) {\n                extended.innerHTML = innerHTML;\n                extended.onmouseout = function () {\n                    // Delay hiding it\n                    window.setTimeout(function () {\n                        extended.innerHTML = innerHTML;\n                        element.classList.remove(\"gitline-expandable-expanded\");\n                    }, 1000);\n                };\n            };\n            return extended;\n        };\n        // x-browser text select\n        // http://stackoverflow.com/questions/985272/selecting-text-in-an-element-akin-to-highlighting-with-your-mouse\n        Expandable.selectElementText = function (el) {\n            var doc = window.document, sel, range;\n            if (window.getSelection && doc.createRange) {\n                sel = window.getSelection();\n                range = doc.createRange();\n                range.selectNodeContents(el);\n                sel.removeAllRanges();\n                sel.addRange(range);\n            }\n            else if (doc.body.createTextRange) {\n                range = doc.body.createTextRange();\n                range.moveToElementText(el);\n                range.select();\n            }\n        };\n        return Expandable;\n    }());\n    Gitline.Expandable = Expandable;\n})(Gitline || (Gitline = {}));\n///<reference path=\"../CommitProvider.ts\"/>\n///<reference path=\"../Main.ts\"/>\n///<reference path=\"../typedefs/jquery.d.ts\"/>\nvar Gitline;\n(function (Gitline) {\n    var Plugin;\n    (function (Plugin) {\n        var LocalGit2JsonProvider = (function (_super) {\n            __extends(LocalGit2JsonProvider, _super);\n            function LocalGit2JsonProvider() {\n                _super.apply(this, arguments);\n            }\n            LocalGit2JsonProvider.prototype.onRequested = function (url) {\n                var _this = this;\n                var xhr = jQuery.getJSON(url, {});\n                xhr.done(function (json) {\n                    _this.whenDone(json);\n                });\n                xhr.fail(function () {\n                    _this.error(\"Error loading git data from \" + url + \" create it using git2json\");\n                });\n            };\n            return LocalGit2JsonProvider;\n        }(Gitline.CommitProvider));\n        Plugin.LocalGit2JsonProvider = LocalGit2JsonProvider;\n    })(Plugin = Gitline.Plugin || (Gitline.Plugin = {}));\n})(Gitline || (Gitline = {}));\n///<reference path=\"../CommitProvider.ts\"/>\n///<reference path=\"../typedefs/jquery.d.ts\"/>\n///<reference path=\"../typedefs/moment-node.d.ts\"/>\n///<reference path=\"../typedefs/moment.d.ts\"/>\nvar Gitline;\n(function (Gitline) {\n    var Plugin;\n    (function (Plugin) {\n        /**\n         * GitHub commit provider. only works if there is and accesstoken configured in the browser\n         */\n        var GithubCommitProvider = (function (_super) {\n            __extends(GithubCommitProvider, _super);\n            function GithubCommitProvider(url, limit, accessToken) {\n                _super.call(this, url);\n                this.forks = [];\n                this.baseBranches = [];\n                this.data = {};\n                this.accessToken = accessToken;\n                this.limit = limit;\n            }\n            GithubCommitProvider.prototype.gitURL = function (url, api, params) {\n                if (params === void 0) { params = \"\"; }\n                // convert to api url and remove trailing /\n                if (url.indexOf(\"api.github.com\") == -1) {\n                    url = url.replace(/.*github.com/, \"https://api.github.com/repos/\").replace(/\\/\\//g, \"/\");\n                }\n                return url + \"/\" + api + \"?access_token=\" + this.accessToken + \"&per_page=\" + this.limit + \"&callback=?&\" + params;\n            };\n            GithubCommitProvider.prototype.onRequested = function (url) {\n                this.loadForks(url);\n            };\n            GithubCommitProvider.prototype.loadForks = function (url) {\n                var _this = this;\n                jQuery.getJSON(this.gitURL(url, \"forks\")).done(function (forks) {\n                    if (forks.data.message !== undefined) {\n                        _this.error(\"Github API: \" + forks.data.message);\n                        return;\n                    }\n                    jQuery.getJSON(_this.gitURL(url, \"branches\")).done(function (branches) {\n                        _this.processBranches(url, branches.data);\n                        _this.forks = forks.data;\n                        _this.loadBranches();\n                    });\n                });\n            };\n            GithubCommitProvider.prototype.processBranches = function (fork, data) {\n                var _this = this;\n                data.forEach(function (branch) {\n                    branch.repo = fork.url !== undefined ? fork.url : fork;\n                    if (fork.full_name !== undefined) {\n                        branch.name = branch.name + \"@\" + fork.full_name;\n                    }\n                    _this.baseBranches.push(branch);\n                });\n            };\n            GithubCommitProvider.prototype.loadBranches = function () {\n                var _this = this;\n                var forkRequests = this.forks.map(function (fork) {\n                    return jQuery.getJSON(_this.gitURL(fork.url, \"branches\"), function (data) {\n                        Logger.debug(\"loaded branches for \" + fork.name);\n                        _this.processBranches(fork, data.data);\n                    });\n                });\n                jQuery.when.apply(jQuery, forkRequests).done(function () {\n                    Logger.debug(\"all branches loaded\");\n                    _this.loadCommits();\n                });\n            };\n            GithubCommitProvider.prototype.loadCommits = function () {\n                var _this = this;\n                var commitRequests = [];\n                this.baseBranches.forEach(function (b) {\n                    var commit = _this.data[b.commit.sha];\n                    if (commit == undefined) {\n                        commitRequests.push(jQuery.getJSON(_this.gitURL(b.repo, \"commits\", \"sha=\" + b.commit.sha), function (data) {\n                            Logger.debug(\"loaded commits for \" + b.name);\n                            _this.processCommits(data.data);\n                        }));\n                    }\n                });\n                jQuery.when.apply(jQuery, commitRequests).done(function () {\n                    _this.process();\n                });\n            };\n            GithubCommitProvider.prototype.processCommits = function (data) {\n                var _this = this;\n                data.map(function (data) {\n                    var c = {};\n                    c.sha = data.sha;\n                    c.ssha = data.sha.substring(0, 8);\n                    c.parenthashes = data.parents.map(function (x) {\n                        return x.sha;\n                    });\n                    c.authorname = data.commit.author.name;\n                    c.authoremail = data.commit.author.email;\n                    c.authordate = moment(data.commit.author.date).unix();\n                    c.authortimestamp = moment(data.commit.author.date).valueOf();\n                    c.committername = data.commit.committer.name;\n                    c.committeremail = data.commit.committer.email;\n                    c.committerdate = moment(data.commit.committer.date).unix();\n                    c.committertimestamp = moment(data.commit.committer.date).valueOf();\n                    c.subject = data.commit.message;\n                    c.body = \"\"; // Todo: where to get this?\n                    c.refnames = []; // set when parsing branches\n                    c.inHeads = []; // set when parsing branches\n                    return c;\n                }).forEach(function (commit) {\n                    _this.data[commit.sha] = commit;\n                });\n            };\n            GithubCommitProvider.prototype.process = function () {\n                var _this = this;\n                this.baseBranches.forEach(function (b) {\n                    var commit = _this.data[b.commit.sha];\n                    if (commit == undefined) {\n                    }\n                    else {\n                        b.assigned = true;\n                        commit.refnames.push(b.name);\n                        _this.assignHeads(commit);\n                    }\n                });\n                // Sort\n                var newdata = {};\n                Object.keys(this.data).sort(function (a, b) {\n                    return _this.data[b].committertimestamp - _this.data[a].committertimestamp;\n                }).forEach(function (sha) {\n                    newdata[sha] = _this.data[sha];\n                });\n                this.whenDone(newdata);\n            };\n            GithubCommitProvider.prototype.assignHeads = function (commit) {\n                var _this = this;\n                commit.parents1 = commit.parenthashes.map(function (x) {\n                    return x;\n                }); // copy array\n                while (commit.parents1.length > 0) {\n                    var newParents = [];\n                    commit.parents1.forEach(function (parentHash) {\n                        var p = _this.data[parentHash];\n                        if (p != undefined) {\n                            p.inHeads.push(commit.sha);\n                            // add all grandparents to the newparents\n                            p.parenthashes.forEach(function (h) {\n                                if (newParents.indexOf(h) === -1) {\n                                    newParents.push(h);\n                                }\n                            });\n                        }\n                    });\n                    commit.parents1 = newParents;\n                }\n            };\n            return GithubCommitProvider;\n        }(Gitline.CommitProvider));\n        Plugin.GithubCommitProvider = GithubCommitProvider;\n    })(Plugin = Gitline.Plugin || (Gitline.Plugin = {}));\n})(Gitline || (Gitline = {}));\n///<reference path=\"Commit.ts\"/>\n///<reference path=\"AsyncLoader.ts\"/>\n///<reference path=\"Config.ts\"/>\n///<reference path=\"CommitProvider.ts\"/>\n///<reference path=\"Branch.ts\"/>\n///<reference path=\"Expandable.ts\"/>\n///<reference path=\"typedefs/jquery.d.ts\"/>\n///<reference path=\"plugins/LocalGit2JsonProvider.ts\"/>\n///<reference path=\"plugins/GithubCommitProvider.ts\"/>\n///<reference path=\"typedefs/moment-node.d.ts\"/>\n///<reference path=\"typedefs/moment.d.ts\"/>\nvar Gitline;\n(function (Gitline) {\n    function create() {\n        return new Main();\n    }\n    Gitline.create = create;\n    var Main = (function () {\n        function Main() {\n            this.maxX = 0;\n            this.maxIndexY = 0;\n            this.commits = {};\n            this.headsMap = {};\n            this.config = new Gitline.Config();\n        }\n        Main.prototype.addCommit = function (commit) {\n            this.commits[commit.getFullSha()] = commit;\n            // first commit needed by rendering\n            if (this.firstCommit === undefined) {\n                this.firstCommit = commit;\n            }\n        };\n        Main.prototype.addBranch = function (refname, commit, specifity) {\n            this.headsMap[refname] = new Gitline.Branch(refname, commit, specifity);\n        };\n        Main.prototype.render = function () {\n            var _this = this;\n            this.canvas = new jsgl.Panel(this.graphicalPanel);\n            this.al.thenSingle(\"Loading Data\", function () {\n                _this.al.suspend();\n                _this.commitProvider.withCallback(function (json) {\n                    _this.data = json;\n                    _this.al.resume();\n                });\n                _this.commitProvider.withErrorCallback(function (error) {\n                    _this.al.error(error);\n                });\n                _this.commitProvider.request();\n            }).then(\"Loading Commits\", function () {\n                return Object.keys(_this.data);\n            }, function (sha) {\n                var commit = new Gitline.Commit(_this, _this.data[sha]);\n                _this.addCommit(commit);\n            })\n                .thenSingle(\"Building Graph\", function () {\n                _this.buildGraph();\n            })\n                .then(\"Drawing Labels\", function () {\n                return Object.keys(_this.commits);\n            }, function (sha) {\n                var commit = _this.commits[sha];\n                _this.drawCommit(commit);\n            })\n                .thenSingle(\"Creating Legend\", function () {\n                _this.rootLabel = document.createElement('div');\n                _this.rootLabel.className = \"commit-legend\";\n                _this.textPanel.appendChild(_this.rootLabel);\n            })\n                .then(\"Drawing Merges\", function () {\n                return Object.keys(_this.commits);\n            }, function (sha) {\n                var commit = _this.commits[sha];\n                _this.drawReferences(commit);\n            })\n                .thenSingle(\"Resizing\", function () {\n                _this.graphicalPanel.style.width = Gitline.indexToX(_this.maxX + 1) + \"px\";\n                _this.graphicalPanel.style.height = _this.getHeight() + \"px\";\n            }).start();\n            window.onresize = function () {\n                _this.al.then(\"Redrawing\", function () {\n                    return Object.keys(_this.commits);\n                }, function (sha) {\n                    var commit = _this.commits[sha];\n                    commit.view.redraw();\n                }).thenSingle(\"Resizing\", function () {\n                    _this.graphicalPanel.style.width = Gitline.indexToX(_this.maxX + 1) + \"px\";\n                    _this.graphicalPanel.style.height = _this.getHeight() + \"px\";\n                }).start(false);\n            };\n        };\n        Main.prototype.getHeight = function () {\n            return this.rootLabel.offsetTop - this.firstCommit.view.label.offsetTop;\n        };\n        Main.prototype.buildGraph = function () {\n            var _this = this;\n            var shas = Object.keys(this.commits);\n            shas.forEach(function (sha) {\n                var commit = _this.commits[sha];\n                commit.initRelations();\n            });\n            shas.forEach(function (sha) {\n                var commit = _this.commits[sha];\n                commit.initHeadSpecifity();\n                commit.initMerges();\n            });\n            this.initBranches();\n        };\n        Main.prototype.drawCommit = function (commit) {\n            // Label\n            commit.view = new Gitline.CommitView(this.canvas, this.config, commit);\n            if (commit.outOfScope === false) {\n                commit.view.label = this.drawLabel(commit);\n                commit.view.label.onclick = function () {\n                    if (console) {\n                        Logger.debug(commit);\n                    }\n                };\n                this.textPanel.appendChild(commit.view.label);\n                commit.view.label.style['padding-left'] = Gitline.indexToX(this.maxX + 1) + \"px\";\n            }\n        };\n        Main.prototype.drawReferences = function (commit) {\n            commit.view.addRelations();\n            commit.view.redraw();\n        };\n        Main.prototype.drawLabel = function (commit) {\n            var label = document.createElement('gitline-legend');\n            // SHA Hash\n            var shortSha = commit.getShortSha().trim();\n            var fullSha = commit.getFullSha().trim();\n            var sha = Gitline.Expandable.extend(document.createElement(\"gitline-sha\"));\n            sha.setAttribute(\"title\", fullSha);\n            sha.whenShort(shortSha);\n            sha.whenFull(fullSha);\n            label.appendChild(sha);\n            // Author and committer\n            label.appendChild(this.drawIdentity(\"author\", commit.author));\n            if (commit.author.email != commit.committer.email) {\n                label.appendChild(this.drawIdentity(\"committer\", commit.committer));\n            }\n            // Branch - TODO: Tags and other branches\n            if (commit.branch && commit.branch.commit === commit && !commit.branch.anonymous) {\n                var head = Gitline.Expandable.extend(document.createElement(\"gitline-ref\"));\n                head.style.backgroundColor = commit.getColor(40);\n                head.whenShort(commit.branch.ref);\n                head.whenFull(commit.branch.ref);\n                label.appendChild(head);\n            }\n            // Subject\n            var subject = document.createElement(\"gitline-subject\");\n            subject.innerHTML = commit.subject;\n            if (commit.hasMerges()) {\n                subject.classList.add(\"has-merges\");\n            }\n            label.appendChild(subject);\n            return label;\n        };\n        Main.prototype.drawIdentity = function (type, id) {\n            var container = document.createElement(\"gitline-identity-container\");\n            var identity = Gitline.Expandable.extend(document.createElement(\"gitline-identity\"));\n            identity.classList.add(type);\n            var fullname = id.name + \" &lt;\" + id.email.toLowerCase() + \"&gt;\";\n            identity.setAttribute(\"title\", id.name + \" <\" + id.email.toLowerCase() + \">\");\n            identity.style.background = this.config.avatars.map(function (f) {\n                return \"url(\" + f(id.email) + \") no-repeat left center\";\n            }).join(\", \");\n            identity.whenFull(fullname);\n            identity.whenShort(\"\");\n            var datetime = Gitline.Expandable.extend(document.createElement(\"gitline-identity-datetime\"));\n            datetime.classList.add(type + \"-datetime\");\n            var fullDate = id.date.format(\"YYYY-MM-DD HH:mm\");\n            datetime.setAttribute(\"title\", fullDate);\n            datetime.whenFull(fullDate);\n            datetime.whenShort(id.date.format(\"HH:mm\"));\n            container.appendChild(identity);\n            container.appendChild(datetime);\n            return container;\n        };\n        /*\n         Based on the specifity assign the branches to the commits. if in doubt the commit will be on the most specific branch\n         */\n        Main.prototype.initBranches = function () {\n            var heads = Object.keys(this.headsMap);\n            /* set the index to the head object */\n            for (var i = 0; i < heads.length; i++) {\n                var headName = heads[i];\n                var head = this.headsMap[headName];\n                head.commit.initDefaultBranch();\n            }\n            /* Sort the branches by specifity */\n            var self = this;\n            heads.sort(function (l, r) {\n                var lHead = self.headsMap[l].commit;\n                var rHead = self.headsMap[r].commit;\n                if (lHead === rHead) {\n                    return 0;\n                }\n                if (lHead.branch.category === rHead.branch.category) {\n                    return lHead.branch.specifity - rHead.branch.specifity;\n                }\n                else {\n                    return lHead.branch.category.length - rHead.branch.category.length;\n                }\n            });\n            /* set the index to the head object */\n            var maxLane = 0;\n            for (var i = 0; i < heads.length; i++) {\n                var headName = heads[i];\n                var head = this.headsMap[headName];\n                var tip = head.commit;\n                if (tip.branch === head) {\n                    head.lane = maxLane;\n                    //head.index = maxLane;\n                    maxLane++;\n                    // Can we display this head a little more to the left?\n                    for (var l = 0; l < heads.length; l++) {\n                        var canUseLane = true;\n                        for (var j = 0; j < heads.length; j++) {\n                            var jheadName = heads[j];\n                            var headOnLane = this.headsMap[jheadName].commit;\n                            if (headOnLane === undefined ||\n                                headOnLane.branch != head &&\n                                    headOnLane.branch.lane === l &&\n                                    (tip.intersects(headOnLane) || tip.branch.category != headOnLane.branch.category)) {\n                                canUseLane = false;\n                            }\n                        }\n                        if (canUseLane) {\n                            Logger.debug(\"NO INTERSECTS: \", tip.branch.ref, \" - \", headOnLane.branch.ref);\n                            head.lane = l;\n                            break;\n                        }\n                    }\n                    this.maxX = Math.max(this.maxX, head.lane);\n                }\n            }\n        };\n        // Launching\n        Main.prototype.fromJSON = function (jsonFile) {\n            return this.fromProvider(new Gitline.Plugin.LocalGit2JsonProvider(jsonFile));\n        };\n        Main.prototype.fromProvider = function (commitProvider) {\n            this.commitProvider = commitProvider;\n            return this;\n        };\n        Main.prototype.renderTo = function (panel) {\n            if (this.headerPanel !== undefined) {\n                panel.appendChild(this.headerPanel);\n            }\n            panel.appendChild(this.loadingPanel = document.createElement(\"gitline-loadingpanel\"));\n            panel.appendChild(this.contentPanel = document.createElement(\"gitline-contentpanel\"));\n            this.contentPanel.appendChild(this.graphicalPanel = document.createElement(\"gitline-graphicalpanel\"));\n            this.contentPanel.appendChild(this.textPanel = document.createElement(\"gitline-textpanel\"));\n            this.al = new Gitline.AsyncLoader(this.loadingPanel);\n            this.render();\n            return this;\n        };\n        Main.prototype.withHeader = function (header) {\n            if (typeof header === \"string\") {\n                this.headerPanel = document.createElement(\"gitline-headerpanel\");\n                this.headerPanel.innerHTML = header;\n            }\n            else {\n                this.headerPanel = header;\n            }\n            return this;\n        };\n        return Main;\n    }());\n    Gitline.Main = Main;\n})(Gitline || (Gitline = {}));\nvar Gitline;\n(function (Gitline) {\n    var Rendering;\n    (function (Rendering) {\n        /**\n         * basic support for jsgl shapes\n         */\n        var Shape = (function () {\n            function Shape(canvas, element) {\n                this.dependencies = [];\n                this.canvas = canvas;\n                this.element = element;\n            }\n            Shape.prototype.addIfMissing = function () {\n                if (this.element !== undefined && this.renderedTo == null) {\n                    this.addElements();\n                    this.renderedTo = this.canvas;\n                }\n            };\n            Shape.prototype.addElements = function () {\n                this.canvas.addElement(this.element);\n            };\n            Shape.prototype.update = function () {\n                this.dependencies.forEach(function (dep) {\n                    dep.update();\n                });\n            };\n            Shape.prototype.dependsOn = function (on) {\n                on.dependencies.push(this);\n            };\n            return Shape;\n        }());\n        Rendering.Shape = Shape;\n    })(Rendering = Gitline.Rendering || (Gitline.Rendering = {}));\n})(Gitline || (Gitline = {}));\n///<reference path=\"Shape.ts\"/>\nvar Gitline;\n(function (Gitline) {\n    var Rendering;\n    (function (Rendering) {\n        /**\n         * Shape that links two dots\n         */\n        var BaseLink = (function (_super) {\n            __extends(BaseLink, _super);\n            function BaseLink(canvas, element) {\n                _super.call(this, canvas, element);\n            }\n            BaseLink.prototype.from = function (from) {\n                this.dependsOn(from);\n                this.parentDot = from;\n                return this;\n            };\n            BaseLink.prototype.to = function (to) {\n                //this.dependsOn(to);\n                this.childDot = to;\n                return this;\n            };\n            BaseLink.prototype.color = function (lineColor) {\n                this.element.getStroke().setWeight(1);\n                this.element.getStroke().setColor(lineColor);\n                this.lineColor = lineColor;\n                this.addIfMissing();\n                return this;\n            };\n            return BaseLink;\n        }(Rendering.Shape));\n        Rendering.BaseLink = BaseLink;\n    })(Rendering = Gitline.Rendering || (Gitline.Rendering = {}));\n})(Gitline || (Gitline = {}));\n///<reference path=\"BaseLink.ts\"/>\nvar Gitline;\n(function (Gitline) {\n    var Rendering;\n    (function (Rendering) {\n        var Curve = (function (_super) {\n            __extends(Curve, _super);\n            function Curve(canvas) {\n                _super.call(this, canvas, canvas.createCurve());\n                this.arrow = this.canvas.createPolygon();\n            }\n            Curve.prototype.addElements = function () {\n                _super.prototype.addElements.call(this);\n                // 2nd element\n                this.canvas.addElement(this.arrow);\n            };\n            Curve.prototype.update = function () {\n                var x = this.childDot.x;\n                var y = this.childDot.y;\n                var parentX = this.parentDot.x;\n                var parentY = this.parentDot.y;\n                var color = this.lineColor;\n                var direction = x < parentX ? 1 : -1;\n                this.element.setStartPointXY(parentX, parentY - this.parentDot.height / 2);\n                this.element.setEndPointXY(x + this.childDot.width / 2 * direction, y);\n                this.element.setControl2PointXY(parentX, y);\n                this.element.setControl1PointXY(parentX, y);\n                this.element.getStroke().setWeight(1);\n                this.element.getStroke().setColor(color);\n                this.arrow.getStroke().setWeight(0);\n                this.arrow.getFill().setColor(color);\n                this.arrow.clearPoints();\n                this.arrow.addPointXY(0, 0);\n                this.arrow.addPointXY(6, -4);\n                this.arrow.addPointXY(6, 4);\n                // Move\n                for (var i = 0; i < this.arrow.getPointsCount(); i++) {\n                    var px = this.arrow.getPointAt(i).X;\n                    var py = this.arrow.getPointAt(i).Y;\n                    //this.arrow.setPointXYAt(px, py + y, i);\n                    this.arrow.setPointXYAt(px * direction + x + this.childDot.width / 2 * direction, py + y, i);\n                }\n            };\n            return Curve;\n        }(Rendering.BaseLink));\n        Rendering.Curve = Curve;\n    })(Rendering = Gitline.Rendering || (Gitline.Rendering = {}));\n})(Gitline || (Gitline = {}));\n///<reference path=\"BaseLink.ts\"/>\nvar Gitline;\n(function (Gitline) {\n    var Rendering;\n    (function (Rendering) {\n        var Straight = (function (_super) {\n            __extends(Straight, _super);\n            function Straight(canvas) {\n                _super.call(this, canvas, canvas.createLine());\n            }\n            Straight.prototype.update = function () {\n                _super.prototype.update.call(this);\n                this.element.setStartPointXY(this.parentDot.x, this.parentDot.y - this.parentDot.height / 2);\n                this.element.setEndPointXY(this.childDot.x, this.childDot.y + this.childDot.height / 2);\n            };\n            return Straight;\n        }(Rendering.BaseLink));\n        Rendering.Straight = Straight;\n    })(Rendering = Gitline.Rendering || (Gitline.Rendering = {}));\n})(Gitline || (Gitline = {}));\n///<reference path=\"BaseLink.ts\"/>\nvar Gitline;\n(function (Gitline) {\n    var Rendering;\n    (function (Rendering) {\n        var Creation = (function (_super) {\n            __extends(Creation, _super);\n            function Creation(canvas) {\n                _super.call(this, canvas, canvas.createLine());\n                this.secondLine = canvas.createLine();\n            }\n            Creation.prototype.addElements = function () {\n                _super.prototype.addElements.call(this);\n                // 2nd element\n                this.canvas.addElement(this.secondLine); // TODO: add later?\n            };\n            Creation.prototype.update = function () {\n                _super.prototype.update.call(this);\n                // Horizontal dotted line\n                if (this.parentDot.x < this.childDot.x) {\n                    this.element.setStartPointXY(this.parentDot.x + this.parentDot.width / 2, this.parentDot.y);\n                }\n                else {\n                    this.element.setStartPointXY(this.parentDot.x - this.parentDot.width / 2, this.parentDot.y);\n                }\n                this.element.setEndPointXY(this.childDot.x, this.parentDot.y);\n                this.element.getStroke().setWeight(1);\n                this.element.getStroke().setDashStyle(jsgl.DashStyles.DASH);\n                this.element.getStroke().setColor(this.lineColor);\n                // Vertical line\n                this.secondLine.setStartPointXY(this.childDot.x, this.parentDot.y);\n                this.secondLine.setEndPointXY(this.childDot.x, this.childDot.y + this.childDot.height / 2);\n                this.secondLine.getStroke().setWeight(1);\n                this.secondLine.getStroke().setColor(this.lineColor);\n            };\n            return Creation;\n        }(Rendering.BaseLink));\n        Rendering.Creation = Creation;\n    })(Rendering = Gitline.Rendering || (Gitline.Rendering = {}));\n})(Gitline || (Gitline = {}));\n/// <reference path=\"Shape.ts\"/>\nvar Gitline;\n(function (Gitline) {\n    var Rendering;\n    (function (Rendering) {\n        var Dot = (function (_super) {\n            __extends(Dot, _super);\n            function Dot(canvas) {\n                _super.call(this, canvas, canvas.createRectangle());\n            }\n            Dot.prototype.size = function (width, height) {\n                this.width = width;\n                this.height = height;\n                this.element.setWidth(width);\n                this.element.setHeight(height);\n                this.element.setXRadius(width / 4);\n                this.element.setYRadius(width / 4);\n                this.update();\n                this.addIfMissing();\n                return this;\n            };\n            Dot.prototype.at = function (x, y) {\n                this.x = x;\n                this.y = y;\n                this.update();\n                this.addIfMissing();\n                return this;\n            };\n            Dot.prototype.color = function (strokeColor, fillColor) {\n                this.element.getStroke().setWeight(1);\n                this.element.getStroke().setColor(strokeColor);\n                this.element.getFill().setColor(fillColor);\n                return this;\n            };\n            Dot.prototype.update = function () {\n                this.element.setLocationXY(this.x - this.width / 2, this.y - this.height / 2);\n                _super.prototype.update.call(this);\n            };\n            return Dot;\n        }(Rendering.Shape));\n        Rendering.Dot = Dot;\n    })(Rendering = Gitline.Rendering || (Gitline.Rendering = {}));\n})(Gitline || (Gitline = {}));\n///<reference path=\"rendering/Curve.ts\"/>\n///<reference path=\"rendering/Straight.ts\"/>\n///<reference path=\"rendering/Creation.ts\"/>\n///<reference path=\"rendering/Dot.ts\"/>\n///<reference path=\"Config.ts\"/>\n///<reference path=\"Commit.ts\"/>\n///<reference path=\"rendering/Shape.ts\"/>\nvar Gitline;\n(function (Gitline) {\n    /**\n     * View of the Commit\n     */\n    var CommitView = (function () {\n        function CommitView(canvas, config, commit) {\n            this.lines = [];\n            this.canvas = canvas;\n            this.config = config;\n            this.commit = commit;\n            this.dot = new Gitline.Rendering.Dot(this.canvas);\n        }\n        CommitView.prototype.addRelations = function () {\n            var _this = this;\n            // Direct parent\n            if (this.commit.directparent != null) {\n                var dpl;\n                if (this.commit.getLane() == this.commit.directparent.getLane() || this.commit.directparent.outOfScope) {\n                    // direct parent is the same X/lane, this means it is a standard forward commit\n                    dpl = new Gitline.Rendering.Straight(this.canvas).from(this.commit.directparent.view.dot).to(this.dot).color(this.commit.getColor(20));\n                }\n                else {\n                    // direct parent is on a different lane, this is most certainly a new branch\n                    dpl = new Gitline.Rendering.Creation(this.canvas).from(this.commit.directparent.view.dot).to(this.dot).color(this.commit.getColor(30));\n                }\n                this.lines.push(dpl);\n            }\n            var allmerges = this.commit.merges.standard.concat(this.commit.merges.anonymous);\n            allmerges.forEach(function (merge) {\n                _this.lines.push(new Gitline.Rendering.Curve(_this.canvas)\n                    .from(merge.source.view.dot)\n                    .to(_this.dot)\n                    .color(merge.source.getColor(35)));\n            });\n        };\n        /** calculate the positions based on model and update the shapes */\n        CommitView.prototype.redraw = function () {\n            this.dot\n                .at(this.commit.getX(), this.commit.getY())\n                .size(this.config.dotWidth, this.config.dotHeight)\n                .color(this.commit.getColor(20), this.commit.getColor(80));\n        };\n        return CommitView;\n    }());\n    Gitline.CommitView = CommitView;\n})(Gitline || (Gitline = {}));\n///<reference path=\"Main.ts\"/>\n///<reference path=\"CommitView.ts\"/>\n///<reference path=\"Branch.ts\"/>\n///<reference path=\"typedefs/moment-node.d.ts\"/>\n///<reference path=\"typedefs/moment.d.ts\"/>\nvar Gitline;\n(function (Gitline) {\n    /** committer or author */\n    var Identity = (function () {\n        function Identity(name, email, date) {\n            this.name = name;\n            this.email = email;\n            this.date = date;\n        }\n        return Identity;\n    }());\n    Gitline.Identity = Identity;\n    var Commit = (function () {\n        function Commit(container, data) {\n            this.warnings = [];\n            this.inHeadsRef = [];\n            this.parents = [];\n            this.childs = [];\n            this.siblings = [];\n            this.outOfScope = false; // This commit was not part of the logs scope, but is referenced by another commit.\n            this.merges = { standard: [], anonymous: [] };\n            this.container = container;\n            this.data = data;\n            // reference the data back to the object\n            this.data.obj = this;\n            if (data.inHeads == null)\n                data.inHeads = [];\n            if (data.parenthashes == null)\n                data.parenthashes = [];\n            if (data.refnames == null)\n                data.refnames = [];\n            this.sha = data.sha;\n            this.ssha = data.ssha;\n            this.subject = data.subject;\n            this.indexY = container.maxIndexY++;\n            this.committer = new Identity(this.data.committername, this.data.committeremail, moment.unix(this.data.committerdate));\n            this.author = new Identity(this.data.authorname, this.data.authoremail, moment.unix(this.data.authordate));\n        }\n        Commit.prototype.getShortSha = function () {\n            return this.ssha;\n        };\n        Commit.prototype.getFullSha = function () {\n            return this.sha;\n        };\n        Commit.prototype.initRelations = function () {\n            var _this = this;\n            var self = this;\n            this.data.parenthashes.forEach(function (hash) {\n                var parentCommit = _this.container.commits[hash];\n                // Create a virtual commit\n                if (parentCommit == null) {\n                    parentCommit = new Commit(_this.container, { sha: hash + Math.random() });\n                    parentCommit.outOfScope = true;\n                    self.container.addCommit(parentCommit);\n                }\n                _this.parents.push(parentCommit);\n                parentCommit.childs.push(_this);\n                _this.siblings = parentCommit.childs; // this will be overwitten as new childs are found\n                if (_this.parents.length > 0) {\n                    var dp = _this.parents[0];\n                    _this.directparent = dp;\n                    dp.directchild = _this;\n                }\n            });\n            this.data.inHeads.forEach(function (headsha) {\n                var commit = _this.container.commits[headsha];\n                if (_this.inHeadsRef.indexOf(commit) === undefined) {\n                    _this.inHeadsRef.push(commit);\n                }\n            });\n        };\n        Commit.prototype.initDefaultBranch = function () {\n            var commit = this;\n            while (commit != null) {\n                // GUESSING: The correct branch is usually the one with the least specific name\n                if (commit.branch == null || commit.branch.specifity > this.branch.specifity) {\n                    commit.branch = this.branch;\n                }\n                commit.branch.start = commit; // this function will traverse the parents, so the last one will be the first commit\n                commit.branch.origin = commit.directparent; // this could be null -> it is outside of the history.\n                commit = commit.directparent;\n            }\n        };\n        Commit.prototype.initHeadSpecifity = function () {\n            for (var i = 0; i < this.data.refnames.length; i++) {\n                var refname = this.data.refnames[i];\n                if (!this.container.config.remoteOnly || refname.indexOf(\"origin/\") == 0) {\n                    if (this.container.config.remoteOnly) {\n                        refname = refname.replace(/^origin./, '');\n                    }\n                    var specifity = refname.replace(/[^\\/-]/g, '').length * 1000;\n                    specifity += refname.replace(/[^a-zA-Z0-9-]/, '').length;\n                    this.container.addBranch(refname, this, specifity);\n                    /* assign the most specific head on this tip commit */\n                    if (this.maxSpecifity == null || specifity < this.maxSpecifity) {\n                        Logger.debug(\"assigning branch\", refname, this.sha, this.maxSpecifity, specifity);\n                        this.maxSpecifity = specifity;\n                        this.branch = this.container.headsMap[refname];\n                    }\n                    this.initDefaultBranch();\n                }\n            }\n        };\n        Commit.prototype.initMerges = function () {\n            this.merges = { standard: [], anonymous: [] };\n            this.warnings = [];\n            // Detect a merge (octopus currently not supported)\n            if (this.parents.length == 1) {\n                var dp = this.parents[0];\n                this.directparent = dp;\n                dp.directchild = this;\n            }\n            if (this.parents.length >= 2) {\n                var dp = this.parents[0];\n                this.directparent = dp;\n                dp.directchild = this;\n                for (var i = 1; i < this.parents.length; i++) {\n                    var mp = this.parents[i];\n                    if (mp != null) {\n                        // Clues if this is a standard or anonymous merge\n                        if (mp.data.refnames.length > 0 // This is standard merge with mps head\n                            || mp.inHeadsRef.length != dp.inHeadsRef.length // The heads of both are different\n                        ) {\n                            this.merges.standard.push({ source: mp });\n                        }\n                        else {\n                            // This is a anonymous (automatic) merge on the same branch\n                            this.merges.anonymous.push({ source: mp });\n                            this.initAnonymous();\n                        }\n                    }\n                }\n            }\n        };\n        Commit.prototype.initAnonymous = function () {\n            // Create a dummy branch for anonymous merges, which is as specific as the original branch.\n            // try finding the original branch by going up direct childs, which will get the original\n            var _this = this;\n            this.merges.anonymous.forEach(function (_merge) {\n                var merge = _merge.source;\n                var child = _this;\n                while (child != null && child.branch == null) {\n                    child = child.directchild;\n                }\n                /* this is only an anonymous branch head, if there is only one child (the merge)\n                 TODO: if there are multiple, it might result in wrongly assigned branches */\n                if (child != null && merge.branch == null) {\n                    merge.branch = new Gitline.Branch(child.branch.ref + \"/anonymous\" + merge.sha + Math.random(), merge, child.branch.specifity + 1);\n                    merge.branch.anonymous = true;\n                    merge.branch.parent = child.branch;\n                    merge.branch.start = child;\n                    merge.branch.category = child.branch.category;\n                    _this.container.headsMap[merge.branch.ref] = merge.branch;\n                }\n            });\n        };\n        Commit.prototype.getColor = function (lightness) {\n            if (this.branch == null) {\n                this.warn(\"No Branch set\");\n            }\n            else {\n                var b = this.branch;\n                if (this.branch.anonymous) {\n                    b = this.branch.parent;\n                }\n                var hue = b.lane * 300 / this.container.maxX;\n                return \"hsl(\" + hue + \", 100%, \" + lightness + \"%)\";\n            }\n        };\n        Commit.prototype.hasMerges = function () {\n            return this.merges.standard.length > 0 || this.merges.anonymous.length > 0;\n        };\n        Commit.prototype.getX = function () {\n            return Gitline.indexToX(this.getLane());\n        };\n        Commit.prototype.getY = function () {\n            if (this.outOfScope) {\n                return this.container.rootLabel.offsetTop + 20;\n            }\n            return this.view.label.offsetTop - this.container.firstCommit.view.label.offsetTop + this.view.label.offsetHeight / 2;\n        };\n        Commit.prototype.getOriginIndexY = function () {\n            if (this.branch.origin != undefined) {\n                return this.branch.origin.getIndexY();\n            }\n            else if (this.branch.start.outOfScope) {\n                return this.container.maxIndexY;\n            }\n            else {\n                return this.branch.start.indexY;\n            }\n        };\n        /** Tip plus the next direct child index (position of last merge) */\n        Commit.prototype.getTipPlusIndexY = function () {\n            if (this.branch != undefined && this.branch.commit != undefined) {\n                var indexY = this.branch.commit.indexY;\n                // find the top child \n                this.branch.commit.childs.forEach(function (c) {\n                    indexY = Math.min(indexY, c.indexY);\n                });\n                return indexY;\n            }\n            // nothing found, assume top\n            return 0;\n        };\n        /** does this branch intersect with another when drawn next to each other.\n            can this branch be displayed on the same X axis without overlapping? */\n        Commit.prototype.intersects = function (other) {\n            var otherY = 9999999, thisY = 999999;\n            if (this.outOfScope || other.outOfScope)\n                return true;\n            return this.getOriginIndexY() > other.getTipPlusIndexY() && this.getTipPlusIndexY() < other.getOriginIndexY();\n        };\n        Commit.prototype.getIndexY = function () {\n            return this.indexY;\n        };\n        Commit.prototype.warn = function (warning) {\n            this.warnings.push(warning);\n            this.debug(warning);\n        };\n        Commit.prototype.debug = function (warning) {\n            if (console) {\n                Logger.debug(warning, this);\n            }\n        };\n        Commit.prototype.getLane = function () {\n            if (this.branch != null) {\n                return this.branch.commit.branch.lane;\n            }\n            return null;\n        };\n        return Commit;\n    }());\n    Gitline.Commit = Commit;\n})(Gitline || (Gitline = {}));\n///<reference path=\"Commit.ts\"/>\nvar Gitline;\n(function (Gitline) {\n    var Branch = (function () {\n        function Branch(refname, commit, specifity) {\n            this.ref = refname;\n            this.commit = commit;\n            this.specifity = specifity;\n            this.shortname = refname.split(\"@\")[0];\n            this.category = this.shortname.substring(0, this.shortname.lastIndexOf(\"/\"));\n        }\n        return Branch;\n    }());\n    Gitline.Branch = Branch;\n})(Gitline || (Gitline = {}));\n\n\n","module Gitline {\r\n\tclass AsyncLoadingItem {\r\n\t\tpublic label: string;\r\n\t\tpublic data: any;\r\n\t\tpublic callback: Function;\r\n\t\tpublic index: number;\r\n\t\tpublic of: number;\r\n\r\n\t\tconstructor(label: string, data: any, callback: Function, index: number, of: number) {\r\n\t\t\tthis.label = label;\r\n\t\t\tthis.data = data;\r\n\t\t\tthis.callback = callback;\r\n\t\t\tthis.index = index;\r\n\t\t\tthis.of = of;\r\n\t\t}\r\n\t}\r\n\r\n\texport class AsyncLoader {\r\n\r\n\t\tprivate element: HTMLElement;\r\n\t\tprivate items: AsyncLoadingItem[] = [];\r\n\t\tprivate suspended: boolean = false;\r\n\r\n\t\tconstructor(element: HTMLElement) {\r\n\t\t\tthis.element = element;\r\n\t\t}\r\n\r\n\t\t/** do this async, display the label and the data */\r\n\t\tpublic then(label: string, datacallback: Function, callback: Function): AsyncLoader {\r\n\t\t\tthis.thenSingle(label, () => {\r\n\t\t\t\t// add it to the beginning of the queue\r\n\t\t\t\tvar data: any[] = datacallback();\r\n\t\t\t\tfor (var i = data.length - 1; i >= 0; i--) {\r\n\t\t\t\t\tthis.items.unshift(new AsyncLoadingItem(label, data[i], callback, i, data.length));\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\tpublic thenSingle(label: string, callback: Function): AsyncLoader {\r\n\t\t\tthis.items.push(new AsyncLoadingItem(label, null, callback, 0, 1));\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\tpublic start(shield: boolean = true) {\r\n\t\t\tif (shield) {\r\n\t\t\t\tthis.element.hidden = false;\r\n\t\t\t}\r\n\t\t\tthis.next();\r\n\t\t}\r\n\r\n\t\tpublic next() {\r\n\t\t\tvar nextItem: AsyncLoadingItem = this.items.shift();\r\n\t\t\tif (nextItem !== undefined) {\r\n\t\t\t\t// avoid yielding control unnecessarily, but limit stack depth at the same time\r\n\t\t\t\tif ((nextItem.index % 50) === 0) {\r\n\t\t\t\t\tthis.showStatus(nextItem);\r\n\t\t\t\t\twindow.setTimeout(() => {\r\n\t\t\t\t\t\tLogger.debug(\"executing \" + nextItem.label + \" (\" + nextItem.index + \"/\" + nextItem.of + \")\");\r\n\t\t\t\t\t\tthis.execute(nextItem);\r\n\t\t\t\t\t}, 0);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.execute(nextItem);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tthis.element.hidden = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpublic suspend() {\r\n\t\t\tthis.suspended = true;\r\n\t\t}\r\n\r\n\t\tpublic resume() {\r\n\t\t\tthis.suspended = false;\r\n\t\t\tthis.next();\r\n\t\t}\r\n\r\n\t\tpublic showStatus(item: AsyncLoadingItem) {\r\n\t\t\tthis.element.innerHTML = item.label; // + \" (\"+item.index + \"/\"+item.of+\")\";\r\n\t\t}\r\n\r\n\t\tpublic execute(item: AsyncLoadingItem) {\r\n\t\t\ttry {\r\n\t\t\t\titem.callback(item.data);\r\n\t\t\t\tif (!this.suspended) {\r\n\t\t\t\t\tthis.next();\r\n\t\t\t\t}\r\n\t\t\t} catch (e) {\r\n\t\t\t\tthis.error(e);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tpublic error(e: any) {\r\n\t\t\tLogger.error(e);\r\n\t\t\tthis.element.innerHTML = e;\r\n\t\t\tthis.suspend();\r\n\t\t}\r\n\t}\r\n}","///<reference path=\"typedefs/cryptojs.d.ts\"/>\n\ndeclare var jsgl: any;\ndeclare var Logger: any;\n\nmodule Gitline {\n\texport function indexToX(index: number): number {\n\t\treturn index * 20 + 12;\n\t}\n\n\texport class Config {\n\t\tpublic dotHeight = 6;\n\t\tpublic dotWidth = 8;\n\n\t\tpublic remoteOnly: boolean = false;\n\n\t\tprivate avatar_gravatar(email) {\n\t\t\treturn \"http://www.gravatar.com/avatar/\" + CryptoJS.MD5(email.toLowerCase()) + \"?s=20&d=mm\";\n\t\t}\n\n\t\tpublic avatars: Function[] = [this.avatar_gravatar];\n\t}\n}","module Gitline {\r\n\texport class CommitProvider {\r\n\t\tprivate url;\r\n\t\tprivate callback: Function;\r\n\t\tprivate errorCallback: Function;\r\n\r\n\t\tconstructor(url: string) {\r\n\t\t\tthis.url = url;\r\n\t\t}\r\n\r\n\t\tpublic whenDone(data: any) {\r\n\t\t\tthis.callback(data);\r\n\t\t}\r\n\r\n\t\tpublic withErrorCallback(callbackFn: Function) {\r\n\t\t\tthis.errorCallback = callbackFn;\r\n\t\t}\r\n\r\n\t\tpublic withCallback(callbackFn: Function) {\r\n\t\t\tthis.callback = callbackFn;\r\n\t\t}\r\n\r\n\t\t/** this method should be overwritten. it must call whenDone(data) when all data was loaded. */\r\n\t\tpublic onRequested(url: string) {\r\n\t\t\tthrow new Error(\"onRequested not implemented on \" + this);\r\n\t\t}\r\n\r\n\t\tpublic request() {\r\n\t\t\tthis.onRequested(this.url);\r\n\t\t}\r\n\r\n\t\tpublic error(e: any) {\r\n\t\t\tthis.errorCallback(e);\r\n\t\t}\r\n\t}\r\n}","///<reference path=\"typedefs/jquery.d.ts\"/>\r\n\r\nmodule Gitline {\r\n\texport interface HTMLExpandableElement extends HTMLElement {\r\n\t\twhenShort(innerHTML: string): void;\r\n\t\twhenFull(innerHTML: string): void;\r\n\t}\r\n\r\n\t/**\r\n\t * Elements with two contents, that expand on double click\r\n\t */\r\n\texport class Expandable {\r\n\t\tpublic static extend(element: HTMLElement): HTMLExpandableElement {\r\n\t\t\tvar extended: HTMLExpandableElement = <HTMLExpandableElement> element;\r\n\t\t\telement.classList.add(\"gitline-expandable\");\r\n\r\n\t\t\textended.whenFull = (innerHTML: string) => {\r\n\t\t\t\textended.onclick = () => {\r\n\t\t\t\t\textended.innerHTML = innerHTML;\r\n\t\t\t\t\t$(extended).hide().stop().fadeIn(\"fast\");\r\n\t\t\t\t\telement.classList.add(\"gitline-expandable-expanded\");\r\n\t\t\t\t\tExpandable.selectElementText(element);\r\n\t\t\t\t};\r\n\t\t\t};\r\n\r\n\t\t\textended.whenShort = (innerHTML: string) => {\r\n\t\t\t\textended.innerHTML = innerHTML;\r\n\t\t\t\textended.onmouseout = () => {\r\n\t\t\t\t\t// Delay hiding it\r\n\t\t\t\t\twindow.setTimeout (() => {\r\n\t\t\t\t\t\textended.innerHTML = innerHTML;\r\n\t\t\t\t\t\telement.classList.remove(\"gitline-expandable-expanded\");\r\n\t\t\t\t\t}, 1000);\r\n\t\t\t\t};\r\n\t\t\t};\r\n\r\n\t\t\treturn extended;\r\n\t\t}\r\n\r\n\t\t// x-browser text select\r\n\t\t// http://stackoverflow.com/questions/985272/selecting-text-in-an-element-akin-to-highlighting-with-your-mouse\r\n\t\tprivate static selectElementText(el: HTMLElement): void {\r\n\t\t\tvar doc = window.document, sel, range;\r\n\t\t\tif (window.getSelection && doc.createRange) {\r\n\t\t\t\tsel = window.getSelection();\r\n\t\t\t\trange = doc.createRange();\r\n\t\t\t\trange.selectNodeContents(el);\r\n\t\t\t\tsel.removeAllRanges();\r\n\t\t\t\tsel.addRange(range);\r\n\t\t\t} else if ((<any> doc.body).createTextRange) {\r\n\t\t\t\trange = (<any> doc.body).createTextRange();\r\n\t\t\t\trange.moveToElementText(el);\r\n\t\t\t\trange.select();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}","///<reference path=\"../CommitProvider.ts\"/>\r\n///<reference path=\"../Main.ts\"/>\r\n///<reference path=\"../typedefs/jquery.d.ts\"/>\r\n\r\nmodule Gitline.Plugin {\r\n\texport class LocalGit2JsonProvider extends Gitline.CommitProvider {\r\n\r\n\t\tpublic onRequested(url: string) {\r\n\t\t\tvar xhr = jQuery.getJSON(url, {});\r\n\r\n\t\t\txhr.done((json) => {\r\n\t\t\t\tthis.whenDone(json);\r\n\t\t\t});\r\n\r\n\t\t\txhr.fail(() => {\r\n\t\t\t\tthis.error(\"Error loading git data from \" + url + \" create it using git2json\");\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n}","///<reference path=\"../CommitProvider.ts\"/>\r\n///<reference path=\"../typedefs/jquery.d.ts\"/>\r\n///<reference path=\"../typedefs/moment-node.d.ts\"/>\r\n///<reference path=\"../typedefs/moment.d.ts\"/>\r\n\r\ndeclare var Logger: any;\r\n\r\nmodule Gitline.Plugin.Github {\r\n\texport interface Branch {\r\n\t\tname: string;\r\n\t\trepo: string;\r\n\t\tassigned: boolean;\r\n\t\tcommit: Commit;\r\n\t}\r\n\r\n\texport interface Fork {\r\n\t\turl: string;\r\n\t\tname: string;\r\n\t\tdata: any;\r\n\t\tfull_name: string;\r\n\t}\r\n\r\n\texport interface Commit {\r\n\t\tsha: string;\r\n\t}\r\n}\r\n\r\nmodule Gitline.Plugin {\r\n\timport Github = Gitline.Plugin.Github;\r\n\r\n\t/**\r\n\t * GitHub commit provider. only works if there is and accesstoken configured in the browser\r\n\t */\r\n\texport class GithubCommitProvider extends Gitline.CommitProvider {\r\n\r\n\t\tprivate forks: Github.Fork[] = [];\r\n\t\tprivate baseBranches: Github.Branch[] = [];\r\n\t\tprivate data: {} = {};\r\n\r\n\t\tprivate limit: number;\r\n\t\tprivate accessToken: string;\r\n\r\n\t\tpublic constructor(url: string, limit: number, accessToken: string) {\r\n\t\t\tsuper(url);\r\n\t\t\tthis.accessToken = accessToken;\r\n\t\t\tthis.limit = limit;\r\n\t\t}\r\n\r\n\t\tpublic gitURL(url: string, api: string, params: string = \"\") {\r\n\r\n\t\t\t// convert to api url and remove trailing /\r\n\t\t\tif (url.indexOf(\"api.github.com\") == -1) {\r\n\t\t\t\turl = url.replace(/.*github.com/, \"https://api.github.com/repos/\").replace(/\\/\\//g, \"/\");\r\n\r\n\t\t\t}\r\n\t\t\treturn url + \"/\" + api + \"?access_token=\" + this.accessToken + \"&per_page=\" + this.limit + \"&callback=?&\" + params;\r\n\t\t}\r\n\r\n\t\tpublic onRequested(url: string) {\r\n\t\t\tthis.loadForks(url);\r\n\t\t}\r\n\r\n\t\tpublic loadForks(url: string) {\r\n\t\t\tjQuery.getJSON(this.gitURL(url, \"forks\")).done((forks) => {\r\n\t\t\t\tif (forks.data.message !== undefined) {\r\n\t\t\t\t\tthis.error(\"Github API: \" + forks.data.message);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tjQuery.getJSON(this.gitURL(url, \"branches\")).done((branches) => {\r\n\t\t\t\t\tthis.processBranches(url, branches.data);\r\n\t\t\t\t\tthis.forks = forks.data;\r\n\r\n\t\t\t\t\tthis.loadBranches();\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tpublic processBranches(fork, data: Github.Branch[]) {\r\n\t\t\tdata.forEach(branch => {\r\n\t\t\t\tbranch.repo = fork.url !== undefined ? fork.url : fork;\r\n\t\t\t\tif (fork.full_name !== undefined) {\r\n\t\t\t\t\tbranch.name = branch.name + \"@\" + fork.full_name;\r\n\t\t\t\t}\r\n\t\t\t\tthis.baseBranches.push(branch);\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tpublic loadBranches() {\r\n\t\t\tvar forkRequests = this.forks.map(fork => {\r\n\t\t\t\treturn jQuery.getJSON(this.gitURL(fork.url, \"branches\"), data => {\r\n\t\t\t\t\tLogger.debug(\"loaded branches for \" + fork.name);\r\n\t\t\t\t\tthis.processBranches(fork, data.data);\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t\tjQuery.when.apply(jQuery, forkRequests).done(() => {\r\n\t\t\t\tLogger.debug(\"all branches loaded\");\r\n\t\t\t\tthis.loadCommits();\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tpublic loadCommits() {\r\n\t\t\tvar commitRequests = [];\r\n\t\t\tthis.baseBranches.forEach(b => {\r\n\t\t\t\tvar commit = this.data[b.commit.sha];\r\n\t\t\t\tif (commit == undefined) {\r\n\t\t\t\t\tcommitRequests.push(\r\n\t\t\t\t\t\tjQuery.getJSON(this.gitURL(b.repo, \"commits\", \"sha=\" + b.commit.sha), data => {\r\n\t\t\t\t\t\t\tLogger.debug(\"loaded commits for \" + b.name);\r\n\t\t\t\t\t\t\tthis.processCommits(data.data);\r\n\t\t\t\t\t\t}));\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tjQuery.when.apply(jQuery, commitRequests).done(() => {\r\n\t\t\t\tthis.process();\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tpublic processCommits(data) {\r\n\t\t\tdata.map(data => {\r\n\t\t\t\tvar c: any = {};\r\n\t\t\t\tc.sha = data.sha;\r\n\t\t\t\tc.ssha = data.sha.substring(0, 8);\r\n\t\t\t\tc.parenthashes = (<any[]> data.parents).map(x => {\r\n\t\t\t\t\treturn x.sha\r\n\t\t\t\t});\r\n\t\t\t\tc.authorname = data.commit.author.name;\r\n\t\t\t\tc.authoremail = data.commit.author.email;\r\n\t\t\t\tc.authordate = moment(data.commit.author.date).unix();\r\n\t\t\t\tc.authortimestamp = moment(data.commit.author.date).valueOf();\r\n\r\n\t\t\t\tc.committername = data.commit.committer.name;\r\n\t\t\t\tc.committeremail = data.commit.committer.email;\r\n\t\t\t\tc.committerdate = moment(data.commit.committer.date).unix();\r\n\t\t\t\tc.committertimestamp = moment(data.commit.committer.date).valueOf();\r\n\r\n\t\t\t\tc.subject = data.commit.message;\r\n\t\t\t\tc.body = \"\"; // Todo: where to get this?\r\n\t\t\t\tc.refnames = []; // set when parsing branches\r\n\t\t\t\tc.inHeads = []; // set when parsing branches\r\n\r\n\t\t\t\treturn c;\r\n\t\t\t}).forEach(commit => {\r\n\t\t\t\tthis.data[commit.sha] = commit;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tpublic process() {\r\n\t\t\tthis.baseBranches.forEach(b => {\r\n\t\t\t\tvar commit = this.data[b.commit.sha];\r\n\t\t\t\tif (commit == undefined) {\r\n\t\t\t\t\t// commit missing for branch - TODO: fetch it\r\n\t\t\t\t} else {\r\n\t\t\t\t\tb.assigned = true;\r\n\t\t\t\t\tcommit.refnames.push(b.name);\r\n\t\t\t\t\tthis.assignHeads(commit);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t// Sort\r\n\t\t\tvar newdata = {};\r\n\t\t\tObject.keys(this.data).sort((a, b) => {\r\n\t\t\t\treturn this.data[b].committertimestamp - this.data[a].committertimestamp;\r\n\t\t\t}).forEach(sha => {\r\n\t\t\t\tnewdata[sha] = this.data[sha];\r\n\t\t\t});\r\n\r\n\r\n\t\t\tthis.whenDone(newdata);\r\n\t\t}\r\n\r\n\t\tprivate assignHeads(commit) {\r\n\t\t\tcommit.parents1 = commit.parenthashes.map(x => {\r\n\t\t\t\treturn x\r\n\t\t\t}); // copy array\r\n\r\n\t\t\twhile (commit.parents1.length > 0) {\r\n\t\t\t\tvar newParents = [];\r\n\t\t\t\tcommit.parents1.forEach(parentHash => {\r\n\t\t\t\t\tvar p = this.data[parentHash];\r\n\t\t\t\t\tif (p != undefined) {\r\n\t\t\t\t\t\tp.inHeads.push(commit.sha);\r\n\t\t\t\t\t\t// add all grandparents to the newparents\r\n\t\t\t\t\t\tp.parenthashes.forEach(h => {\r\n\t\t\t\t\t\t\tif (newParents.indexOf(h) === -1) {\r\n\t\t\t\t\t\t\t\tnewParents.push(h);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tcommit.parents1 = newParents\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n","///<reference path=\"Commit.ts\"/>\r\n///<reference path=\"AsyncLoader.ts\"/>\r\n///<reference path=\"Config.ts\"/>\r\n///<reference path=\"CommitProvider.ts\"/>\r\n///<reference path=\"Branch.ts\"/>\r\n///<reference path=\"Expandable.ts\"/>\r\n///<reference path=\"typedefs/jquery.d.ts\"/>\r\n///<reference path=\"plugins/LocalGit2JsonProvider.ts\"/>\r\n///<reference path=\"plugins/GithubCommitProvider.ts\"/>\r\n///<reference path=\"typedefs/moment-node.d.ts\"/>\r\n///<reference path=\"typedefs/moment.d.ts\"/>\r\n\r\nmodule Gitline {\r\n\r\n\tinterface Commits {\r\n\t\t[key:string]:Commit;\r\n\t}\r\n\r\n\tinterface Branches {\r\n\t\t[key:string]:Branch;\r\n\t}\r\n\r\n\texport function create(): Main {\r\n\t\treturn new Main();\r\n\t}\r\n\r\n\texport class Main {\r\n\r\n\t\tpublic maxX: number = 0;\r\n\t\tpublic maxIndexY: number = 0;\r\n\t\tpublic commits: Commits = {};\r\n\t\tpublic firstCommit: Commit;\r\n\t\tpublic canvas;\r\n\t\tpublic data;\r\n\t\tpublic panel;\r\n\t\tpublic textPanel;\r\n\t\tpublic headsMap: Branches = {};\r\n\t\tpublic rootLabel;\r\n\r\n\t\tpublic al: AsyncLoader;\r\n\r\n\t\tpublic config: Config = new Config();\r\n\r\n\t\t// HTML stuff\r\n\t\tprivate loadingPanel: HTMLElement;\r\n\t\tprivate graphicalPanel: HTMLElement;\r\n\t\tprivate headerPanel: HTMLElement;\r\n\t\tprivate contentPanel: HTMLElement;\r\n\r\n\t\tprivate commitProvider: CommitProvider;\r\n\r\n\t\tpublic addCommit(commit: Commit) {\r\n\t\t\tthis.commits[commit.getFullSha()] = commit;\r\n\r\n\t\t\t// first commit needed by rendering\r\n\t\t\tif (this.firstCommit === undefined) {\r\n\t\t\t\tthis.firstCommit = commit;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpublic addBranch(refname: string, commit: Commit, specifity: number) {\r\n\t\t\tthis.headsMap[refname] = new Branch(refname, commit, specifity);\r\n\t\t}\r\n\r\n\t\tpublic render() {\r\n\t\t\tthis.canvas = new jsgl.Panel(this.graphicalPanel);\r\n\r\n\t\t\tthis.al.thenSingle(\"Loading Data\", () => {\r\n\t\t\t\tthis.al.suspend();\r\n\t\t\t\tthis.commitProvider.withCallback((json) => {\r\n\t\t\t\t\tthis.data = json;\r\n\t\t\t\t\tthis.al.resume();\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\tthis.commitProvider.withErrorCallback(error => {\r\n\t\t\t\t\tthis.al.error(error);\r\n\t\t\t\t});\r\n\t\t\t\tthis.commitProvider.request();\r\n\t\t\t}).then(\"Loading Commits\", () => {\r\n\t\t\t\treturn Object.keys(this.data)\r\n\t\t\t}, (sha) => {\r\n\t\t\t\tvar commit = new Commit(this, this.data[sha]);\r\n\t\t\t\tthis.addCommit(commit);\r\n\t\t\t})\r\n\t\t\t\t.thenSingle(\"Building Graph\", () => {\r\n\t\t\t\t\tthis.buildGraph();\r\n\t\t\t\t})\r\n\t\t\t\t.then(\"Drawing Labels\", () => {\r\n\t\t\t\t\treturn Object.keys(this.commits)\r\n\t\t\t\t}, (sha) => {\r\n\t\t\t\t\tvar commit = this.commits[sha];\r\n\t\t\t\t\tthis.drawCommit(commit);\r\n\t\t\t\t})\r\n\t\t\t\t.thenSingle(\"Creating Legend\", () => {\r\n\t\t\t\t\tthis.rootLabel = document.createElement('div');\r\n\t\t\t\t\tthis.rootLabel.className = \"commit-legend\";\r\n\t\t\t\t\tthis.textPanel.appendChild(this.rootLabel);\r\n\t\t\t\t})\r\n\t\t\t\t.then(\"Drawing Merges\", () => {\r\n\t\t\t\t\treturn Object.keys(this.commits)\r\n\t\t\t\t}, (sha) => {\r\n\t\t\t\t\tvar commit = this.commits[sha];\r\n\t\t\t\t\tthis.drawReferences(commit);\r\n\t\t\t\t})\r\n\t\t\t\t.thenSingle(\"Resizing\", () => {\r\n\t\t\t\t\tthis.graphicalPanel.style.width = indexToX(this.maxX + 1) + \"px\";\r\n\t\t\t\t\tthis.graphicalPanel.style.height = this.getHeight() + \"px\";\r\n\t\t\t\t}).start();\r\n\r\n\t\t\twindow.onresize = () => {\r\n\r\n\t\t\t\tthis.al.then(\"Redrawing\", () => {\r\n\t\t\t\t\treturn Object.keys(this.commits)\r\n\t\t\t\t}, (sha) => {\r\n\t\t\t\t\tvar commit: Commit = this.commits[sha];\r\n\t\t\t\t\tcommit.view.redraw();\r\n\t\t\t\t}).thenSingle(\"Resizing\", () => {\r\n\t\t\t\t\tthis.graphicalPanel.style.width = indexToX(this.maxX + 1) + \"px\";\r\n\t\t\t\t\tthis.graphicalPanel.style.height = this.getHeight() + \"px\";\r\n\t\t\t\t}).start(false);\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tpublic getHeight() {\r\n\t\t\treturn this.rootLabel.offsetTop - this.firstCommit.view.label.offsetTop;\r\n\t\t}\r\n\r\n\t\tpublic buildGraph() {\r\n\t\t\tvar shas = Object.keys(this.commits);\r\n\t\t\tshas.forEach((sha) => {\r\n\t\t\t\tvar commit = this.commits[sha];\r\n\t\t\t\tcommit.initRelations();\r\n\t\t\t});\r\n\t\t\tshas.forEach((sha) => {\r\n\t\t\t\tvar commit = this.commits[sha];\r\n\r\n\t\t\t\tcommit.initHeadSpecifity();\r\n\t\t\t\tcommit.initMerges();\r\n\t\t\t});\r\n\t\t\tthis.initBranches();\r\n\t\t}\r\n\r\n\t\tpublic drawCommit(commit: Commit) {\r\n\t\t\t// Label\r\n\t\t\tcommit.view = new CommitView(this.canvas, this.config, commit);\r\n\r\n\t\t\tif (commit.outOfScope === false) {\r\n\t\t\t\tcommit.view.label = this.drawLabel(commit);\r\n\r\n\t\t\t\tcommit.view.label.onclick = function () {\r\n\t\t\t\t\tif (console) {\r\n\t\t\t\t\t\tLogger.debug(commit);\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\r\n\t\t\t\tthis.textPanel.appendChild(commit.view.label);\r\n\t\t\t\tcommit.view.label.style['padding-left'] = Gitline.indexToX(this.maxX + 1) + \"px\"\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpublic drawReferences(commit: Commit) {\r\n\t\t\tcommit.view.addRelations();\r\n\t\t\tcommit.view.redraw();\r\n\t\t}\r\n\r\n\t\tpublic drawLabel(commit: Commit) {\r\n\t\t\tvar label = document.createElement('gitline-legend');\r\n\r\n\t\t\t// SHA Hash\r\n\t\t\tvar shortSha: string = commit.getShortSha().trim();\r\n\t\t\tvar fullSha: string = commit.getFullSha().trim();\r\n\t\t\tvar sha: HTMLExpandableElement = Expandable.extend(document.createElement(\"gitline-sha\"));\r\n\t\t\tsha.setAttribute(\"title\", fullSha);\r\n\t\t\tsha.whenShort(shortSha);\r\n\t\t\tsha.whenFull(fullSha);\r\n\r\n\t\t\tlabel.appendChild(sha);\r\n\r\n\t\t\t// Author and committer\r\n\t\t\tlabel.appendChild(this.drawIdentity(\"author\", commit.author));\r\n\r\n\t\t\tif (commit.author.email != commit.committer.email) {\r\n\t\t\t\tlabel.appendChild(this.drawIdentity(\"committer\", commit.committer));\r\n\t\t\t}\r\n\r\n\t\t\t// Branch - TODO: Tags and other branches\r\n\t\t\tif (commit.branch && commit.branch.commit === commit && !commit.branch.anonymous) {\r\n\t\t\t\tvar head: HTMLExpandableElement = Expandable.extend(document.createElement(\"gitline-ref\"));\r\n\t\t\t\thead.style.backgroundColor = commit.getColor(40);\r\n\t\t\t\thead.whenShort(commit.branch.ref);\r\n\t\t\t\thead.whenFull(commit.branch.ref);\r\n\r\n\t\t\t\tlabel.appendChild(head);\r\n\t\t\t}\r\n\r\n\t\t\t// Subject\r\n\t\t\tvar subject = document.createElement(\"gitline-subject\");\r\n\t\t\tsubject.innerHTML = commit.subject;\r\n\t\t\tif (commit.hasMerges()) {\r\n\t\t\t\tsubject.classList.add(\"has-merges\");\r\n\t\t\t}\r\n\t\t\tlabel.appendChild(subject);\r\n\r\n\t\t\treturn label;\r\n\t\t}\r\n\r\n\t\tprivate drawIdentity(type: string, id: Identity): HTMLElement {\r\n\t\t\tvar container: HTMLElement = document.createElement(\"gitline-identity-container\");\r\n\r\n\t\t\tvar identity: HTMLExpandableElement = Expandable.extend(document.createElement(\"gitline-identity\"));\r\n\t\t\tidentity.classList.add(type);\r\n\t\t\tvar fullname = id.name + \" &lt;\" + id.email.toLowerCase() + \"&gt;\";\r\n\t\t\tidentity.setAttribute(\"title\", id.name + \" <\" + id.email.toLowerCase() + \">\");\r\n\t\t\tidentity.style.background = this.config.avatars.map(f => {\r\n\t\t\t\treturn \"url(\" + f(id.email) + \") no-repeat left center\"\r\n\t\t\t}).join(\", \");\r\n\t\t\tidentity.whenFull(fullname);\r\n\t\t\tidentity.whenShort(\"\");\r\n\r\n\t\t\tvar datetime: HTMLExpandableElement = Expandable.extend(document.createElement(\"gitline-identity-datetime\"));\r\n\t\t\tdatetime.classList.add(type + \"-datetime\");\r\n\t\t\tvar fullDate = id.date.format(\"YYYY-MM-DD HH:mm\");\r\n\t\t\tdatetime.setAttribute(\"title\", fullDate);\r\n\t\t\tdatetime.whenFull(fullDate);\r\n\t\t\tdatetime.whenShort(id.date.format(\"HH:mm\"));\r\n\r\n\t\t\tcontainer.appendChild(identity);\r\n\t\t\tcontainer.appendChild(datetime);\r\n\r\n\t\t\treturn container;\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t Based on the specifity assign the branches to the commits. if in doubt the commit will be on the most specific branch\r\n\t\t */\r\n\t\tpublic initBranches() {\r\n\r\n\t\t\tvar heads = Object.keys(this.headsMap);\r\n\r\n\t\t\t/* set the index to the head object */\r\n\t\t\tfor (var i = 0; i < heads.length; i++) {\r\n\t\t\t\tvar headName = heads[i];\r\n\t\t\t\tvar head = this.headsMap[headName];\r\n\t\t\t\thead.commit.initDefaultBranch();\r\n\t\t\t}\r\n\r\n\t\t\t/* Sort the branches by specifity */\r\n\t\t\tvar self = this;\r\n\t\t\theads.sort(function (l, r) {\r\n\t\t\t\tvar lHead: Commit = self.headsMap[l].commit;\r\n\t\t\t\tvar rHead: Commit = self.headsMap[r].commit;\r\n\r\n\t\t\t\tif (lHead === rHead) {\r\n\t\t\t\t\treturn 0;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (lHead.branch.category === rHead.branch.category) {\r\n\t\t\t\t\treturn lHead.branch.specifity - rHead.branch.specifity;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn lHead.branch.category.length - rHead.branch.category.length;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\r\n\t\t\t/* set the index to the head object */\r\n\t\t\tvar maxLane = 0;\r\n\t\t\tfor (var i = 0; i < heads.length; i++) {\r\n\t\t\t\tvar headName = heads[i];\r\n\t\t\t\tvar head = this.headsMap[headName];\r\n\t\t\t\tvar tip: Commit = head.commit;\r\n\r\n\t\t\t\tif (tip.branch === head) {\r\n\t\t\t\t\thead.lane = maxLane;\r\n\t\t\t\t\t//head.index = maxLane;\r\n\t\t\t\t\tmaxLane++;\r\n\r\n\t\t\t\t\t// Can we display this head a little more to the left?\r\n\t\t\t\t\tfor (var l = 0; l < heads.length; l++) {\r\n\r\n\t\t\t\t\t\tvar canUseLane: boolean = true;\r\n\t\t\t\t\t\tfor (var j = 0; j < heads.length; j++) {\r\n\t\t\t\t\t\t\tvar jheadName = heads[j];\r\n\t\t\t\t\t\t\tvar headOnLane: Commit = this.headsMap[jheadName].commit;\r\n\r\n\t\t\t\t\t\t\tif (headOnLane === undefined ||\r\n\t\t\t\t\t\t\t\theadOnLane.branch != head &&\r\n\t\t\t\t\t\t\t\theadOnLane.branch.lane === l &&\r\n\t\t\t\t\t\t\t\t(tip.intersects(headOnLane) || tip.branch.category != headOnLane.branch.category)) {\r\n\t\t\t\t\t\t\t\tcanUseLane = false;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (canUseLane) {\r\n\r\n\t\t\t\t\t\t\tLogger.debug(\"NO INTERSECTS: \", tip.branch.ref, \" - \", headOnLane.branch.ref);\r\n\t\t\t\t\t\t\thead.lane = l;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.maxX = Math.max(this.maxX, head.lane);\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// Launching\r\n\t\tpublic fromJSON(jsonFile: string): Main {\r\n\t\t\treturn this.fromProvider(new Plugin.LocalGit2JsonProvider(jsonFile));\r\n\t\t}\r\n\r\n\t\tpublic fromProvider(commitProvider: CommitProvider): Main {\r\n\t\t\tthis.commitProvider = commitProvider;\r\n\t\t\treturn this;\r\n\t\t}\r\n\t\t\r\n\t\tprivate renderTo(panel: HTMLElement): Main {\r\n\t\t\tif (this.headerPanel !== undefined) {\r\n\t\t\t\tpanel.appendChild(this.headerPanel);\r\n\t\t\t}\r\n\t\t\tpanel.appendChild(this.loadingPanel = document.createElement(\"gitline-loadingpanel\"));\r\n\t\t\tpanel.appendChild(this.contentPanel = document.createElement(\"gitline-contentpanel\"));\r\n\t\t\tthis.contentPanel.appendChild(this.graphicalPanel = document.createElement(\"gitline-graphicalpanel\"));\r\n\t\t\tthis.contentPanel.appendChild(this.textPanel = document.createElement(\"gitline-textpanel\"));\r\n\t\t\tthis.al = new AsyncLoader(this.loadingPanel);\r\n\r\n\t\t\tthis.render();\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\tpublic withHeader(header: string): Main;\r\n\t\tpublic withHeader(header: HTMLElement): Main;\r\n\r\n\t\tpublic withHeader(header: any) {\r\n\t\t\tif (typeof header === \"string\") {\r\n\t\t\t\tthis.headerPanel = document.createElement(\"gitline-headerpanel\");\r\n\t\t\t\tthis.headerPanel.innerHTML = header;\r\n\t\t\t} else {\r\n\t\t\t\tthis.headerPanel = header;\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\t\t}\r\n\t}\r\n}","module Gitline.Rendering {\r\n\r\n\t/**\r\n\t * basic support for jsgl shapes\r\n\t */\r\n\texport class Shape {\r\n\t\tprotected element: any; // jsgl element\r\n\t\tprivate renderedTo: HTMLElement; // jsgl canvas (any html)\r\n\t\tprotected canvas: any;\r\n\t\tprivate dependencies: Shape[] = [];\r\n\r\n\t\tpublic constructor(canvas: any, element: any) {\r\n\t\t\tthis.canvas = canvas;\r\n\t\t\tthis.element = element;\r\n\t\t}\r\n\r\n\t\tpublic addIfMissing() {\r\n\t\t\tif (this.element !== undefined && this.renderedTo == null) {\r\n\t\t\t\tthis.addElements();\r\n\t\t\t\tthis.renderedTo = this.canvas;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpublic addElements() {\r\n\t\t\tthis.canvas.addElement(this.element);\r\n\t\t}\r\n\r\n\t\tpublic update() {\r\n\t\t\tthis.dependencies.forEach(dep => {\r\n\t\t\t\tdep.update();\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tpublic dependsOn(on: Shape) {\r\n\t\t\ton.dependencies.push(this);\r\n\t\t}\r\n\t}\r\n}","///<reference path=\"Shape.ts\"/>\r\n\r\nmodule Gitline.Rendering {\r\n\r\n\t/**\r\n\t * Shape that links two dots\r\n\t */\r\n\texport class BaseLink extends Shape {\r\n\r\n\t\tparentDot: Dot;\r\n\t\tchildDot: Dot;\r\n\r\n\t\tlineColor: string;\r\n\r\n\t\tconstructor(canvas: any, element: any) {\r\n\t\t\tsuper(canvas, element);\r\n\t\t}\r\n\r\n\t\tpublic from(from: Dot): BaseLink {\r\n\t\t\tthis.dependsOn(from);\r\n\t\t\tthis.parentDot = from;\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\tpublic to(to: Dot): BaseLink {\r\n\t\t\t//this.dependsOn(to);\r\n\t\t\tthis.childDot = to;\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\tpublic color(lineColor: string): BaseLink {\r\n\t\t\tthis.element.getStroke().setWeight(1);\r\n\t\t\tthis.element.getStroke().setColor(lineColor);\r\n\t\t\tthis.lineColor = lineColor;\r\n\t\t\tthis.addIfMissing();\r\n\t\t\treturn this;\r\n\t\t}\r\n\t}\r\n}","///<reference path=\"BaseLink.ts\"/>\r\n\r\ndeclare var jsgl: any;\r\n\r\nmodule Gitline.Rendering {\r\n\texport class Curve extends BaseLink {\r\n\r\n\t\tprivate arrow;\r\n\r\n\t\tconstructor(canvas: any) {\r\n\t\t\tsuper(canvas, canvas.createCurve());\r\n\t\t\tthis.arrow = this.canvas.createPolygon();\r\n\t\t}\r\n\r\n\t\tpublic addElements() {\r\n\t\t\tsuper.addElements();\r\n\r\n\t\t\t// 2nd element\r\n\t\t\tthis.canvas.addElement(this.arrow);\r\n\t\t}\r\n\r\n\t\tpublic update() {\r\n\t\t\tvar x: number = this.childDot.x;\r\n\t\t\tvar y: number = this.childDot.y;\r\n\t\t\tvar parentX: number = this.parentDot.x;\r\n\t\t\tvar parentY: number = this.parentDot.y;\r\n\t\t\tvar color: string = this.lineColor;\r\n\r\n\t\t\tvar direction = x < parentX ? 1 : -1;\r\n\r\n\t\t\tthis.element.setStartPointXY(parentX, parentY - this.parentDot.height / 2)\r\n\t\t\tthis.element.setEndPointXY(x + this.childDot.width / 2 * direction, y);\r\n\t\t\tthis.element.setControl2PointXY(parentX, y);\r\n\t\t\tthis.element.setControl1PointXY(parentX, y);\r\n\r\n\t\t\tthis.element.getStroke().setWeight(1);\r\n\t\t\tthis.element.getStroke().setColor(color);\r\n\r\n\r\n\t\t\tthis.arrow.getStroke().setWeight(0);\r\n\t\t\tthis.arrow.getFill().setColor(color);\r\n\r\n\t\t\tthis.arrow.clearPoints();\r\n\t\t\tthis.arrow.addPointXY(0, 0);\r\n\t\t\tthis.arrow.addPointXY(6, -4);\r\n\t\t\tthis.arrow.addPointXY(6, 4);\r\n\r\n\t\t\t// Move\r\n\t\t\tfor (var i = 0; i < this.arrow.getPointsCount(); i++) {\r\n\t\t\t\tvar px = this.arrow.getPointAt(i).X;\r\n\t\t\t\tvar py = this.arrow.getPointAt(i).Y;\r\n\t\t\t\t//this.arrow.setPointXYAt(px, py + y, i);\r\n\t\t\t\tthis.arrow.setPointXYAt(px * direction + x + this.childDot.width / 2 * direction, py + y, i);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}","///<reference path=\"BaseLink.ts\"/>\r\n\r\nmodule Gitline.Rendering {\r\n\texport class Straight extends BaseLink {\r\n\r\n\t\tconstructor(canvas: any) {\r\n\t\t\tsuper(canvas, canvas.createLine());\r\n\t\t}\r\n\r\n\t\tpublic update() {\r\n\t\t\tsuper.update();\r\n\t\t\tthis.element.setStartPointXY(this.parentDot.x, this.parentDot.y - this.parentDot.height / 2);\r\n\t\t\tthis.element.setEndPointXY(this.childDot.x, this.childDot.y + this.childDot.height / 2);\r\n\t\t}\r\n\r\n}\r\n}","///<reference path=\"BaseLink.ts\"/>\r\n\r\ndeclare var jsgl: any;\r\n\r\nmodule Gitline.Rendering {\r\n\texport class Creation extends BaseLink {\r\n\r\n\t\tsecondLine;\r\n\r\n\t\tconstructor(canvas: any) {\r\n\t\t\tsuper(canvas, canvas.createLine());\r\n\t\t\tthis.secondLine = canvas.createLine();\r\n\t\t}\r\n\r\n\t\tpublic addElements() {\r\n\t\t\tsuper.addElements();\r\n\r\n\t\t\t// 2nd element\r\n\t\t\tthis.canvas.addElement(this.secondLine); // TODO: add later?\r\n\t\t}\r\n\r\n\t\tpublic update() {\r\n\t\t\tsuper.update();\r\n\r\n\t\t\t// Horizontal dotted line\r\n\t\t\tif (this.parentDot.x < this.childDot.x) {\r\n\t\t\t\tthis.element.setStartPointXY(this.parentDot.x + this.parentDot.width / 2, this.parentDot.y)\r\n\t\t\t} else {\r\n\t\t\t\tthis.element.setStartPointXY(this.parentDot.x - this.parentDot.width / 2, this.parentDot.y)\r\n\t\t\t}\r\n\r\n\t\t\tthis.element.setEndPointXY(this.childDot.x, this.parentDot.y);\r\n\t\t\tthis.element.getStroke().setWeight(1);\r\n\t\t\tthis.element.getStroke().setDashStyle(jsgl.DashStyles.DASH);\r\n\t\t\tthis.element.getStroke().setColor(this.lineColor);\r\n\r\n\t\t\t// Vertical line\r\n\t\t\tthis.secondLine.setStartPointXY(this.childDot.x, this.parentDot.y)\r\n\t\t\tthis.secondLine.setEndPointXY(this.childDot.x, this.childDot.y + this.childDot.height / 2);\r\n\t\t\tthis.secondLine.getStroke().setWeight(1)\r\n\t\t\tthis.secondLine.getStroke().setColor(this.lineColor);\r\n\t\t}\r\n\t}\r\n}","/// <reference path=\"Shape.ts\"/>\r\n\r\nmodule Gitline.Rendering {\r\n\texport class Dot extends Shape {\r\n\r\n\t\tx: number;\r\n\t\ty: number;\r\n\t\twidth: number;\r\n\t\theight: number;\r\n\r\n\t\tconstructor(canvas: any) {\r\n\t\t\tsuper(canvas, canvas.createRectangle());\r\n\t\t}\r\n\r\n\t\tpublic size(width: number, height: number): Dot {\r\n\t\t\tthis.width = width;\r\n\t\t\tthis.height = height;\r\n\r\n\t\t\tthis.element.setWidth(width);\r\n\t\t\tthis.element.setHeight(height);\r\n\t\t\tthis.element.setXRadius(width / 4);\r\n\t\t\tthis.element.setYRadius(width / 4);\r\n\r\n\t\t\tthis.update();\r\n\t\t\tthis.addIfMissing();\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\tpublic at(x: number, y: number): Dot {\r\n\t\t\tthis.x = x;\r\n\t\t\tthis.y = y;\r\n\r\n\t\t\tthis.update();\r\n\t\t\tthis.addIfMissing();\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\tpublic color(strokeColor: string, fillColor: string): Dot {\r\n\t\t\tthis.element.getStroke().setWeight(1);\r\n\t\t\tthis.element.getStroke().setColor(strokeColor);\r\n\t\t\tthis.element.getFill().setColor(fillColor);\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\tpublic update() {\r\n\t\t\tthis.element.setLocationXY(this.x - this.width / 2, this.y - this.height / 2);\r\n\t\t\tsuper.update();\r\n\t\t}\r\n\t}\r\n}","///<reference path=\"rendering/Curve.ts\"/>\r\n///<reference path=\"rendering/Straight.ts\"/>\r\n///<reference path=\"rendering/Creation.ts\"/>\r\n///<reference path=\"rendering/Dot.ts\"/>\r\n///<reference path=\"Config.ts\"/>\r\n///<reference path=\"Commit.ts\"/>\r\n///<reference path=\"rendering/Shape.ts\"/>\r\n\r\nmodule Gitline {\r\n\r\n\t/**\r\n\t * View of the Commit\r\n\t */\r\n\texport class CommitView {\r\n\r\n\t\tpublic commit: Commit;\r\n\t\tpublic label: HTMLElement;\r\n\t\tpublic canvas: any; // jsgl\r\n\t\tpublic config: Config;\r\n\r\n\t\tpublic dot: Rendering.Dot;\r\n\t\tpublic lines: Rendering.Shape[] = [];\r\n\r\n\t\tconstructor(canvas, config: Config, commit: Commit) {\r\n\t\t\tthis.canvas = canvas;\r\n\t\t\tthis.config = config;\r\n\t\t\tthis.commit = commit;\r\n\r\n\t\t\tthis.dot = new Rendering.Dot(this.canvas);\r\n\t\t}\r\n\r\n\t\tpublic addRelations() {\r\n\r\n\t\t\t// Direct parent\r\n\t\t\tif (this.commit.directparent != null) {\r\n\t\t\t\tvar dpl: Rendering.Shape;\r\n\t\t\t\tif (this.commit.getLane() == this.commit.directparent.getLane() || this.commit.directparent.outOfScope) {\r\n\t\t\t\t\t// direct parent is the same X/lane, this means it is a standard forward commit\r\n\t\t\t\t\tdpl = new Rendering.Straight(this.canvas).from(this.commit.directparent.view.dot).to(this.dot).color(this.commit.getColor(20));\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// direct parent is on a different lane, this is most certainly a new branch\r\n\t\t\t\t\tdpl = new Rendering.Creation(this.canvas).from(this.commit.directparent.view.dot).to(this.dot).color(this.commit.getColor(30));\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.lines.push(dpl);\r\n\t\t\t}\r\n\r\n\t\t\tvar allmerges = this.commit.merges.standard.concat(this.commit.merges.anonymous);\r\n\t\t\tallmerges.forEach(merge => {\r\n\t\t\t\tthis.lines.push(\r\n\t\t\t\t\tnew Rendering.Curve(this.canvas)\r\n\t\t\t\t\t\t.from(merge.source.view.dot)\r\n\t\t\t\t\t\t.to(this.dot)\r\n\t\t\t\t\t\t.color(merge.source.getColor(35)))\r\n\t\t\t\t;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t/** calculate the positions based on model and update the shapes */\r\n\t\tpublic redraw() {\r\n\t\t\tthis.dot\r\n\t\t\t\t.at(this.commit.getX(), this.commit.getY())\r\n\t\t\t\t.size(this.config.dotWidth, this.config.dotHeight)\r\n\t\t\t\t.color(this.commit.getColor(20), this.commit.getColor(80));\r\n\t\t}\r\n\r\n\r\n\t}\r\n}","///<reference path=\"Main.ts\"/>\r\n///<reference path=\"CommitView.ts\"/>\r\n///<reference path=\"Branch.ts\"/>\r\n///<reference path=\"typedefs/moment-node.d.ts\"/>\r\n///<reference path=\"typedefs/moment.d.ts\"/>\r\n\r\nmodule Gitline {\r\n\r\n\t/** committer or author */\r\n\texport class Identity {\r\n\t\tpublic image: string; // optional\r\n\r\n\t\tpublic constructor(public name: string, public email: string, public date: moment.Moment) {\r\n\t\t}\r\n\t}\r\n\r\n\texport class Commit {\r\n\t\tprivate container: Gitline.Main;\r\n\r\n\t\tprivate warnings: any[] = [];\r\n\t\tprivate inHeadsRef: Commit[] = [];\r\n\t\tprivate parents: Commit[] = [];\r\n\t\tprivate childs: Commit[] = [];\r\n\t\tprivate siblings: Commit[] = [];\r\n\t\tpublic outOfScope: boolean = false; // This commit was not part of the logs scope, but is referenced by another commit.\r\n\t\tpublic merges = {standard: [], anonymous: []};\r\n\t\tprivate sha: string;\r\n\t\tprivate ssha: string; // Abbreviated hash\r\n\t\tpublic subject: string;\r\n\t\tprivate data: any;\r\n\t\tprivate indexY: number;\r\n\r\n\t\tprivate maxSpecifity: number;\r\n\t\tpublic branch: Branch;\r\n\t\tpublic directparent: Commit;\r\n\t\tpublic directchild: Commit;\r\n\r\n\t\tpublic view: CommitView;\r\n\r\n\t\tpublic committer: Identity;\r\n\t\tpublic author: Identity;\r\n\r\n\t\tconstructor(container: Gitline.Main, data) {\r\n\t\t\tthis.container = container;\r\n\t\t\tthis.data = data;\r\n\r\n\t\t\t// reference the data back to the object\r\n\t\t\tthis.data.obj = this;\r\n\r\n\t\t\tif (data.inHeads == null) data.inHeads = [];\r\n\t\t\tif (data.parenthashes == null) data.parenthashes = [];\r\n\t\t\tif (data.refnames == null) data.refnames = [];\r\n\r\n\t\t\tthis.sha = data.sha;\r\n\t\t\tthis.ssha = data.ssha;\r\n\t\t\tthis.subject = data.subject;\r\n\t\t\tthis.indexY = container.maxIndexY++;\r\n\r\n\t\t\tthis.committer = new Identity(this.data.committername, this.data.committeremail, moment.unix(this.data.committerdate));\r\n\t\t\tthis.author = new Identity(this.data.authorname, this.data.authoremail, moment.unix(this.data.authordate));\r\n\t\t}\r\n\r\n\t\tpublic getShortSha(): string {\r\n\t\t\treturn this.ssha;\r\n\t\t}\r\n\r\n\t\tpublic getFullSha(): string {\r\n\t\t\treturn this.sha;\r\n\t\t}\r\n\r\n\t\tpublic initRelations() {\r\n\t\t\tvar self = this;\r\n\r\n\t\t\tthis.data.parenthashes.forEach(hash => {\r\n\t\t\t\tvar parentCommit = this.container.commits[hash];\r\n\r\n\t\t\t\t// Create a virtual commit\r\n\t\t\t\tif (parentCommit == null) {\r\n\t\t\t\t\tparentCommit = new Commit(this.container, {sha: hash + Math.random()});\r\n\t\t\t\t\tparentCommit.outOfScope = true;\r\n\t\t\t\t\tself.container.addCommit(parentCommit);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.parents.push(parentCommit);\r\n\t\t\t\tparentCommit.childs.push(this);\r\n\t\t\t\tthis.siblings = parentCommit.childs; // this will be overwitten as new childs are found\r\n\r\n\t\t\t\tif (this.parents.length > 0) {\r\n\t\t\t\t\tvar dp = this.parents[0];\r\n\t\t\t\t\tthis.directparent = dp;\r\n\t\t\t\t\tdp.directchild = this;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tthis.data.inHeads.forEach(headsha => {\r\n\t\t\t\tvar commit = this.container.commits[headsha];\r\n\t\t\t\tif (this.inHeadsRef.indexOf(commit) === undefined) {\r\n\t\t\t\t\tthis.inHeadsRef.push(commit)\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t}\r\n\r\n\t\tpublic initDefaultBranch() {\r\n\t\t\tvar commit: Commit = this;\r\n\r\n\t\t\twhile (commit != null) {\r\n\r\n\t\t\t\t// GUESSING: The correct branch is usually the one with the least specific name\r\n\t\t\t\tif (commit.branch == null || commit.branch.specifity > this.branch.specifity) {\r\n\t\t\t\t\tcommit.branch = this.branch;\r\n\t\t\t\t\t//commit.debug(\"assigning \"+this.branch.ref)\r\n\t\t\t\t}\r\n\t\t\t\tcommit.branch.start = commit; // this function will traverse the parents, so the last one will be the first commit\r\n\t\t\t\tcommit.branch.origin = commit.directparent; // this could be null -> it is outside of the history.\r\n\t\t\t\tcommit = commit.directparent;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpublic initHeadSpecifity() {\r\n\t\t\tfor (var i = 0; i < this.data.refnames.length; i++) {\r\n\t\t\t\tvar refname = this.data.refnames[i];\r\n\r\n\t\t\t\tif (!this.container.config.remoteOnly || refname.indexOf(\"origin/\") == 0) {\r\n\r\n\t\t\t\t\tif (this.container.config.remoteOnly) {\r\n\t\t\t\t\t\trefname = refname.replace(/^origin./, '');\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tvar specifity = refname.replace(/[^\\/-]/g, '').length * 1000;\r\n\t\t\t\t\tspecifity += refname.replace(/[^a-zA-Z0-9-]/, '').length;\r\n\r\n\t\t\t\t\tthis.container.addBranch(refname, this, specifity);\r\n\r\n\t\t\t\t\t/* assign the most specific head on this tip commit */\r\n\t\t\t\t\tif (this.maxSpecifity == null || specifity < this.maxSpecifity) {\r\n\t\t\t\t\t\tLogger.debug(\"assigning branch\", refname, this.sha, this.maxSpecifity, specifity)\r\n\t\t\t\t\t\tthis.maxSpecifity = specifity;\r\n\t\t\t\t\t\tthis.branch = this.container.headsMap[refname];\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.initDefaultBranch();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpublic initMerges() {\r\n\r\n\t\t\tthis.merges = {standard: [], anonymous: []};\r\n\t\t\tthis.warnings = [];\r\n\r\n\t\t\t// Detect a merge (octopus currently not supported)\r\n\r\n\t\t\tif (this.parents.length == 1) {\r\n\t\t\t\tvar dp = this.parents[0];\r\n\t\t\t\tthis.directparent = dp;\r\n\t\t\t\tdp.directchild = this;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.parents.length >= 2) {\r\n\t\t\t\tvar dp = this.parents[0];\r\n\t\t\t\tthis.directparent = dp;\r\n\t\t\t\tdp.directchild = this;\r\n\r\n\t\t\t\tfor (var i = 1; i < this.parents.length; i++) {\r\n\t\t\t\t\tvar mp = this.parents[i];\r\n\r\n\t\t\t\t\tif (mp != null) {\r\n\r\n\t\t\t\t\t\t// Clues if this is a standard or anonymous merge\r\n\t\t\t\t\t\tif (mp.data.refnames.length > 0 // This is standard merge with mps head\r\n\t\t\t\t\t\t\t|| mp.inHeadsRef.length != dp.inHeadsRef.length // The heads of both are different\r\n\t\t\t\t\t\t) {\r\n\r\n\t\t\t\t\t\t\tthis.merges.standard.push({source: mp});\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t// This is a anonymous (automatic) merge on the same branch\r\n\t\t\t\t\t\t\tthis.merges.anonymous.push({source: mp})\r\n\t\t\t\t\t\t\tthis.initAnonymous();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpublic initAnonymous() {\r\n\t\t\t// Create a dummy branch for anonymous merges, which is as specific as the original branch.\r\n\t\t\t// try finding the original branch by going up direct childs, which will get the original\r\n\r\n\t\t\tthis.merges.anonymous.forEach(_merge => {\r\n\t\t\t\tvar merge: Commit = _merge.source\r\n\t\t\t\tvar child = this;\r\n\r\n\t\t\t\twhile (child != null && child.branch == null) {\r\n\t\t\t\t\tchild = child.directchild;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t/* this is only an anonymous branch head, if there is only one child (the merge)\r\n\t\t\t\t TODO: if there are multiple, it might result in wrongly assigned branches */\r\n\t\t\t\tif (child != null && merge.branch == null) {\r\n\t\t\t\t\tmerge.branch = new Branch(child.branch.ref + \"/anonymous\" + merge.sha + Math.random(), merge, child.branch.specifity + 1);\r\n\t\t\t\t\tmerge.branch.anonymous = true;\r\n\t\t\t\t\tmerge.branch.parent = child.branch;\r\n\t\t\t\t\tmerge.branch.start = child;\r\n\t\t\t\t\tmerge.branch.category = child.branch.category;\r\n\r\n\t\t\t\t\tthis.container.headsMap[merge.branch.ref] = merge.branch;\r\n\t\t\t\t}\r\n\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tpublic getColor(lightness: number): string {\r\n\t\t\tif (this.branch == null) {\r\n\t\t\t\tthis.warn(\"No Branch set\")\r\n\t\t\t} else {\r\n\t\t\t\tvar b = this.branch;\r\n\t\t\t\tif (this.branch.anonymous) {\r\n\t\t\t\t\tb = this.branch.parent;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar hue = b.lane * 300 / this.container.maxX;\r\n\t\t\t\treturn \"hsl(\" + hue + \", 100%, \" + lightness + \"%)\";\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpublic hasMerges(): boolean {\r\n\t\t\treturn this.merges.standard.length > 0 || this.merges.anonymous.length > 0;\r\n\t\t}\r\n\r\n\t\tpublic getX() {\r\n\t\t\treturn Gitline.indexToX(this.getLane());\r\n\t\t}\r\n\r\n\t\tpublic getY() {\r\n\t\t\tif (this.outOfScope) {\r\n\t\t\t\treturn this.container.rootLabel.offsetTop + 20;\r\n\t\t\t}\r\n\t\t\treturn this.view.label.offsetTop - this.container.firstCommit.view.label.offsetTop + this.view.label.offsetHeight / 2;\r\n\t\t}\r\n\r\n\t\tpublic getOriginIndexY(): number {\r\n\t\t\tif (this.branch.origin != undefined) {\r\n\t\t\t\treturn this.branch.origin.getIndexY();\r\n\t\t\t} else if (this.branch.start.outOfScope) {\r\n\t\t\t\treturn this.container.maxIndexY;\r\n\t\t\t} else {\r\n\t\t\t\treturn this.branch.start.indexY;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t\r\n\t\t/** Tip plus the next direct child index (position of last merge) */\r\n\t\tpublic getTipPlusIndexY(): number {\r\n\t\t\tif(this.branch != undefined && this.branch.commit != undefined) {\r\n\t\t\t\tvar indexY = this.branch.commit.indexY;\r\n\t\t\t\t\r\n\t\t\t\t// find the top child \r\n\t\t\t\tthis.branch.commit.childs.forEach(c => {\r\n\t\t\t\t\tindexY = Math.min(indexY, c.indexY);\t\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\treturn indexY;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// nothing found, assume top\r\n\t\t\treturn 0;\r\n\t\t}\t\t\r\n\r\n\t\t/** does this branch intersect with another when drawn next to each other. \r\n\t\t    can this branch be displayed on the same X axis without overlapping? */\r\n\t\tpublic intersects(other: Commit): boolean {\r\n\t\t\tvar otherY = 9999999, thisY = 999999;\r\n\t\t\tif (this.outOfScope || other.outOfScope) return true;\r\n\r\n\t\t\treturn this.getOriginIndexY() > other.getTipPlusIndexY() && this.getTipPlusIndexY() < other.getOriginIndexY();\r\n\t\t}\r\n\r\n\t\tpublic getIndexY(): number {\r\n\t\t\treturn this.indexY;\r\n\t\t}\r\n\r\n\t\tpublic warn(warning: string) {\r\n\t\t\tthis.warnings.push(warning);\r\n\t\t\tthis.debug(warning);\r\n\t\t}\r\n\r\n\t\tpublic debug(warning: string) {\r\n\t\t\tif (console) {\r\n\t\t\t\tLogger.debug(warning, this);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpublic getLane() {\r\n\t\t\tif (this.branch != null) { // TODO: anonymous branches will get their index from parent ones\r\n\t\t\t\treturn this.branch.commit.branch.lane;\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n}","///<reference path=\"Commit.ts\"/>\r\n\r\nmodule Gitline {\r\n\texport class Branch {\r\n\t\tpublic specifity: number;\r\n\t\tpublic start: Commit;\r\n\t\tpublic origin: Commit;\r\n\t\tpublic category: string;\r\n\t\tpublic commit: Commit; // Head commit\r\n\t\tpublic ref: string; // Name of the branch\r\n\t\tpublic shortname: string; // name without repo\r\n\t\tpublic lane: number;\r\n\t\tpublic parent: Branch;\r\n\t\tpublic anonymous: boolean;\r\n\r\n\r\n\t\tconstructor(refname: string, commit: Commit, specifity: number) {\r\n\t\t\tthis.ref = refname;\r\n\t\t\tthis.commit = commit;\r\n\t\t\tthis.specifity = specifity;\r\n\t\t\tthis.shortname = refname.split(\"@\")[0];\r\n\t\t\tthis.category = this.shortname.substring(0, this.shortname.lastIndexOf(\"/\"));\r\n\t\t}\r\n\t}\r\n}"],"sourceRoot":"/source/"}