{"version":3,"sources":["/source/AsyncLoader.ts","/source/Config.ts","/source/CommitProvider.ts","/source/Expandable.ts","gitline.js","/source/plugins/LocalGit2JsonProvider.ts","/source/plugins/GithubCommitProvider.ts","/source/Main.ts","/source/rendering/Shape.ts","/source/rendering/BaseLink.ts","/source/rendering/Curve.ts","/source/rendering/Straight.ts","/source/rendering/Creation.ts","/source/rendering/Dot.ts","/source/CommitView.ts","/source/Commit.ts","/source/Branch.ts"],"names":["Gitline","Gitline.AsyncLoadingItem","Gitline.AsyncLoadingItem.constructor","Gitline.AsyncLoader","Gitline.AsyncLoader.constructor","Gitline.AsyncLoader.then","Gitline.AsyncLoader.thenSingle","Gitline.AsyncLoader.start","Gitline.AsyncLoader.next","Gitline.AsyncLoader.suspend","Gitline.AsyncLoader.resume","Gitline.AsyncLoader.showStatus","Gitline.AsyncLoader.execute","Gitline.AsyncLoader.error","Gitline.indexToX","Gitline.Config","Gitline.Config.constructor","Gitline.Config.avatar_gravatar","Gitline.CommitProvider","Gitline.CommitProvider.constructor","Gitline.CommitProvider.whenDone","Gitline.CommitProvider.withErrorCallback","Gitline.CommitProvider.withCallback","Gitline.CommitProvider.onRequested","Gitline.CommitProvider.request","Gitline.CommitProvider.error","Gitline.Expandable","Gitline.Expandable.extend","Gitline.Expandable.selectElementText","__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","Gitline.Plugin","Gitline.Plugin.LocalGit2JsonProvider","Gitline.Plugin.LocalGit2JsonProvider.constructor","Gitline.Plugin.LocalGit2JsonProvider.onRequested","Gitline.Plugin.GithubCommitProvider","Gitline.Plugin.GithubCommitProvider.constructor","Gitline.Plugin.GithubCommitProvider.gitURL","Gitline.Plugin.GithubCommitProvider.onRequested","Gitline.Plugin.GithubCommitProvider.loadForks","Gitline.Plugin.GithubCommitProvider.processBranches","Gitline.Plugin.GithubCommitProvider.loadBranches","Gitline.Plugin.GithubCommitProvider.loadCommits","Gitline.Plugin.GithubCommitProvider.processCommits","Gitline.Plugin.GithubCommitProvider.process","Gitline.Plugin.GithubCommitProvider.assignHeads","Gitline.create","Gitline.Main","Gitline.Main.constructor","Gitline.Main.addCommit","Gitline.Main.addBranch","Gitline.Main.render","Gitline.Main.getHeight","Gitline.Main.buildGraph","Gitline.Main.drawCommit","console","Logger","debug","commit","Gitline.Main.drawReferences","Gitline.Main.drawLabel","Gitline.Main.drawIdentity","Gitline.Main.initBranches","lHead","self","headsMap","l","rHead","r","branch","category","specifity","length","Gitline.Main.fromJSON","Gitline.Main.fromProvider","Gitline.Main.renderTo","Gitline.Main.withHeader","Gitline.Rendering","Gitline.Rendering.Shape","Gitline.Rendering.Shape.constructor","Gitline.Rendering.Shape.addIfMissing","Gitline.Rendering.Shape.addElements","Gitline.Rendering.Shape.update","Gitline.Rendering.Shape.dependsOn","Gitline.Rendering.BaseLink","Gitline.Rendering.BaseLink.constructor","Gitline.Rendering.BaseLink.from","Gitline.Rendering.BaseLink.to","Gitline.Rendering.BaseLink.color","Gitline.Rendering.Curve","Gitline.Rendering.Curve.constructor","Gitline.Rendering.Curve.addElements","Gitline.Rendering.Curve.update","Gitline.Rendering.Straight","Gitline.Rendering.Straight.constructor","Gitline.Rendering.Straight.update","Gitline.Rendering.Creation","Gitline.Rendering.Creation.constructor","Gitline.Rendering.Creation.addElements","Gitline.Rendering.Creation.update","Gitline.Rendering.Dot","Gitline.Rendering.Dot.constructor","Gitline.Rendering.Dot.size","Gitline.Rendering.Dot.at","Gitline.Rendering.Dot.color","Gitline.Rendering.Dot.update","Gitline.CommitView","Gitline.CommitView.constructor","Gitline.CommitView.addRelations","Gitline.CommitView.redraw","Gitline.Identity","Gitline.Identity.constructor","Gitline.Commit","Gitline.Commit.constructor","Gitline.Commit.getShortSha","Gitline.Commit.getFullSha","Gitline.Commit.initRelations","Gitline.Commit.initDefaultBranch","Gitline.Commit.initHeadSpecifity","Gitline.Commit.initMerges","Gitline.Commit.initAnonymous","Gitline.Commit.getColor","Gitline.Commit.hasMerges","Gitline.Commit.getX","Gitline.Commit.getY","Gitline.Commit.getOriginIndexY","Gitline.Commit.getTipPlusIndexY","Gitline.Commit.intersects","Gitline.Commit.getIndexY","Gitline.Commit.warn","Gitline.Commit.debug","Gitline.Commit.getLane","Gitline.Branch","Gitline.Branch.constructor"],"mappings":"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","file":"gitline.min.js","sourcesContent":["module Gitline {\r\n\tclass AsyncLoadingItem {\r\n\t\tpublic label: string;\r\n\t\tpublic data: any;\r\n\t\tpublic callback: Function;\r\n\t\tpublic index: number;\r\n\t\tpublic of: number;\r\n\r\n\t\tconstructor(label: string, data: any, callback: Function, index: number, of: number) {\r\n\t\t\tthis.label = label;\r\n\t\t\tthis.data = data;\r\n\t\t\tthis.callback = callback;\r\n\t\t\tthis.index = index;\r\n\t\t\tthis.of = of;\r\n\t\t}\r\n\t}\r\n\r\n\texport class AsyncLoader {\r\n\r\n\t\tprivate element: HTMLElement;\r\n\t\tprivate items: AsyncLoadingItem[] = [];\r\n\t\tprivate suspended: boolean = false;\r\n\r\n\t\tconstructor(element: HTMLElement) {\r\n\t\t\tthis.element = element;\r\n\t\t}\r\n\r\n\t\t/** do this async, display the label and the data */\r\n\t\tpublic then(label: string, datacallback: Function, callback: Function): AsyncLoader {\r\n\t\t\tthis.thenSingle(label, () => {\r\n\t\t\t\t// add it to the beginning of the queue\r\n\t\t\t\tvar data: any[] = datacallback();\r\n\t\t\t\tfor (var i = data.length - 1; i >= 0; i--) {\r\n\t\t\t\t\tthis.items.unshift(new AsyncLoadingItem(label, data[i], callback, i, data.length));\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\tpublic thenSingle(label: string, callback: Function): AsyncLoader {\r\n\t\t\tthis.items.push(new AsyncLoadingItem(label, null, callback, 0, 1));\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\tpublic start(shield: boolean = true) {\r\n\t\t\tif (shield) {\r\n\t\t\t\tthis.element.hidden = false;\r\n\t\t\t}\r\n\t\t\tthis.next();\r\n\t\t}\r\n\r\n\t\tpublic next() {\r\n\t\t\tvar nextItem: AsyncLoadingItem = this.items.shift();\r\n\t\t\tif (nextItem !== undefined) {\r\n\t\t\t\t// avoid yielding control unnecessarily, but limit stack depth at the same time\r\n\t\t\t\tif ((nextItem.index % 50) === 0) {\r\n\t\t\t\t\tthis.showStatus(nextItem);\r\n\t\t\t\t\twindow.setTimeout(() => {\r\n\t\t\t\t\t\tLogger.debug(\"executing \" + nextItem.label + \" (\" + nextItem.index + \"/\" + nextItem.of + \")\");\r\n\t\t\t\t\t\tthis.execute(nextItem);\r\n\t\t\t\t\t}, 0);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.execute(nextItem);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tthis.element.hidden = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpublic suspend() {\r\n\t\t\tthis.suspended = true;\r\n\t\t}\r\n\r\n\t\tpublic resume() {\r\n\t\t\tthis.suspended = false;\r\n\t\t\tthis.next();\r\n\t\t}\r\n\r\n\t\tpublic showStatus(item: AsyncLoadingItem) {\r\n\t\t\tthis.element.innerHTML = item.label; // + \" (\"+item.index + \"/\"+item.of+\")\";\r\n\t\t}\r\n\r\n\t\tpublic execute(item: AsyncLoadingItem) {\r\n\t\t\ttry {\r\n\t\t\t\titem.callback(item.data);\r\n\t\t\t\tif (!this.suspended) {\r\n\t\t\t\t\tthis.next();\r\n\t\t\t\t}\r\n\t\t\t} catch (e) {\r\n\t\t\t\tthis.error(e);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tpublic error(e: any) {\r\n\t\t\tLogger.error(e);\r\n\t\t\tthis.element.innerHTML = e;\r\n\t\t\tthis.suspend();\r\n\t\t}\r\n\t}\r\n}","///<reference path=\"typedefs/cryptojs.d.ts\"/>\n\ndeclare var jsgl: any;\ndeclare var Logger: any;\n\nmodule Gitline {\n\texport function indexToX(index: number): number {\n\t\treturn index * 20 + 12;\n\t}\n\n\texport class Config {\n\t\tpublic dotHeight = 6;\n\t\tpublic dotWidth = 8;\n\n\t\tpublic remoteOnly: boolean = false;\n\n\t\tprivate avatar_gravatar(email) {\n\t\t\treturn \"http://www.gravatar.com/avatar/\" + CryptoJS.MD5(email.toLowerCase()) + \"?s=20&d=mm\";\n\t\t}\n\n\t\tpublic avatars: Function[] = [this.avatar_gravatar];\n\t}\n}","module Gitline {\r\n\texport class CommitProvider {\r\n\t\tprivate url;\r\n\t\tprivate callback: Function;\r\n\t\tprivate errorCallback: Function;\r\n\r\n\t\tconstructor(url: string) {\r\n\t\t\tthis.url = url;\r\n\t\t}\r\n\r\n\t\tpublic whenDone(data: any) {\r\n\t\t\tthis.callback(data);\r\n\t\t}\r\n\r\n\t\tpublic withErrorCallback(callbackFn: Function) {\r\n\t\t\tthis.errorCallback = callbackFn;\r\n\t\t}\r\n\r\n\t\tpublic withCallback(callbackFn: Function) {\r\n\t\t\tthis.callback = callbackFn;\r\n\t\t}\r\n\r\n\t\t/** this method should be overwritten. it must call whenDone(data) when all data was loaded. */\r\n\t\tpublic onRequested(url: string) {\r\n\t\t\tthrow new Error(\"onRequested not implemented on \" + this);\r\n\t\t}\r\n\r\n\t\tpublic request() {\r\n\t\t\tthis.onRequested(this.url);\r\n\t\t}\r\n\r\n\t\tpublic error(e: any) {\r\n\t\t\tthis.errorCallback(e);\r\n\t\t}\r\n\t}\r\n}","///<reference path=\"typedefs/jquery.d.ts\"/>\r\n\r\nmodule Gitline {\r\n\texport interface HTMLExpandableElement extends HTMLElement {\r\n\t\twhenShort(innerHTML: string): void;\r\n\t\twhenFull(innerHTML: string): void;\r\n\t}\r\n\r\n\t/**\r\n\t * Elements with two contents, that expand on double click\r\n\t */\r\n\texport class Expandable {\r\n\t\tpublic static extend(element: HTMLElement): HTMLExpandableElement {\r\n\t\t\tvar extended: HTMLExpandableElement = <HTMLExpandableElement> element;\r\n\t\t\telement.classList.add(\"gitline-expandable\");\r\n\r\n\t\t\textended.whenFull = (innerHTML: string) => {\r\n\t\t\t\textended.onclick = () => {\r\n\t\t\t\t\textended.innerHTML = innerHTML;\r\n\t\t\t\t\t$(extended).hide().stop().fadeIn(\"fast\");\r\n\t\t\t\t\telement.classList.add(\"gitline-expandable-expanded\");\r\n\t\t\t\t\tExpandable.selectElementText(element);\r\n\t\t\t\t};\r\n\t\t\t};\r\n\r\n\t\t\textended.whenShort = (innerHTML: string) => {\r\n\t\t\t\textended.innerHTML = innerHTML;\r\n\t\t\t\textended.onmouseout = () => {\r\n\t\t\t\t\t// Delay hiding it\r\n\t\t\t\t\twindow.setTimeout (() => {\r\n\t\t\t\t\t\textended.innerHTML = innerHTML;\r\n\t\t\t\t\t\telement.classList.remove(\"gitline-expandable-expanded\");\r\n\t\t\t\t\t}, 1000);\r\n\t\t\t\t};\r\n\t\t\t};\r\n\r\n\t\t\treturn extended;\r\n\t\t}\r\n\r\n\t\t// x-browser text select\r\n\t\t// http://stackoverflow.com/questions/985272/selecting-text-in-an-element-akin-to-highlighting-with-your-mouse\r\n\t\tprivate static selectElementText(el: HTMLElement): void {\r\n\t\t\tvar doc = window.document, sel, range;\r\n\t\t\tif (window.getSelection && doc.createRange) {\r\n\t\t\t\tsel = window.getSelection();\r\n\t\t\t\trange = doc.createRange();\r\n\t\t\t\trange.selectNodeContents(el);\r\n\t\t\t\tsel.removeAllRanges();\r\n\t\t\t\tsel.addRange(range);\r\n\t\t\t} else if ((<any> doc.body).createTextRange) {\r\n\t\t\t\trange = (<any> doc.body).createTextRange();\r\n\t\t\t\trange.moveToElementText(el);\r\n\t\t\t\trange.select();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}","var Gitline;\n(function (Gitline) {\n    var AsyncLoadingItem = (function () {\n        function AsyncLoadingItem(label, data, callback, index, of) {\n            this.label = label;\n            this.data = data;\n            this.callback = callback;\n            this.index = index;\n            this.of = of;\n        }\n        return AsyncLoadingItem;\n    })();\n    var AsyncLoader = (function () {\n        function AsyncLoader(element) {\n            this.items = [];\n            this.suspended = false;\n            this.element = element;\n        }\n        /** do this async, display the label and the data */\n        AsyncLoader.prototype.then = function (label, datacallback, callback) {\n            var _this = this;\n            this.thenSingle(label, function () {\n                // add it to the beginning of the queue\n                var data = datacallback();\n                for (var i = data.length - 1; i >= 0; i--) {\n                    _this.items.unshift(new AsyncLoadingItem(label, data[i], callback, i, data.length));\n                }\n            });\n            return this;\n        };\n        AsyncLoader.prototype.thenSingle = function (label, callback) {\n            this.items.push(new AsyncLoadingItem(label, null, callback, 0, 1));\n            return this;\n        };\n        AsyncLoader.prototype.start = function (shield) {\n            if (shield === void 0) { shield = true; }\n            if (shield) {\n                this.element.hidden = false;\n            }\n            this.next();\n        };\n        AsyncLoader.prototype.next = function () {\n            var _this = this;\n            var nextItem = this.items.shift();\n            if (nextItem !== undefined) {\n                // avoid yielding control unnecessarily, but limit stack depth at the same time\n                if ((nextItem.index % 50) === 0) {\n                    this.showStatus(nextItem);\n                    window.setTimeout(function () {\n                        Logger.debug(\"executing \" + nextItem.label + \" (\" + nextItem.index + \"/\" + nextItem.of + \")\");\n                        _this.execute(nextItem);\n                    }, 0);\n                }\n                else {\n                    this.execute(nextItem);\n                }\n            }\n            else {\n                this.element.hidden = true;\n            }\n        };\n        AsyncLoader.prototype.suspend = function () {\n            this.suspended = true;\n        };\n        AsyncLoader.prototype.resume = function () {\n            this.suspended = false;\n            this.next();\n        };\n        AsyncLoader.prototype.showStatus = function (item) {\n            this.element.innerHTML = item.label; // + \" (\"+item.index + \"/\"+item.of+\")\";\n        };\n        AsyncLoader.prototype.execute = function (item) {\n            try {\n                item.callback(item.data);\n                if (!this.suspended) {\n                    this.next();\n                }\n            }\n            catch (e) {\n                this.error(e);\n            }\n        };\n        AsyncLoader.prototype.error = function (e) {\n            Logger.error(e);\n            this.element.innerHTML = e;\n            this.suspend();\n        };\n        return AsyncLoader;\n    })();\n    Gitline.AsyncLoader = AsyncLoader;\n})(Gitline || (Gitline = {}));\n///<reference path=\"typedefs/cryptojs.d.ts\"/>\nvar Gitline;\n(function (Gitline) {\n    function indexToX(index) {\n        return index * 20 + 12;\n    }\n    Gitline.indexToX = indexToX;\n    var Config = (function () {\n        function Config() {\n            this.dotHeight = 6;\n            this.dotWidth = 8;\n            this.remoteOnly = false;\n            this.avatars = [this.avatar_gravatar];\n        }\n        Config.prototype.avatar_gravatar = function (email) {\n            return \"http://www.gravatar.com/avatar/\" + CryptoJS.MD5(email.toLowerCase()) + \"?s=20&d=mm\";\n        };\n        return Config;\n    })();\n    Gitline.Config = Config;\n})(Gitline || (Gitline = {}));\nvar Gitline;\n(function (Gitline) {\n    var CommitProvider = (function () {\n        function CommitProvider(url) {\n            this.url = url;\n        }\n        CommitProvider.prototype.whenDone = function (data) {\n            this.callback(data);\n        };\n        CommitProvider.prototype.withErrorCallback = function (callbackFn) {\n            this.errorCallback = callbackFn;\n        };\n        CommitProvider.prototype.withCallback = function (callbackFn) {\n            this.callback = callbackFn;\n        };\n        /** this method should be overwritten. it must call whenDone(data) when all data was loaded. */\n        CommitProvider.prototype.onRequested = function (url) {\n            throw new Error(\"onRequested not implemented on \" + this);\n        };\n        CommitProvider.prototype.request = function () {\n            this.onRequested(this.url);\n        };\n        CommitProvider.prototype.error = function (e) {\n            this.errorCallback(e);\n        };\n        return CommitProvider;\n    })();\n    Gitline.CommitProvider = CommitProvider;\n})(Gitline || (Gitline = {}));\n///<reference path=\"typedefs/jquery.d.ts\"/>\nvar Gitline;\n(function (Gitline) {\n    /**\n     * Elements with two contents, that expand on double click\n     */\n    var Expandable = (function () {\n        function Expandable() {\n        }\n        Expandable.extend = function (element) {\n            var extended = element;\n            element.classList.add(\"gitline-expandable\");\n            extended.whenFull = function (innerHTML) {\n                extended.onclick = function () {\n                    extended.innerHTML = innerHTML;\n                    $(extended).hide().stop().fadeIn(\"fast\");\n                    element.classList.add(\"gitline-expandable-expanded\");\n                    Expandable.selectElementText(element);\n                };\n            };\n            extended.whenShort = function (innerHTML) {\n                extended.innerHTML = innerHTML;\n                extended.onmouseout = function () {\n                    // Delay hiding it\n                    window.setTimeout(function () {\n                        extended.innerHTML = innerHTML;\n                        element.classList.remove(\"gitline-expandable-expanded\");\n                    }, 1000);\n                };\n            };\n            return extended;\n        };\n        // x-browser text select\n        // http://stackoverflow.com/questions/985272/selecting-text-in-an-element-akin-to-highlighting-with-your-mouse\n        Expandable.selectElementText = function (el) {\n            var doc = window.document, sel, range;\n            if (window.getSelection && doc.createRange) {\n                sel = window.getSelection();\n                range = doc.createRange();\n                range.selectNodeContents(el);\n                sel.removeAllRanges();\n                sel.addRange(range);\n            }\n            else if (doc.body.createTextRange) {\n                range = doc.body.createTextRange();\n                range.moveToElementText(el);\n                range.select();\n            }\n        };\n        return Expandable;\n    })();\n    Gitline.Expandable = Expandable;\n})(Gitline || (Gitline = {}));\n///<reference path=\"../CommitProvider.ts\"/>\n///<reference path=\"../Main.ts\"/>\n///<reference path=\"../typedefs/jquery.d.ts\"/>\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Gitline;\n(function (Gitline) {\n    var Plugin;\n    (function (Plugin) {\n        var LocalGit2JsonProvider = (function (_super) {\n            __extends(LocalGit2JsonProvider, _super);\n            function LocalGit2JsonProvider() {\n                _super.apply(this, arguments);\n            }\n            LocalGit2JsonProvider.prototype.onRequested = function (url) {\n                var _this = this;\n                var xhr = jQuery.getJSON(url, {});\n                xhr.done(function (json) {\n                    _this.whenDone(json);\n                });\n                xhr.fail(function () {\n                    _this.error(\"Error loading git data from \" + url + \" create it using git2json\");\n                });\n            };\n            return LocalGit2JsonProvider;\n        })(Gitline.CommitProvider);\n        Plugin.LocalGit2JsonProvider = LocalGit2JsonProvider;\n    })(Plugin = Gitline.Plugin || (Gitline.Plugin = {}));\n})(Gitline || (Gitline = {}));\n///<reference path=\"../CommitProvider.ts\"/>\n///<reference path=\"../typedefs/jquery.d.ts\"/>\n///<reference path=\"../typedefs/moment-node.d.ts\"/>\n///<reference path=\"../typedefs/moment.d.ts\"/>\nvar Gitline;\n(function (Gitline) {\n    var Plugin;\n    (function (Plugin) {\n        /**\n         * GitHub commit provider. only works if there is and accesstoken configured in the browser\n         */\n        var GithubCommitProvider = (function (_super) {\n            __extends(GithubCommitProvider, _super);\n            function GithubCommitProvider(url, limit, accessToken) {\n                _super.call(this, url);\n                this.forks = [];\n                this.baseBranches = [];\n                this.data = {};\n                this.accessToken = accessToken;\n                this.limit = limit;\n            }\n            GithubCommitProvider.prototype.gitURL = function (url, api, params) {\n                if (params === void 0) { params = \"\"; }\n                // convert to api url and remove trailing /\n                if (url.indexOf(\"api.github.com\") == -1) {\n                    url = url.replace(/.*github.com/, \"https://api.github.com/repos/\").replace(/\\/\\//g, \"/\");\n                }\n                return url + \"/\" + api + \"?access_token=\" + this.accessToken + \"&per_page=\" + this.limit + \"&callback=?&\" + params;\n            };\n            GithubCommitProvider.prototype.onRequested = function (url) {\n                this.loadForks(url);\n            };\n            GithubCommitProvider.prototype.loadForks = function (url) {\n                var _this = this;\n                jQuery.getJSON(this.gitURL(url, \"forks\")).done(function (forks) {\n                    if (forks.data.message !== undefined) {\n                        _this.error(\"Github API: \" + forks.data.message);\n                        return;\n                    }\n                    jQuery.getJSON(_this.gitURL(url, \"branches\")).done(function (branches) {\n                        _this.processBranches(url, branches.data);\n                        _this.forks = forks.data;\n                        _this.loadBranches();\n                    });\n                });\n            };\n            GithubCommitProvider.prototype.processBranches = function (fork, data) {\n                var _this = this;\n                data.forEach(function (branch) {\n                    branch.repo = fork.url !== undefined ? fork.url : fork;\n                    if (fork.full_name !== undefined) {\n                        branch.name = branch.name + \"@\" + fork.full_name;\n                    }\n                    _this.baseBranches.push(branch);\n                });\n            };\n            GithubCommitProvider.prototype.loadBranches = function () {\n                var _this = this;\n                var forkRequests = this.forks.map(function (fork) {\n                    return jQuery.getJSON(_this.gitURL(fork.url, \"branches\"), function (data) {\n                        Logger.debug(\"loaded branches for \" + fork.name);\n                        _this.processBranches(fork, data.data);\n                    });\n                });\n                jQuery.when.apply(jQuery, forkRequests).done(function () {\n                    Logger.debug(\"all branches loaded\");\n                    _this.loadCommits();\n                });\n            };\n            GithubCommitProvider.prototype.loadCommits = function () {\n                var _this = this;\n                var commitRequests = [];\n                this.baseBranches.forEach(function (b) {\n                    var commit = _this.data[b.commit.sha];\n                    if (commit == undefined) {\n                        commitRequests.push(jQuery.getJSON(_this.gitURL(b.repo, \"commits\", \"sha=\" + b.commit.sha), function (data) {\n                            Logger.debug(\"loaded commits for \" + b.name);\n                            _this.processCommits(data.data);\n                        }));\n                    }\n                });\n                jQuery.when.apply(jQuery, commitRequests).done(function () {\n                    _this.process();\n                });\n            };\n            GithubCommitProvider.prototype.processCommits = function (data) {\n                var _this = this;\n                data.map(function (data) {\n                    var c = {};\n                    c.sha = data.sha;\n                    c.ssha = data.sha.substring(0, 8);\n                    c.parenthashes = data.parents.map(function (x) {\n                        return x.sha;\n                    });\n                    c.authorname = data.commit.author.name;\n                    c.authoremail = data.commit.author.email;\n                    c.authordate = moment(data.commit.author.date).unix();\n                    c.authortimestamp = moment(data.commit.author.date).valueOf();\n                    c.committername = data.commit.committer.name;\n                    c.committeremail = data.commit.committer.email;\n                    c.committerdate = moment(data.commit.committer.date).unix();\n                    c.committertimestamp = moment(data.commit.committer.date).valueOf();\n                    c.subject = data.commit.message;\n                    c.body = \"\"; // Todo: where to get this?\n                    c.refnames = []; // set when parsing branches\n                    c.inHeads = []; // set when parsing branches\n                    return c;\n                }).forEach(function (commit) {\n                    _this.data[commit.sha] = commit;\n                });\n            };\n            GithubCommitProvider.prototype.process = function () {\n                var _this = this;\n                this.baseBranches.forEach(function (b) {\n                    var commit = _this.data[b.commit.sha];\n                    if (commit == undefined) {\n                    }\n                    else {\n                        b.assigned = true;\n                        commit.refnames.push(b.name);\n                        _this.assignHeads(commit);\n                    }\n                });\n                // Sort\n                var newdata = {};\n                Object.keys(this.data).sort(function (a, b) {\n                    return _this.data[b].committertimestamp - _this.data[a].committertimestamp;\n                }).forEach(function (sha) {\n                    newdata[sha] = _this.data[sha];\n                });\n                this.whenDone(newdata);\n            };\n            GithubCommitProvider.prototype.assignHeads = function (commit) {\n                var _this = this;\n                commit.parents1 = commit.parenthashes.map(function (x) {\n                    return x;\n                }); // copy array\n                while (commit.parents1.length > 0) {\n                    var newParents = [];\n                    commit.parents1.forEach(function (parentHash) {\n                        var p = _this.data[parentHash];\n                        if (p != undefined) {\n                            p.inHeads.push(commit.sha);\n                            // add all grandparents to the newparents\n                            p.parenthashes.forEach(function (h) {\n                                if (newParents.indexOf(h) === -1) {\n                                    newParents.push(h);\n                                }\n                            });\n                        }\n                    });\n                    commit.parents1 = newParents;\n                }\n            };\n            return GithubCommitProvider;\n        })(Gitline.CommitProvider);\n        Plugin.GithubCommitProvider = GithubCommitProvider;\n    })(Plugin = Gitline.Plugin || (Gitline.Plugin = {}));\n})(Gitline || (Gitline = {}));\n///<reference path=\"Commit.ts\"/>\n///<reference path=\"AsyncLoader.ts\"/>\n///<reference path=\"Config.ts\"/>\n///<reference path=\"CommitProvider.ts\"/>\n///<reference path=\"Branch.ts\"/>\n///<reference path=\"Expandable.ts\"/>\n///<reference path=\"typedefs/jquery.d.ts\"/>\n///<reference path=\"plugins/LocalGit2JsonProvider.ts\"/>\n///<reference path=\"plugins/GithubCommitProvider.ts\"/>\n///<reference path=\"typedefs/moment-node.d.ts\"/>\n///<reference path=\"typedefs/moment.d.ts\"/>\nvar Gitline;\n(function (Gitline) {\n    function create() {\n        return new Main();\n    }\n    Gitline.create = create;\n    var Main = (function () {\n        function Main() {\n            this.maxX = 0;\n            this.maxIndexY = 0;\n            this.commits = {};\n            this.headsMap = {};\n            this.config = new Gitline.Config();\n        }\n        Main.prototype.addCommit = function (commit) {\n            this.commits[commit.getFullSha()] = commit;\n            // first commit needed by rendering\n            if (this.firstCommit === undefined) {\n                this.firstCommit = commit;\n            }\n        };\n        Main.prototype.addBranch = function (refname, commit, specifity) {\n            this.headsMap[refname] = new Gitline.Branch(refname, commit, specifity);\n        };\n        Main.prototype.render = function () {\n            var _this = this;\n            this.canvas = new jsgl.Panel(this.graphicalPanel);\n            this.al.thenSingle(\"Loading Data\", function () {\n                _this.al.suspend();\n                _this.commitProvider.withCallback(function (json) {\n                    _this.data = json;\n                    _this.al.resume();\n                });\n                _this.commitProvider.withErrorCallback(function (error) {\n                    _this.al.error(error);\n                });\n                _this.commitProvider.request();\n            }).then(\"Loading Commits\", function () {\n                return Object.keys(_this.data);\n            }, function (sha) {\n                var commit = new Gitline.Commit(_this, _this.data[sha]);\n                _this.addCommit(commit);\n            })\n                .thenSingle(\"Building Graph\", function () {\n                _this.buildGraph();\n            })\n                .then(\"Drawing Labels\", function () {\n                return Object.keys(_this.commits);\n            }, function (sha) {\n                var commit = _this.commits[sha];\n                _this.drawCommit(commit);\n            })\n                .thenSingle(\"Creating Legend\", function () {\n                _this.rootLabel = document.createElement('div');\n                _this.rootLabel.className = \"commit-legend\";\n                _this.textPanel.appendChild(_this.rootLabel);\n            })\n                .then(\"Drawing Merges\", function () {\n                return Object.keys(_this.commits);\n            }, function (sha) {\n                var commit = _this.commits[sha];\n                _this.drawReferences(commit);\n            })\n                .thenSingle(\"Resizing\", function () {\n                _this.graphicalPanel.style.width = Gitline.indexToX(_this.maxX + 1) + \"px\";\n                _this.graphicalPanel.style.height = _this.getHeight() + \"px\";\n            }).start();\n            window.onresize = function () {\n                _this.al.then(\"Redrawing\", function () {\n                    return Object.keys(_this.commits);\n                }, function (sha) {\n                    var commit = _this.commits[sha];\n                    commit.view.redraw();\n                }).thenSingle(\"Resizing\", function () {\n                    _this.graphicalPanel.style.width = Gitline.indexToX(_this.maxX + 1) + \"px\";\n                    _this.graphicalPanel.style.height = _this.getHeight() + \"px\";\n                }).start(false);\n            };\n        };\n        Main.prototype.getHeight = function () {\n            return this.rootLabel.offsetTop - this.firstCommit.view.label.offsetTop;\n        };\n        Main.prototype.buildGraph = function () {\n            var _this = this;\n            var shas = Object.keys(this.commits);\n            shas.forEach(function (sha) {\n                var commit = _this.commits[sha];\n                commit.initRelations();\n            });\n            shas.forEach(function (sha) {\n                var commit = _this.commits[sha];\n                commit.initHeadSpecifity();\n                commit.initMerges();\n            });\n            this.initBranches();\n        };\n        Main.prototype.drawCommit = function (commit) {\n            // Label\n            commit.view = new Gitline.CommitView(this.canvas, this.config, commit);\n            if (commit.outOfScope === false) {\n                commit.view.label = this.drawLabel(commit);\n                commit.view.label.onclick = function () {\n                    if (console) {\n                        Logger.debug(commit);\n                    }\n                };\n                this.textPanel.appendChild(commit.view.label);\n                commit.view.label.style['padding-left'] = Gitline.indexToX(this.maxX + 1) + \"px\";\n            }\n        };\n        Main.prototype.drawReferences = function (commit) {\n            commit.view.addRelations();\n            commit.view.redraw();\n        };\n        Main.prototype.drawLabel = function (commit) {\n            var label = document.createElement('gitline-legend');\n            // SHA Hash\n            var shortSha = commit.getShortSha().trim();\n            var fullSha = commit.getFullSha().trim();\n            var sha = Gitline.Expandable.extend(document.createElement(\"gitline-sha\"));\n            sha.setAttribute(\"title\", fullSha);\n            sha.whenShort(shortSha);\n            sha.whenFull(fullSha);\n            label.appendChild(sha);\n            // Author and committer\n            label.appendChild(this.drawIdentity(\"author\", commit.author));\n            if (commit.author.email != commit.committer.email) {\n                label.appendChild(this.drawIdentity(\"committer\", commit.committer));\n            }\n            // Branch - TODO: Tags and other branches\n            if (commit.branch && commit.branch.commit === commit && !commit.branch.anonymous) {\n                var head = Gitline.Expandable.extend(document.createElement(\"gitline-ref\"));\n                head.style.backgroundColor = commit.getColor(40);\n                head.whenShort(commit.branch.ref);\n                head.whenFull(commit.branch.ref);\n                label.appendChild(head);\n            }\n            // Subject\n            var subject = document.createElement(\"gitline-subject\");\n            subject.innerHTML = commit.subject;\n            if (commit.hasMerges()) {\n                subject.classList.add(\"has-merges\");\n            }\n            label.appendChild(subject);\n            return label;\n        };\n        Main.prototype.drawIdentity = function (type, id) {\n            var container = document.createElement(\"gitline-identity-container\");\n            var identity = Gitline.Expandable.extend(document.createElement(\"gitline-identity\"));\n            identity.classList.add(type);\n            var fullname = id.name + \" &lt;\" + id.email.toLowerCase() + \"&gt;\";\n            identity.setAttribute(\"title\", id.name + \" <\" + id.email.toLowerCase() + \">\");\n            identity.style.background = this.config.avatars.map(function (f) {\n                return \"url(\" + f(id.email) + \") no-repeat left center\";\n            }).join(\", \");\n            identity.whenFull(fullname);\n            identity.whenShort(\"\");\n            var datetime = Gitline.Expandable.extend(document.createElement(\"gitline-identity-datetime\"));\n            datetime.classList.add(type + \"-datetime\");\n            var fullDate = id.date.format(\"YYYY-MM-DD HH:mm\");\n            datetime.setAttribute(\"title\", fullDate);\n            datetime.whenFull(fullDate);\n            datetime.whenShort(id.date.format(\"HH:mm\"));\n            container.appendChild(identity);\n            container.appendChild(datetime);\n            return container;\n        };\n        /*\n         Based on the specifity assign the branches to the commits. if in doubt the commit will be on the most specific branch\n         */\n        Main.prototype.initBranches = function () {\n            var heads = Object.keys(this.headsMap);\n            /* set the index to the head object */\n            for (var i = 0; i < heads.length; i++) {\n                var headName = heads[i];\n                var head = this.headsMap[headName];\n                head.commit.initDefaultBranch();\n            }\n            /* Sort the branches by specifity */\n            var self = this;\n            heads.sort(function (l, r) {\n                var lHead = self.headsMap[l].commit;\n                var rHead = self.headsMap[r].commit;\n                if (lHead === rHead) {\n                    return 0;\n                }\n                if (lHead.branch.category === rHead.branch.category) {\n                    return lHead.branch.specifity - rHead.branch.specifity;\n                }\n                else {\n                    return lHead.branch.category.length - rHead.branch.category.length;\n                }\n            });\n            /* set the index to the head object */\n            var maxLane = 0;\n            for (var i = 0; i < heads.length; i++) {\n                var headName = heads[i];\n                var head = this.headsMap[headName];\n                var tip = head.commit;\n                if (tip.branch === head) {\n                    head.lane = maxLane;\n                    //head.index = maxLane;\n                    maxLane++;\n                    // Can we display this head a little more to the left?\n                    for (var l = 0; l < heads.length; l++) {\n                        var canUseLane = true;\n                        for (var j = 0; j < heads.length; j++) {\n                            var jheadName = heads[j];\n                            var headOnLane = this.headsMap[jheadName].commit;\n                            if (headOnLane === undefined ||\n                                headOnLane.branch != head &&\n                                    headOnLane.branch.lane === l &&\n                                    (tip.intersects(headOnLane) || tip.branch.category != headOnLane.branch.category)) {\n                                canUseLane = false;\n                            }\n                        }\n                        if (canUseLane) {\n                            Logger.debug(\"NO INTERSECTS: \", tip.branch.ref, \" - \", headOnLane.branch.ref);\n                            head.lane = l;\n                            break;\n                        }\n                    }\n                    this.maxX = Math.max(this.maxX, head.lane);\n                }\n            }\n        };\n        // Launching\n        Main.prototype.fromJSON = function (jsonFile) {\n            return this.fromProvider(new Gitline.Plugin.LocalGit2JsonProvider(jsonFile));\n        };\n        Main.prototype.fromProvider = function (commitProvider) {\n            this.commitProvider = commitProvider;\n            return this;\n        };\n        Main.prototype.renderTo = function (panel) {\n            if (this.headerPanel !== undefined) {\n                panel.appendChild(this.headerPanel);\n            }\n            panel.appendChild(this.loadingPanel = document.createElement(\"gitline-loadingpanel\"));\n            panel.appendChild(this.contentPanel = document.createElement(\"gitline-contentpanel\"));\n            this.contentPanel.appendChild(this.graphicalPanel = document.createElement(\"gitline-graphicalpanel\"));\n            this.contentPanel.appendChild(this.textPanel = document.createElement(\"gitline-textpanel\"));\n            this.al = new Gitline.AsyncLoader(this.loadingPanel);\n            this.render();\n            return this;\n        };\n        Main.prototype.withHeader = function (header) {\n            if (typeof header === \"string\") {\n                this.headerPanel = document.createElement(\"gitline-headerpanel\");\n                this.headerPanel.innerHTML = header;\n            }\n            else {\n                this.headerPanel = header;\n            }\n            return this;\n        };\n        return Main;\n    })();\n    Gitline.Main = Main;\n})(Gitline || (Gitline = {}));\nvar Gitline;\n(function (Gitline) {\n    var Rendering;\n    (function (Rendering) {\n        /**\n         * basic support for jsgl shapes\n         */\n        var Shape = (function () {\n            function Shape(canvas, element) {\n                this.dependencies = [];\n                this.canvas = canvas;\n                this.element = element;\n            }\n            Shape.prototype.addIfMissing = function () {\n                if (this.element !== undefined && this.renderedTo == null) {\n                    this.addElements();\n                    this.renderedTo = this.canvas;\n                }\n            };\n            Shape.prototype.addElements = function () {\n                this.canvas.addElement(this.element);\n            };\n            Shape.prototype.update = function () {\n                this.dependencies.forEach(function (dep) {\n                    dep.update();\n                });\n            };\n            Shape.prototype.dependsOn = function (on) {\n                on.dependencies.push(this);\n            };\n            return Shape;\n        })();\n        Rendering.Shape = Shape;\n    })(Rendering = Gitline.Rendering || (Gitline.Rendering = {}));\n})(Gitline || (Gitline = {}));\n///<reference path=\"Shape.ts\"/>\nvar Gitline;\n(function (Gitline) {\n    var Rendering;\n    (function (Rendering) {\n        /**\n         * Shape that links two dots\n         */\n        var BaseLink = (function (_super) {\n            __extends(BaseLink, _super);\n            function BaseLink(canvas, element) {\n                _super.call(this, canvas, element);\n            }\n            BaseLink.prototype.from = function (from) {\n                this.dependsOn(from);\n                this.parentDot = from;\n                return this;\n            };\n            BaseLink.prototype.to = function (to) {\n                //this.dependsOn(to);\n                this.childDot = to;\n                return this;\n            };\n            BaseLink.prototype.color = function (lineColor) {\n                this.element.getStroke().setWeight(1);\n                this.element.getStroke().setColor(lineColor);\n                this.lineColor = lineColor;\n                this.addIfMissing();\n                return this;\n            };\n            return BaseLink;\n        })(Rendering.Shape);\n        Rendering.BaseLink = BaseLink;\n    })(Rendering = Gitline.Rendering || (Gitline.Rendering = {}));\n})(Gitline || (Gitline = {}));\n///<reference path=\"BaseLink.ts\"/>\nvar Gitline;\n(function (Gitline) {\n    var Rendering;\n    (function (Rendering) {\n        var Curve = (function (_super) {\n            __extends(Curve, _super);\n            function Curve(canvas) {\n                _super.call(this, canvas, canvas.createCurve());\n                this.arrow = this.canvas.createPolygon();\n            }\n            Curve.prototype.addElements = function () {\n                _super.prototype.addElements.call(this);\n                // 2nd element\n                this.canvas.addElement(this.arrow);\n            };\n            Curve.prototype.update = function () {\n                var x = this.childDot.x;\n                var y = this.childDot.y;\n                var parentX = this.parentDot.x;\n                var parentY = this.parentDot.y;\n                var color = this.lineColor;\n                var direction = x < parentX ? 1 : -1;\n                this.element.setStartPointXY(parentX, parentY - this.parentDot.height / 2);\n                this.element.setEndPointXY(x + this.childDot.width / 2 * direction, y);\n                this.element.setControl2PointXY(parentX, y);\n                this.element.setControl1PointXY(parentX, y);\n                this.element.getStroke().setWeight(1);\n                this.element.getStroke().setColor(color);\n                this.arrow.getStroke().setWeight(0);\n                this.arrow.getFill().setColor(color);\n                this.arrow.clearPoints();\n                this.arrow.addPointXY(0, 0);\n                this.arrow.addPointXY(6, -4);\n                this.arrow.addPointXY(6, 4);\n                // Move\n                for (var i = 0; i < this.arrow.getPointsCount(); i++) {\n                    var px = this.arrow.getPointAt(i).X;\n                    var py = this.arrow.getPointAt(i).Y;\n                    //this.arrow.setPointXYAt(px, py + y, i);\n                    this.arrow.setPointXYAt(px * direction + x + this.childDot.width / 2 * direction, py + y, i);\n                }\n            };\n            return Curve;\n        })(Rendering.BaseLink);\n        Rendering.Curve = Curve;\n    })(Rendering = Gitline.Rendering || (Gitline.Rendering = {}));\n})(Gitline || (Gitline = {}));\n///<reference path=\"BaseLink.ts\"/>\nvar Gitline;\n(function (Gitline) {\n    var Rendering;\n    (function (Rendering) {\n        var Straight = (function (_super) {\n            __extends(Straight, _super);\n            function Straight(canvas) {\n                _super.call(this, canvas, canvas.createLine());\n            }\n            Straight.prototype.update = function () {\n                _super.prototype.update.call(this);\n                this.element.setStartPointXY(this.parentDot.x, this.parentDot.y - this.parentDot.height / 2);\n                this.element.setEndPointXY(this.childDot.x, this.childDot.y + this.childDot.height / 2);\n            };\n            return Straight;\n        })(Rendering.BaseLink);\n        Rendering.Straight = Straight;\n    })(Rendering = Gitline.Rendering || (Gitline.Rendering = {}));\n})(Gitline || (Gitline = {}));\n///<reference path=\"BaseLink.ts\"/>\nvar Gitline;\n(function (Gitline) {\n    var Rendering;\n    (function (Rendering) {\n        var Creation = (function (_super) {\n            __extends(Creation, _super);\n            function Creation(canvas) {\n                _super.call(this, canvas, canvas.createLine());\n                this.secondLine = canvas.createLine();\n            }\n            Creation.prototype.addElements = function () {\n                _super.prototype.addElements.call(this);\n                // 2nd element\n                this.canvas.addElement(this.secondLine); // TODO: add later?\n            };\n            Creation.prototype.update = function () {\n                _super.prototype.update.call(this);\n                // Horizontal dotted line\n                if (this.parentDot.x < this.childDot.x) {\n                    this.element.setStartPointXY(this.parentDot.x + this.parentDot.width / 2, this.parentDot.y);\n                }\n                else {\n                    this.element.setStartPointXY(this.parentDot.x - this.parentDot.width / 2, this.parentDot.y);\n                }\n                this.element.setEndPointXY(this.childDot.x, this.parentDot.y);\n                this.element.getStroke().setWeight(1);\n                this.element.getStroke().setDashStyle(jsgl.DashStyles.DASH);\n                this.element.getStroke().setColor(this.lineColor);\n                // Vertical line\n                this.secondLine.setStartPointXY(this.childDot.x, this.parentDot.y);\n                this.secondLine.setEndPointXY(this.childDot.x, this.childDot.y + this.childDot.height / 2);\n                this.secondLine.getStroke().setWeight(1);\n                this.secondLine.getStroke().setColor(this.lineColor);\n            };\n            return Creation;\n        })(Rendering.BaseLink);\n        Rendering.Creation = Creation;\n    })(Rendering = Gitline.Rendering || (Gitline.Rendering = {}));\n})(Gitline || (Gitline = {}));\n/// <reference path=\"Shape.ts\"/>\nvar Gitline;\n(function (Gitline) {\n    var Rendering;\n    (function (Rendering) {\n        var Dot = (function (_super) {\n            __extends(Dot, _super);\n            function Dot(canvas) {\n                _super.call(this, canvas, canvas.createRectangle());\n            }\n            Dot.prototype.size = function (width, height) {\n                this.width = width;\n                this.height = height;\n                this.element.setWidth(width);\n                this.element.setHeight(height);\n                this.element.setXRadius(width / 4);\n                this.element.setYRadius(width / 4);\n                this.update();\n                this.addIfMissing();\n                return this;\n            };\n            Dot.prototype.at = function (x, y) {\n                this.x = x;\n                this.y = y;\n                this.update();\n                this.addIfMissing();\n                return this;\n            };\n            Dot.prototype.color = function (strokeColor, fillColor) {\n                this.element.getStroke().setWeight(1);\n                this.element.getStroke().setColor(strokeColor);\n                this.element.getFill().setColor(fillColor);\n                return this;\n            };\n            Dot.prototype.update = function () {\n                this.element.setLocationXY(this.x - this.width / 2, this.y - this.height / 2);\n                _super.prototype.update.call(this);\n            };\n            return Dot;\n        })(Rendering.Shape);\n        Rendering.Dot = Dot;\n    })(Rendering = Gitline.Rendering || (Gitline.Rendering = {}));\n})(Gitline || (Gitline = {}));\n///<reference path=\"rendering/Curve.ts\"/>\n///<reference path=\"rendering/Straight.ts\"/>\n///<reference path=\"rendering/Creation.ts\"/>\n///<reference path=\"rendering/Dot.ts\"/>\n///<reference path=\"Config.ts\"/>\n///<reference path=\"Commit.ts\"/>\n///<reference path=\"rendering/Shape.ts\"/>\nvar Gitline;\n(function (Gitline) {\n    /**\n     * View of the Commit\n     */\n    var CommitView = (function () {\n        function CommitView(canvas, config, commit) {\n            this.lines = [];\n            this.canvas = canvas;\n            this.config = config;\n            this.commit = commit;\n            this.dot = new Gitline.Rendering.Dot(this.canvas);\n        }\n        CommitView.prototype.addRelations = function () {\n            var _this = this;\n            // Direct parent\n            if (this.commit.directparent != null) {\n                var dpl;\n                if (this.commit.getLane() == this.commit.directparent.getLane() || this.commit.directparent.outOfScope) {\n                    // direct parent is the same X/lane, this means it is a standard forward commit\n                    dpl = new Gitline.Rendering.Straight(this.canvas).from(this.commit.directparent.view.dot).to(this.dot).color(this.commit.getColor(20));\n                }\n                else {\n                    // direct parent is on a different lane, this is most certainly a new branch\n                    dpl = new Gitline.Rendering.Creation(this.canvas).from(this.commit.directparent.view.dot).to(this.dot).color(this.commit.getColor(30));\n                }\n                this.lines.push(dpl);\n            }\n            var allmerges = this.commit.merges.standard.concat(this.commit.merges.anonymous);\n            allmerges.forEach(function (merge) {\n                _this.lines.push(new Gitline.Rendering.Curve(_this.canvas)\n                    .from(merge.source.view.dot)\n                    .to(_this.dot)\n                    .color(merge.source.getColor(35)));\n            });\n        };\n        /** calculate the positions based on model and update the shapes */\n        CommitView.prototype.redraw = function () {\n            this.dot\n                .at(this.commit.getX(), this.commit.getY())\n                .size(this.config.dotWidth, this.config.dotHeight)\n                .color(this.commit.getColor(20), this.commit.getColor(80));\n        };\n        return CommitView;\n    })();\n    Gitline.CommitView = CommitView;\n})(Gitline || (Gitline = {}));\n///<reference path=\"Main.ts\"/>\n///<reference path=\"CommitView.ts\"/>\n///<reference path=\"Branch.ts\"/>\n///<reference path=\"typedefs/moment-node.d.ts\"/>\n///<reference path=\"typedefs/moment.d.ts\"/>\nvar Gitline;\n(function (Gitline) {\n    /** committer or author */\n    var Identity = (function () {\n        function Identity(name, email, date) {\n            this.name = name;\n            this.email = email;\n            this.date = date;\n        }\n        return Identity;\n    })();\n    Gitline.Identity = Identity;\n    var Commit = (function () {\n        function Commit(container, data) {\n            this.warnings = [];\n            this.inHeadsRef = [];\n            this.parents = [];\n            this.childs = [];\n            this.siblings = [];\n            this.outOfScope = false; // This commit was not part of the logs scope, but is referenced by another commit.\n            this.merges = { standard: [], anonymous: [] };\n            this.container = container;\n            this.data = data;\n            // reference the data back to the object\n            this.data.obj = this;\n            if (data.inHeads == null)\n                data.inHeads = [];\n            if (data.parenthashes == null)\n                data.parenthashes = [];\n            if (data.refnames == null)\n                data.refnames = [];\n            this.sha = data.sha;\n            this.ssha = data.ssha;\n            this.subject = data.subject;\n            this.indexY = container.maxIndexY++;\n            this.committer = new Identity(this.data.committername, this.data.committeremail, moment.unix(this.data.committerdate));\n            this.author = new Identity(this.data.authorname, this.data.authoremail, moment.unix(this.data.authordate));\n        }\n        Commit.prototype.getShortSha = function () {\n            return this.ssha;\n        };\n        Commit.prototype.getFullSha = function () {\n            return this.sha;\n        };\n        Commit.prototype.initRelations = function () {\n            var _this = this;\n            var self = this;\n            this.data.parenthashes.forEach(function (hash) {\n                var parentCommit = _this.container.commits[hash];\n                // Create a virtual commit\n                if (parentCommit == null) {\n                    parentCommit = new Commit(_this.container, { sha: hash + Math.random() });\n                    parentCommit.outOfScope = true;\n                    self.container.addCommit(parentCommit);\n                }\n                _this.parents.push(parentCommit);\n                parentCommit.childs.push(_this);\n                _this.siblings = parentCommit.childs; // this will be overwitten as new childs are found\n                if (_this.parents.length > 0) {\n                    var dp = _this.parents[0];\n                    _this.directparent = dp;\n                    dp.directchild = _this;\n                }\n            });\n            this.data.inHeads.forEach(function (headsha) {\n                var commit = _this.container.commits[headsha];\n                if (_this.inHeadsRef.indexOf(commit) === undefined) {\n                    _this.inHeadsRef.push(commit);\n                }\n            });\n        };\n        Commit.prototype.initDefaultBranch = function () {\n            var commit = this;\n            while (commit != null) {\n                // GUESSING: The correct branch is usually the one with the least specific name\n                if (commit.branch == null || commit.branch.specifity > this.branch.specifity) {\n                    commit.branch = this.branch;\n                }\n                commit.branch.start = commit; // this function will traverse the parents, so the last one will be the first commit\n                commit.branch.origin = commit.directparent; // this could be null -> it is outside of the history.\n                commit = commit.directparent;\n            }\n        };\n        Commit.prototype.initHeadSpecifity = function () {\n            for (var i = 0; i < this.data.refnames.length; i++) {\n                var refname = this.data.refnames[i];\n                if (!this.container.config.remoteOnly || refname.indexOf(\"origin/\") == 0) {\n                    if (this.container.config.remoteOnly) {\n                        refname = refname.replace(/^origin./, '');\n                    }\n                    var specifity = refname.replace(/[^\\/-]/g, '').length * 1000;\n                    specifity += refname.replace(/[^a-zA-Z0-9-]/, '').length;\n                    this.container.addBranch(refname, this, specifity);\n                    /* assign the most specific head on this tip commit */\n                    if (this.maxSpecifity == null || specifity < this.maxSpecifity) {\n                        Logger.debug(\"assigning branch\", refname, this.sha, this.maxSpecifity, specifity);\n                        this.maxSpecifity = specifity;\n                        this.branch = this.container.headsMap[refname];\n                    }\n                    this.initDefaultBranch();\n                }\n            }\n        };\n        Commit.prototype.initMerges = function () {\n            this.merges = { standard: [], anonymous: [] };\n            this.warnings = [];\n            // Detect a merge (octopus currently not supported)\n            if (this.parents.length == 1) {\n                var dp = this.parents[0];\n                this.directparent = dp;\n                dp.directchild = this;\n            }\n            if (this.parents.length >= 2) {\n                var dp = this.parents[0];\n                this.directparent = dp;\n                dp.directchild = this;\n                for (var i = 1; i < this.parents.length; i++) {\n                    var mp = this.parents[i];\n                    if (mp != null) {\n                        // Clues if this is a standard or anonymous merge\n                        if (mp.data.refnames.length > 0 // This is standard merge with mps head\n                            || mp.inHeadsRef.length != dp.inHeadsRef.length // The heads of both are different\n                        ) {\n                            this.merges.standard.push({ source: mp });\n                        }\n                        else {\n                            // This is a anonymous (automatic) merge on the same branch\n                            this.merges.anonymous.push({ source: mp });\n                            this.initAnonymous();\n                        }\n                    }\n                }\n            }\n        };\n        Commit.prototype.initAnonymous = function () {\n            // Create a dummy branch for anonymous merges, which is as specific as the original branch.\n            // try finding the original branch by going up direct childs, which will get the original\n            var _this = this;\n            this.merges.anonymous.forEach(function (_merge) {\n                var merge = _merge.source;\n                var child = _this;\n                while (child != null && child.branch == null) {\n                    child = child.directchild;\n                }\n                /* this is only an anonymous branch head, if there is only one child (the merge)\n                 TODO: if there are multiple, it might result in wrongly assigned branches */\n                if (child != null && merge.branch == null) {\n                    merge.branch = new Gitline.Branch(child.branch.ref + \"/anonymous\" + merge.sha + Math.random(), merge, child.branch.specifity + 1);\n                    merge.branch.anonymous = true;\n                    merge.branch.parent = child.branch;\n                    merge.branch.start = child;\n                    merge.branch.category = child.branch.category;\n                    _this.container.headsMap[merge.branch.ref] = merge.branch;\n                }\n            });\n        };\n        Commit.prototype.getColor = function (lightness) {\n            if (this.branch == null) {\n                this.warn(\"No Branch set\");\n            }\n            else {\n                var b = this.branch;\n                if (this.branch.anonymous) {\n                    b = this.branch.parent;\n                }\n                var hue = b.lane * 300 / this.container.maxX;\n                return \"hsl(\" + hue + \", 100%, \" + lightness + \"%)\";\n            }\n        };\n        Commit.prototype.hasMerges = function () {\n            return this.merges.standard.length > 0 || this.merges.anonymous.length > 0;\n        };\n        Commit.prototype.getX = function () {\n            return Gitline.indexToX(this.getLane());\n        };\n        Commit.prototype.getY = function () {\n            if (this.outOfScope) {\n                return this.container.rootLabel.offsetTop + 20;\n            }\n            return this.view.label.offsetTop - this.container.firstCommit.view.label.offsetTop + this.view.label.offsetHeight / 2;\n        };\n        Commit.prototype.getOriginIndexY = function () {\n            if (this.branch.origin != undefined) {\n                return this.branch.origin.getIndexY();\n            }\n            else if (this.branch.start.outOfScope) {\n                return this.container.maxIndexY;\n            }\n            else {\n                return this.branch.start.indexY;\n            }\n        };\n        /** Tip plus the next direct child index (position of last merge) */\n        Commit.prototype.getTipPlusIndexY = function () {\n            if (this.branch != undefined && this.branch.commit != undefined) {\n                var indexY = this.branch.commit.indexY;\n                // find the top child \n                this.branch.commit.childs.forEach(function (c) {\n                    indexY = Math.min(indexY, c.indexY);\n                });\n                return indexY;\n            }\n            // nothing found, assume top\n            return 0;\n        };\n        /** does this branch intersect with another when drawn next to each other.\n            can this branch be displayed on the same X axis without overlapping? */\n        Commit.prototype.intersects = function (other) {\n            var otherY = 9999999, thisY = 999999;\n            if (this.outOfScope || other.outOfScope)\n                return true;\n            return this.getOriginIndexY() > other.getTipPlusIndexY() && this.getTipPlusIndexY() < other.getOriginIndexY();\n        };\n        Commit.prototype.getIndexY = function () {\n            return this.indexY;\n        };\n        Commit.prototype.warn = function (warning) {\n            this.warnings.push(warning);\n            this.debug(warning);\n        };\n        Commit.prototype.debug = function (warning) {\n            if (console) {\n                Logger.debug(warning, this);\n            }\n        };\n        Commit.prototype.getLane = function () {\n            if (this.branch != null) {\n                return this.branch.commit.branch.lane;\n            }\n            return null;\n        };\n        return Commit;\n    })();\n    Gitline.Commit = Commit;\n})(Gitline || (Gitline = {}));\n///<reference path=\"Commit.ts\"/>\nvar Gitline;\n(function (Gitline) {\n    var Branch = (function () {\n        function Branch(refname, commit, specifity) {\n            this.ref = refname;\n            this.commit = commit;\n            this.specifity = specifity;\n            this.shortname = refname.split(\"@\")[0];\n            this.category = this.shortname.substring(0, this.shortname.lastIndexOf(\"/\"));\n        }\n        return Branch;\n    })();\n    Gitline.Branch = Branch;\n})(Gitline || (Gitline = {}));\n\n\n","///<reference path=\"../CommitProvider.ts\"/>\r\n///<reference path=\"../Main.ts\"/>\r\n///<reference path=\"../typedefs/jquery.d.ts\"/>\r\n\r\nmodule Gitline.Plugin {\r\n\texport class LocalGit2JsonProvider extends Gitline.CommitProvider {\r\n\r\n\t\tpublic onRequested(url: string) {\r\n\t\t\tvar xhr = jQuery.getJSON(url, {});\r\n\r\n\t\t\txhr.done((json) => {\r\n\t\t\t\tthis.whenDone(json);\r\n\t\t\t});\r\n\r\n\t\t\txhr.fail(() => {\r\n\t\t\t\tthis.error(\"Error loading git data from \" + url + \" create it using git2json\");\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n}","///<reference path=\"../CommitProvider.ts\"/>\r\n///<reference path=\"../typedefs/jquery.d.ts\"/>\r\n///<reference path=\"../typedefs/moment-node.d.ts\"/>\r\n///<reference path=\"../typedefs/moment.d.ts\"/>\r\n\r\ndeclare var Logger: any;\r\n\r\nmodule Gitline.Plugin.Github {\r\n\texport interface Branch {\r\n\t\tname: string;\r\n\t\trepo: string;\r\n\t\tassigned: boolean;\r\n\t\tcommit: Commit;\r\n\t}\r\n\r\n\texport interface Fork {\r\n\t\turl: string;\r\n\t\tname: string;\r\n\t\tdata: any;\r\n\t\tfull_name: string;\r\n\t}\r\n\r\n\texport interface Commit {\r\n\t\tsha: string;\r\n\t}\r\n}\r\n\r\nmodule Gitline.Plugin {\r\n\timport Github = Gitline.Plugin.Github;\r\n\r\n\t/**\r\n\t * GitHub commit provider. only works if there is and accesstoken configured in the browser\r\n\t */\r\n\texport class GithubCommitProvider extends Gitline.CommitProvider {\r\n\r\n\t\tprivate forks: Github.Fork[] = [];\r\n\t\tprivate baseBranches: Github.Branch[] = [];\r\n\t\tprivate data: {} = {};\r\n\r\n\t\tprivate limit: number;\r\n\t\tprivate accessToken: string;\r\n\r\n\t\tpublic constructor(url: string, limit: number, accessToken: string) {\r\n\t\t\tsuper(url);\r\n\t\t\tthis.accessToken = accessToken;\r\n\t\t\tthis.limit = limit;\r\n\t\t}\r\n\r\n\t\tpublic gitURL(url: string, api: string, params: string = \"\") {\r\n\r\n\t\t\t// convert to api url and remove trailing /\r\n\t\t\tif (url.indexOf(\"api.github.com\") == -1) {\r\n\t\t\t\turl = url.replace(/.*github.com/, \"https://api.github.com/repos/\").replace(/\\/\\//g, \"/\");\r\n\r\n\t\t\t}\r\n\t\t\treturn url + \"/\" + api + \"?access_token=\" + this.accessToken + \"&per_page=\" + this.limit + \"&callback=?&\" + params;\r\n\t\t}\r\n\r\n\t\tpublic onRequested(url: string) {\r\n\t\t\tthis.loadForks(url);\r\n\t\t}\r\n\r\n\t\tpublic loadForks(url: string) {\r\n\t\t\tjQuery.getJSON(this.gitURL(url, \"forks\")).done((forks) => {\r\n\t\t\t\tif (forks.data.message !== undefined) {\r\n\t\t\t\t\tthis.error(\"Github API: \" + forks.data.message);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tjQuery.getJSON(this.gitURL(url, \"branches\")).done((branches) => {\r\n\t\t\t\t\tthis.processBranches(url, branches.data);\r\n\t\t\t\t\tthis.forks = forks.data;\r\n\r\n\t\t\t\t\tthis.loadBranches();\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tpublic processBranches(fork, data: Github.Branch[]) {\r\n\t\t\tdata.forEach(branch => {\r\n\t\t\t\tbranch.repo = fork.url !== undefined ? fork.url : fork;\r\n\t\t\t\tif (fork.full_name !== undefined) {\r\n\t\t\t\t\tbranch.name = branch.name + \"@\" + fork.full_name;\r\n\t\t\t\t}\r\n\t\t\t\tthis.baseBranches.push(branch);\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tpublic loadBranches() {\r\n\t\t\tvar forkRequests = this.forks.map(fork => {\r\n\t\t\t\treturn jQuery.getJSON(this.gitURL(fork.url, \"branches\"), data => {\r\n\t\t\t\t\tLogger.debug(\"loaded branches for \" + fork.name);\r\n\t\t\t\t\tthis.processBranches(fork, data.data);\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t\tjQuery.when.apply(jQuery, forkRequests).done(() => {\r\n\t\t\t\tLogger.debug(\"all branches loaded\");\r\n\t\t\t\tthis.loadCommits();\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tpublic loadCommits() {\r\n\t\t\tvar commitRequests = [];\r\n\t\t\tthis.baseBranches.forEach(b => {\r\n\t\t\t\tvar commit = this.data[b.commit.sha];\r\n\t\t\t\tif (commit == undefined) {\r\n\t\t\t\t\tcommitRequests.push(\r\n\t\t\t\t\t\tjQuery.getJSON(this.gitURL(b.repo, \"commits\", \"sha=\" + b.commit.sha), data => {\r\n\t\t\t\t\t\t\tLogger.debug(\"loaded commits for \" + b.name);\r\n\t\t\t\t\t\t\tthis.processCommits(data.data);\r\n\t\t\t\t\t\t}));\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tjQuery.when.apply(jQuery, commitRequests).done(() => {\r\n\t\t\t\tthis.process();\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tpublic processCommits(data) {\r\n\t\t\tdata.map(data => {\r\n\t\t\t\tvar c: any = {};\r\n\t\t\t\tc.sha = data.sha;\r\n\t\t\t\tc.ssha = data.sha.substring(0, 8);\r\n\t\t\t\tc.parenthashes = (<any[]> data.parents).map(x => {\r\n\t\t\t\t\treturn x.sha\r\n\t\t\t\t});\r\n\t\t\t\tc.authorname = data.commit.author.name;\r\n\t\t\t\tc.authoremail = data.commit.author.email;\r\n\t\t\t\tc.authordate = moment(data.commit.author.date).unix();\r\n\t\t\t\tc.authortimestamp = moment(data.commit.author.date).valueOf();\r\n\r\n\t\t\t\tc.committername = data.commit.committer.name;\r\n\t\t\t\tc.committeremail = data.commit.committer.email;\r\n\t\t\t\tc.committerdate = moment(data.commit.committer.date).unix();\r\n\t\t\t\tc.committertimestamp = moment(data.commit.committer.date).valueOf();\r\n\r\n\t\t\t\tc.subject = data.commit.message;\r\n\t\t\t\tc.body = \"\"; // Todo: where to get this?\r\n\t\t\t\tc.refnames = []; // set when parsing branches\r\n\t\t\t\tc.inHeads = []; // set when parsing branches\r\n\r\n\t\t\t\treturn c;\r\n\t\t\t}).forEach(commit => {\r\n\t\t\t\tthis.data[commit.sha] = commit;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tpublic process() {\r\n\t\t\tthis.baseBranches.forEach(b => {\r\n\t\t\t\tvar commit = this.data[b.commit.sha];\r\n\t\t\t\tif (commit == undefined) {\r\n\t\t\t\t\t// commit missing for branch - TODO: fetch it\r\n\t\t\t\t} else {\r\n\t\t\t\t\tb.assigned = true;\r\n\t\t\t\t\tcommit.refnames.push(b.name);\r\n\t\t\t\t\tthis.assignHeads(commit);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t// Sort\r\n\t\t\tvar newdata = {};\r\n\t\t\tObject.keys(this.data).sort((a, b) => {\r\n\t\t\t\treturn this.data[b].committertimestamp - this.data[a].committertimestamp;\r\n\t\t\t}).forEach(sha => {\r\n\t\t\t\tnewdata[sha] = this.data[sha];\r\n\t\t\t});\r\n\r\n\r\n\t\t\tthis.whenDone(newdata);\r\n\t\t}\r\n\r\n\t\tprivate assignHeads(commit) {\r\n\t\t\tcommit.parents1 = commit.parenthashes.map(x => {\r\n\t\t\t\treturn x\r\n\t\t\t}); // copy array\r\n\r\n\t\t\twhile (commit.parents1.length > 0) {\r\n\t\t\t\tvar newParents = [];\r\n\t\t\t\tcommit.parents1.forEach(parentHash => {\r\n\t\t\t\t\tvar p = this.data[parentHash];\r\n\t\t\t\t\tif (p != undefined) {\r\n\t\t\t\t\t\tp.inHeads.push(commit.sha);\r\n\t\t\t\t\t\t// add all grandparents to the newparents\r\n\t\t\t\t\t\tp.parenthashes.forEach(h => {\r\n\t\t\t\t\t\t\tif (newParents.indexOf(h) === -1) {\r\n\t\t\t\t\t\t\t\tnewParents.push(h);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tcommit.parents1 = newParents\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n","///<reference path=\"Commit.ts\"/>\r\n///<reference path=\"AsyncLoader.ts\"/>\r\n///<reference path=\"Config.ts\"/>\r\n///<reference path=\"CommitProvider.ts\"/>\r\n///<reference path=\"Branch.ts\"/>\r\n///<reference path=\"Expandable.ts\"/>\r\n///<reference path=\"typedefs/jquery.d.ts\"/>\r\n///<reference path=\"plugins/LocalGit2JsonProvider.ts\"/>\r\n///<reference path=\"plugins/GithubCommitProvider.ts\"/>\r\n///<reference path=\"typedefs/moment-node.d.ts\"/>\r\n///<reference path=\"typedefs/moment.d.ts\"/>\r\n\r\nmodule Gitline {\r\n\r\n\tinterface Commits {\r\n\t\t[key:string]:Commit;\r\n\t}\r\n\r\n\tinterface Branches {\r\n\t\t[key:string]:Branch;\r\n\t}\r\n\r\n\texport function create(): Main {\r\n\t\treturn new Main();\r\n\t}\r\n\r\n\texport class Main {\r\n\r\n\t\tpublic maxX: number = 0;\r\n\t\tpublic maxIndexY: number = 0;\r\n\t\tpublic commits: Commits = {};\r\n\t\tpublic firstCommit: Commit;\r\n\t\tpublic canvas;\r\n\t\tpublic data;\r\n\t\tpublic panel;\r\n\t\tpublic textPanel;\r\n\t\tpublic headsMap: Branches = {};\r\n\t\tpublic rootLabel;\r\n\r\n\t\tpublic al: AsyncLoader;\r\n\r\n\t\tpublic config: Config = new Config();\r\n\r\n\t\t// HTML stuff\r\n\t\tprivate loadingPanel: HTMLElement;\r\n\t\tprivate graphicalPanel: HTMLElement;\r\n\t\tprivate headerPanel: HTMLElement;\r\n\t\tprivate contentPanel: HTMLElement;\r\n\r\n\t\tprivate commitProvider: CommitProvider;\r\n\r\n\t\tpublic addCommit(commit: Commit) {\r\n\t\t\tthis.commits[commit.getFullSha()] = commit;\r\n\r\n\t\t\t// first commit needed by rendering\r\n\t\t\tif (this.firstCommit === undefined) {\r\n\t\t\t\tthis.firstCommit = commit;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpublic addBranch(refname: string, commit: Commit, specifity: number) {\r\n\t\t\tthis.headsMap[refname] = new Branch(refname, commit, specifity);\r\n\t\t}\r\n\r\n\t\tpublic render() {\r\n\t\t\tthis.canvas = new jsgl.Panel(this.graphicalPanel);\r\n\r\n\t\t\tthis.al.thenSingle(\"Loading Data\", () => {\r\n\t\t\t\tthis.al.suspend();\r\n\t\t\t\tthis.commitProvider.withCallback((json) => {\r\n\t\t\t\t\tthis.data = json;\r\n\t\t\t\t\tthis.al.resume();\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\tthis.commitProvider.withErrorCallback(error => {\r\n\t\t\t\t\tthis.al.error(error);\r\n\t\t\t\t});\r\n\t\t\t\tthis.commitProvider.request();\r\n\t\t\t}).then(\"Loading Commits\", () => {\r\n\t\t\t\treturn Object.keys(this.data)\r\n\t\t\t}, (sha) => {\r\n\t\t\t\tvar commit = new Commit(this, this.data[sha]);\r\n\t\t\t\tthis.addCommit(commit);\r\n\t\t\t})\r\n\t\t\t\t.thenSingle(\"Building Graph\", () => {\r\n\t\t\t\t\tthis.buildGraph();\r\n\t\t\t\t})\r\n\t\t\t\t.then(\"Drawing Labels\", () => {\r\n\t\t\t\t\treturn Object.keys(this.commits)\r\n\t\t\t\t}, (sha) => {\r\n\t\t\t\t\tvar commit = this.commits[sha];\r\n\t\t\t\t\tthis.drawCommit(commit);\r\n\t\t\t\t})\r\n\t\t\t\t.thenSingle(\"Creating Legend\", () => {\r\n\t\t\t\t\tthis.rootLabel = document.createElement('div');\r\n\t\t\t\t\tthis.rootLabel.className = \"commit-legend\";\r\n\t\t\t\t\tthis.textPanel.appendChild(this.rootLabel);\r\n\t\t\t\t})\r\n\t\t\t\t.then(\"Drawing Merges\", () => {\r\n\t\t\t\t\treturn Object.keys(this.commits)\r\n\t\t\t\t}, (sha) => {\r\n\t\t\t\t\tvar commit = this.commits[sha];\r\n\t\t\t\t\tthis.drawReferences(commit);\r\n\t\t\t\t})\r\n\t\t\t\t.thenSingle(\"Resizing\", () => {\r\n\t\t\t\t\tthis.graphicalPanel.style.width = indexToX(this.maxX + 1) + \"px\";\r\n\t\t\t\t\tthis.graphicalPanel.style.height = this.getHeight() + \"px\";\r\n\t\t\t\t}).start();\r\n\r\n\t\t\twindow.onresize = () => {\r\n\r\n\t\t\t\tthis.al.then(\"Redrawing\", () => {\r\n\t\t\t\t\treturn Object.keys(this.commits)\r\n\t\t\t\t}, (sha) => {\r\n\t\t\t\t\tvar commit: Commit = this.commits[sha];\r\n\t\t\t\t\tcommit.view.redraw();\r\n\t\t\t\t}).thenSingle(\"Resizing\", () => {\r\n\t\t\t\t\tthis.graphicalPanel.style.width = indexToX(this.maxX + 1) + \"px\";\r\n\t\t\t\t\tthis.graphicalPanel.style.height = this.getHeight() + \"px\";\r\n\t\t\t\t}).start(false);\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tpublic getHeight() {\r\n\t\t\treturn this.rootLabel.offsetTop - this.firstCommit.view.label.offsetTop;\r\n\t\t}\r\n\r\n\t\tpublic buildGraph() {\r\n\t\t\tvar shas = Object.keys(this.commits);\r\n\t\t\tshas.forEach((sha) => {\r\n\t\t\t\tvar commit = this.commits[sha];\r\n\t\t\t\tcommit.initRelations();\r\n\t\t\t});\r\n\t\t\tshas.forEach((sha) => {\r\n\t\t\t\tvar commit = this.commits[sha];\r\n\r\n\t\t\t\tcommit.initHeadSpecifity();\r\n\t\t\t\tcommit.initMerges();\r\n\t\t\t});\r\n\t\t\tthis.initBranches();\r\n\t\t}\r\n\r\n\t\tpublic drawCommit(commit: Commit) {\r\n\t\t\t// Label\r\n\t\t\tcommit.view = new CommitView(this.canvas, this.config, commit);\r\n\r\n\t\t\tif (commit.outOfScope === false) {\r\n\t\t\t\tcommit.view.label = this.drawLabel(commit);\r\n\r\n\t\t\t\tcommit.view.label.onclick = function () {\r\n\t\t\t\t\tif (console) {\r\n\t\t\t\t\t\tLogger.debug(commit);\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\r\n\t\t\t\tthis.textPanel.appendChild(commit.view.label);\r\n\t\t\t\tcommit.view.label.style['padding-left'] = Gitline.indexToX(this.maxX + 1) + \"px\"\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpublic drawReferences(commit: Commit) {\r\n\t\t\tcommit.view.addRelations();\r\n\t\t\tcommit.view.redraw();\r\n\t\t}\r\n\r\n\t\tpublic drawLabel(commit: Commit) {\r\n\t\t\tvar label = document.createElement('gitline-legend');\r\n\r\n\t\t\t// SHA Hash\r\n\t\t\tvar shortSha: string = commit.getShortSha().trim();\r\n\t\t\tvar fullSha: string = commit.getFullSha().trim();\r\n\t\t\tvar sha: HTMLExpandableElement = Expandable.extend(document.createElement(\"gitline-sha\"));\r\n\t\t\tsha.setAttribute(\"title\", fullSha);\r\n\t\t\tsha.whenShort(shortSha);\r\n\t\t\tsha.whenFull(fullSha);\r\n\r\n\t\t\tlabel.appendChild(sha);\r\n\r\n\t\t\t// Author and committer\r\n\t\t\tlabel.appendChild(this.drawIdentity(\"author\", commit.author));\r\n\r\n\t\t\tif (commit.author.email != commit.committer.email) {\r\n\t\t\t\tlabel.appendChild(this.drawIdentity(\"committer\", commit.committer));\r\n\t\t\t}\r\n\r\n\t\t\t// Branch - TODO: Tags and other branches\r\n\t\t\tif (commit.branch && commit.branch.commit === commit && !commit.branch.anonymous) {\r\n\t\t\t\tvar head: HTMLExpandableElement = Expandable.extend(document.createElement(\"gitline-ref\"));\r\n\t\t\t\thead.style.backgroundColor = commit.getColor(40);\r\n\t\t\t\thead.whenShort(commit.branch.ref);\r\n\t\t\t\thead.whenFull(commit.branch.ref);\r\n\r\n\t\t\t\tlabel.appendChild(head);\r\n\t\t\t}\r\n\r\n\t\t\t// Subject\r\n\t\t\tvar subject = document.createElement(\"gitline-subject\");\r\n\t\t\tsubject.innerHTML = commit.subject;\r\n\t\t\tif (commit.hasMerges()) {\r\n\t\t\t\tsubject.classList.add(\"has-merges\");\r\n\t\t\t}\r\n\t\t\tlabel.appendChild(subject);\r\n\r\n\t\t\treturn label;\r\n\t\t}\r\n\r\n\t\tprivate drawIdentity(type: string, id: Identity): HTMLElement {\r\n\t\t\tvar container: HTMLElement = document.createElement(\"gitline-identity-container\");\r\n\r\n\t\t\tvar identity: HTMLExpandableElement = Expandable.extend(document.createElement(\"gitline-identity\"));\r\n\t\t\tidentity.classList.add(type);\r\n\t\t\tvar fullname = id.name + \" &lt;\" + id.email.toLowerCase() + \"&gt;\";\r\n\t\t\tidentity.setAttribute(\"title\", id.name + \" <\" + id.email.toLowerCase() + \">\");\r\n\t\t\tidentity.style.background = this.config.avatars.map(f => {\r\n\t\t\t\treturn \"url(\" + f(id.email) + \") no-repeat left center\"\r\n\t\t\t}).join(\", \");\r\n\t\t\tidentity.whenFull(fullname);\r\n\t\t\tidentity.whenShort(\"\");\r\n\r\n\t\t\tvar datetime: HTMLExpandableElement = Expandable.extend(document.createElement(\"gitline-identity-datetime\"));\r\n\t\t\tdatetime.classList.add(type + \"-datetime\");\r\n\t\t\tvar fullDate = id.date.format(\"YYYY-MM-DD HH:mm\");\r\n\t\t\tdatetime.setAttribute(\"title\", fullDate);\r\n\t\t\tdatetime.whenFull(fullDate);\r\n\t\t\tdatetime.whenShort(id.date.format(\"HH:mm\"));\r\n\r\n\t\t\tcontainer.appendChild(identity);\r\n\t\t\tcontainer.appendChild(datetime);\r\n\r\n\t\t\treturn container;\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t Based on the specifity assign the branches to the commits. if in doubt the commit will be on the most specific branch\r\n\t\t */\r\n\t\tpublic initBranches() {\r\n\r\n\t\t\tvar heads = Object.keys(this.headsMap);\r\n\r\n\t\t\t/* set the index to the head object */\r\n\t\t\tfor (var i = 0; i < heads.length; i++) {\r\n\t\t\t\tvar headName = heads[i];\r\n\t\t\t\tvar head = this.headsMap[headName];\r\n\t\t\t\thead.commit.initDefaultBranch();\r\n\t\t\t}\r\n\r\n\t\t\t/* Sort the branches by specifity */\r\n\t\t\tvar self = this;\r\n\t\t\theads.sort(function (l, r) {\r\n\t\t\t\tvar lHead: Commit = self.headsMap[l].commit;\r\n\t\t\t\tvar rHead: Commit = self.headsMap[r].commit;\r\n\r\n\t\t\t\tif (lHead === rHead) {\r\n\t\t\t\t\treturn 0;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (lHead.branch.category === rHead.branch.category) {\r\n\t\t\t\t\treturn lHead.branch.specifity - rHead.branch.specifity;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn lHead.branch.category.length - rHead.branch.category.length;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\r\n\t\t\t/* set the index to the head object */\r\n\t\t\tvar maxLane = 0;\r\n\t\t\tfor (var i = 0; i < heads.length; i++) {\r\n\t\t\t\tvar headName = heads[i];\r\n\t\t\t\tvar head = this.headsMap[headName];\r\n\t\t\t\tvar tip: Commit = head.commit;\r\n\r\n\t\t\t\tif (tip.branch === head) {\r\n\t\t\t\t\thead.lane = maxLane;\r\n\t\t\t\t\t//head.index = maxLane;\r\n\t\t\t\t\tmaxLane++;\r\n\r\n\t\t\t\t\t// Can we display this head a little more to the left?\r\n\t\t\t\t\tfor (var l = 0; l < heads.length; l++) {\r\n\r\n\t\t\t\t\t\tvar canUseLane: boolean = true;\r\n\t\t\t\t\t\tfor (var j = 0; j < heads.length; j++) {\r\n\t\t\t\t\t\t\tvar jheadName = heads[j];\r\n\t\t\t\t\t\t\tvar headOnLane: Commit = this.headsMap[jheadName].commit;\r\n\r\n\t\t\t\t\t\t\tif (headOnLane === undefined ||\r\n\t\t\t\t\t\t\t\theadOnLane.branch != head &&\r\n\t\t\t\t\t\t\t\theadOnLane.branch.lane === l &&\r\n\t\t\t\t\t\t\t\t(tip.intersects(headOnLane) || tip.branch.category != headOnLane.branch.category)) {\r\n\t\t\t\t\t\t\t\tcanUseLane = false;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (canUseLane) {\r\n\r\n\t\t\t\t\t\t\tLogger.debug(\"NO INTERSECTS: \", tip.branch.ref, \" - \", headOnLane.branch.ref);\r\n\t\t\t\t\t\t\thead.lane = l;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.maxX = Math.max(this.maxX, head.lane);\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// Launching\r\n\t\tpublic fromJSON(jsonFile: string): Main {\r\n\t\t\treturn this.fromProvider(new Plugin.LocalGit2JsonProvider(jsonFile));\r\n\t\t}\r\n\r\n\t\tpublic fromProvider(commitProvider: CommitProvider): Main {\r\n\t\t\tthis.commitProvider = commitProvider;\r\n\t\t\treturn this;\r\n\t\t}\r\n\t\t\r\n\t\tprivate renderTo(panel: HTMLElement): Main {\r\n\t\t\tif (this.headerPanel !== undefined) {\r\n\t\t\t\tpanel.appendChild(this.headerPanel);\r\n\t\t\t}\r\n\t\t\tpanel.appendChild(this.loadingPanel = document.createElement(\"gitline-loadingpanel\"));\r\n\t\t\tpanel.appendChild(this.contentPanel = document.createElement(\"gitline-contentpanel\"));\r\n\t\t\tthis.contentPanel.appendChild(this.graphicalPanel = document.createElement(\"gitline-graphicalpanel\"));\r\n\t\t\tthis.contentPanel.appendChild(this.textPanel = document.createElement(\"gitline-textpanel\"));\r\n\t\t\tthis.al = new AsyncLoader(this.loadingPanel);\r\n\r\n\t\t\tthis.render();\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\tpublic withHeader(header: string): Main;\r\n\t\tpublic withHeader(header: HTMLElement): Main;\r\n\r\n\t\tpublic withHeader(header: any) {\r\n\t\t\tif (typeof header === \"string\") {\r\n\t\t\t\tthis.headerPanel = document.createElement(\"gitline-headerpanel\");\r\n\t\t\t\tthis.headerPanel.innerHTML = header;\r\n\t\t\t} else {\r\n\t\t\t\tthis.headerPanel = header;\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\t\t}\r\n\t}\r\n}","module Gitline.Rendering {\r\n\r\n\t/**\r\n\t * basic support for jsgl shapes\r\n\t */\r\n\texport class Shape {\r\n\t\tprotected element: any; // jsgl element\r\n\t\tprivate renderedTo: HTMLElement; // jsgl canvas (any html)\r\n\t\tprotected canvas: any;\r\n\t\tprivate dependencies: Shape[] = [];\r\n\r\n\t\tpublic constructor(canvas: any, element: any) {\r\n\t\t\tthis.canvas = canvas;\r\n\t\t\tthis.element = element;\r\n\t\t}\r\n\r\n\t\tpublic addIfMissing() {\r\n\t\t\tif (this.element !== undefined && this.renderedTo == null) {\r\n\t\t\t\tthis.addElements();\r\n\t\t\t\tthis.renderedTo = this.canvas;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpublic addElements() {\r\n\t\t\tthis.canvas.addElement(this.element);\r\n\t\t}\r\n\r\n\t\tpublic update() {\r\n\t\t\tthis.dependencies.forEach(dep => {\r\n\t\t\t\tdep.update();\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tpublic dependsOn(on: Shape) {\r\n\t\t\ton.dependencies.push(this);\r\n\t\t}\r\n\t}\r\n}","///<reference path=\"Shape.ts\"/>\r\n\r\nmodule Gitline.Rendering {\r\n\r\n\t/**\r\n\t * Shape that links two dots\r\n\t */\r\n\texport class BaseLink extends Shape {\r\n\r\n\t\tparentDot: Dot;\r\n\t\tchildDot: Dot;\r\n\r\n\t\tlineColor: string;\r\n\r\n\t\tconstructor(canvas: any, element: any) {\r\n\t\t\tsuper(canvas, element);\r\n\t\t}\r\n\r\n\t\tpublic from(from: Dot): BaseLink {\r\n\t\t\tthis.dependsOn(from);\r\n\t\t\tthis.parentDot = from;\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\tpublic to(to: Dot): BaseLink {\r\n\t\t\t//this.dependsOn(to);\r\n\t\t\tthis.childDot = to;\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\tpublic color(lineColor: string): BaseLink {\r\n\t\t\tthis.element.getStroke().setWeight(1);\r\n\t\t\tthis.element.getStroke().setColor(lineColor);\r\n\t\t\tthis.lineColor = lineColor;\r\n\t\t\tthis.addIfMissing();\r\n\t\t\treturn this;\r\n\t\t}\r\n\t}\r\n}","///<reference path=\"BaseLink.ts\"/>\r\n\r\ndeclare var jsgl: any;\r\n\r\nmodule Gitline.Rendering {\r\n\texport class Curve extends BaseLink {\r\n\r\n\t\tprivate arrow;\r\n\r\n\t\tconstructor(canvas: any) {\r\n\t\t\tsuper(canvas, canvas.createCurve());\r\n\t\t\tthis.arrow = this.canvas.createPolygon();\r\n\t\t}\r\n\r\n\t\tpublic addElements() {\r\n\t\t\tsuper.addElements();\r\n\r\n\t\t\t// 2nd element\r\n\t\t\tthis.canvas.addElement(this.arrow);\r\n\t\t}\r\n\r\n\t\tpublic update() {\r\n\t\t\tvar x: number = this.childDot.x;\r\n\t\t\tvar y: number = this.childDot.y;\r\n\t\t\tvar parentX: number = this.parentDot.x;\r\n\t\t\tvar parentY: number = this.parentDot.y;\r\n\t\t\tvar color: string = this.lineColor;\r\n\r\n\t\t\tvar direction = x < parentX ? 1 : -1;\r\n\r\n\t\t\tthis.element.setStartPointXY(parentX, parentY - this.parentDot.height / 2)\r\n\t\t\tthis.element.setEndPointXY(x + this.childDot.width / 2 * direction, y);\r\n\t\t\tthis.element.setControl2PointXY(parentX, y);\r\n\t\t\tthis.element.setControl1PointXY(parentX, y);\r\n\r\n\t\t\tthis.element.getStroke().setWeight(1);\r\n\t\t\tthis.element.getStroke().setColor(color);\r\n\r\n\r\n\t\t\tthis.arrow.getStroke().setWeight(0);\r\n\t\t\tthis.arrow.getFill().setColor(color);\r\n\r\n\t\t\tthis.arrow.clearPoints();\r\n\t\t\tthis.arrow.addPointXY(0, 0);\r\n\t\t\tthis.arrow.addPointXY(6, -4);\r\n\t\t\tthis.arrow.addPointXY(6, 4);\r\n\r\n\t\t\t// Move\r\n\t\t\tfor (var i = 0; i < this.arrow.getPointsCount(); i++) {\r\n\t\t\t\tvar px = this.arrow.getPointAt(i).X;\r\n\t\t\t\tvar py = this.arrow.getPointAt(i).Y;\r\n\t\t\t\t//this.arrow.setPointXYAt(px, py + y, i);\r\n\t\t\t\tthis.arrow.setPointXYAt(px * direction + x + this.childDot.width / 2 * direction, py + y, i);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}","///<reference path=\"BaseLink.ts\"/>\r\n\r\nmodule Gitline.Rendering {\r\n\texport class Straight extends BaseLink {\r\n\r\n\t\tconstructor(canvas: any) {\r\n\t\t\tsuper(canvas, canvas.createLine());\r\n\t\t}\r\n\r\n\t\tpublic update() {\r\n\t\t\tsuper.update();\r\n\t\t\tthis.element.setStartPointXY(this.parentDot.x, this.parentDot.y - this.parentDot.height / 2);\r\n\t\t\tthis.element.setEndPointXY(this.childDot.x, this.childDot.y + this.childDot.height / 2);\r\n\t\t}\r\n\r\n}\r\n}","///<reference path=\"BaseLink.ts\"/>\r\n\r\ndeclare var jsgl: any;\r\n\r\nmodule Gitline.Rendering {\r\n\texport class Creation extends BaseLink {\r\n\r\n\t\tsecondLine;\r\n\r\n\t\tconstructor(canvas: any) {\r\n\t\t\tsuper(canvas, canvas.createLine());\r\n\t\t\tthis.secondLine = canvas.createLine();\r\n\t\t}\r\n\r\n\t\tpublic addElements() {\r\n\t\t\tsuper.addElements();\r\n\r\n\t\t\t// 2nd element\r\n\t\t\tthis.canvas.addElement(this.secondLine); // TODO: add later?\r\n\t\t}\r\n\r\n\t\tpublic update() {\r\n\t\t\tsuper.update();\r\n\r\n\t\t\t// Horizontal dotted line\r\n\t\t\tif (this.parentDot.x < this.childDot.x) {\r\n\t\t\t\tthis.element.setStartPointXY(this.parentDot.x + this.parentDot.width / 2, this.parentDot.y)\r\n\t\t\t} else {\r\n\t\t\t\tthis.element.setStartPointXY(this.parentDot.x - this.parentDot.width / 2, this.parentDot.y)\r\n\t\t\t}\r\n\r\n\t\t\tthis.element.setEndPointXY(this.childDot.x, this.parentDot.y);\r\n\t\t\tthis.element.getStroke().setWeight(1);\r\n\t\t\tthis.element.getStroke().setDashStyle(jsgl.DashStyles.DASH);\r\n\t\t\tthis.element.getStroke().setColor(this.lineColor);\r\n\r\n\t\t\t// Vertical line\r\n\t\t\tthis.secondLine.setStartPointXY(this.childDot.x, this.parentDot.y)\r\n\t\t\tthis.secondLine.setEndPointXY(this.childDot.x, this.childDot.y + this.childDot.height / 2);\r\n\t\t\tthis.secondLine.getStroke().setWeight(1)\r\n\t\t\tthis.secondLine.getStroke().setColor(this.lineColor);\r\n\t\t}\r\n\t}\r\n}","/// <reference path=\"Shape.ts\"/>\r\n\r\nmodule Gitline.Rendering {\r\n\texport class Dot extends Shape {\r\n\r\n\t\tx: number;\r\n\t\ty: number;\r\n\t\twidth: number;\r\n\t\theight: number;\r\n\r\n\t\tconstructor(canvas: any) {\r\n\t\t\tsuper(canvas, canvas.createRectangle());\r\n\t\t}\r\n\r\n\t\tpublic size(width: number, height: number): Dot {\r\n\t\t\tthis.width = width;\r\n\t\t\tthis.height = height;\r\n\r\n\t\t\tthis.element.setWidth(width);\r\n\t\t\tthis.element.setHeight(height);\r\n\t\t\tthis.element.setXRadius(width / 4);\r\n\t\t\tthis.element.setYRadius(width / 4);\r\n\r\n\t\t\tthis.update();\r\n\t\t\tthis.addIfMissing();\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\tpublic at(x: number, y: number): Dot {\r\n\t\t\tthis.x = x;\r\n\t\t\tthis.y = y;\r\n\r\n\t\t\tthis.update();\r\n\t\t\tthis.addIfMissing();\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\tpublic color(strokeColor: string, fillColor: string): Dot {\r\n\t\t\tthis.element.getStroke().setWeight(1);\r\n\t\t\tthis.element.getStroke().setColor(strokeColor);\r\n\t\t\tthis.element.getFill().setColor(fillColor);\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\tpublic update() {\r\n\t\t\tthis.element.setLocationXY(this.x - this.width / 2, this.y - this.height / 2);\r\n\t\t\tsuper.update();\r\n\t\t}\r\n\t}\r\n}","///<reference path=\"rendering/Curve.ts\"/>\r\n///<reference path=\"rendering/Straight.ts\"/>\r\n///<reference path=\"rendering/Creation.ts\"/>\r\n///<reference path=\"rendering/Dot.ts\"/>\r\n///<reference path=\"Config.ts\"/>\r\n///<reference path=\"Commit.ts\"/>\r\n///<reference path=\"rendering/Shape.ts\"/>\r\n\r\nmodule Gitline {\r\n\r\n\t/**\r\n\t * View of the Commit\r\n\t */\r\n\texport class CommitView {\r\n\r\n\t\tpublic commit: Commit;\r\n\t\tpublic label: HTMLElement;\r\n\t\tpublic canvas: any; // jsgl\r\n\t\tpublic config: Config;\r\n\r\n\t\tpublic dot: Rendering.Dot;\r\n\t\tpublic lines: Rendering.Shape[] = [];\r\n\r\n\t\tconstructor(canvas, config: Config, commit: Commit) {\r\n\t\t\tthis.canvas = canvas;\r\n\t\t\tthis.config = config;\r\n\t\t\tthis.commit = commit;\r\n\r\n\t\t\tthis.dot = new Rendering.Dot(this.canvas);\r\n\t\t}\r\n\r\n\t\tpublic addRelations() {\r\n\r\n\t\t\t// Direct parent\r\n\t\t\tif (this.commit.directparent != null) {\r\n\t\t\t\tvar dpl: Rendering.Shape;\r\n\t\t\t\tif (this.commit.getLane() == this.commit.directparent.getLane() || this.commit.directparent.outOfScope) {\r\n\t\t\t\t\t// direct parent is the same X/lane, this means it is a standard forward commit\r\n\t\t\t\t\tdpl = new Rendering.Straight(this.canvas).from(this.commit.directparent.view.dot).to(this.dot).color(this.commit.getColor(20));\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// direct parent is on a different lane, this is most certainly a new branch\r\n\t\t\t\t\tdpl = new Rendering.Creation(this.canvas).from(this.commit.directparent.view.dot).to(this.dot).color(this.commit.getColor(30));\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.lines.push(dpl);\r\n\t\t\t}\r\n\r\n\t\t\tvar allmerges = this.commit.merges.standard.concat(this.commit.merges.anonymous);\r\n\t\t\tallmerges.forEach(merge => {\r\n\t\t\t\tthis.lines.push(\r\n\t\t\t\t\tnew Rendering.Curve(this.canvas)\r\n\t\t\t\t\t\t.from(merge.source.view.dot)\r\n\t\t\t\t\t\t.to(this.dot)\r\n\t\t\t\t\t\t.color(merge.source.getColor(35)))\r\n\t\t\t\t;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t/** calculate the positions based on model and update the shapes */\r\n\t\tpublic redraw() {\r\n\t\t\tthis.dot\r\n\t\t\t\t.at(this.commit.getX(), this.commit.getY())\r\n\t\t\t\t.size(this.config.dotWidth, this.config.dotHeight)\r\n\t\t\t\t.color(this.commit.getColor(20), this.commit.getColor(80));\r\n\t\t}\r\n\r\n\r\n\t}\r\n}","///<reference path=\"Main.ts\"/>\r\n///<reference path=\"CommitView.ts\"/>\r\n///<reference path=\"Branch.ts\"/>\r\n///<reference path=\"typedefs/moment-node.d.ts\"/>\r\n///<reference path=\"typedefs/moment.d.ts\"/>\r\n\r\nmodule Gitline {\r\n\r\n\t/** committer or author */\r\n\texport class Identity {\r\n\t\tpublic image: string; // optional\r\n\r\n\t\tpublic constructor(public name: string, public email: string, public date: moment.Moment) {\r\n\t\t}\r\n\t}\r\n\r\n\texport class Commit {\r\n\t\tprivate container: Gitline.Main;\r\n\r\n\t\tprivate warnings: any[] = [];\r\n\t\tprivate inHeadsRef: Commit[] = [];\r\n\t\tprivate parents: Commit[] = [];\r\n\t\tprivate childs: Commit[] = [];\r\n\t\tprivate siblings: Commit[] = [];\r\n\t\tpublic outOfScope: boolean = false; // This commit was not part of the logs scope, but is referenced by another commit.\r\n\t\tpublic merges = {standard: [], anonymous: []};\r\n\t\tprivate sha: string;\r\n\t\tprivate ssha: string; // Abbreviated hash\r\n\t\tpublic subject: string;\r\n\t\tprivate data: any;\r\n\t\tprivate indexY: number;\r\n\r\n\t\tprivate maxSpecifity: number;\r\n\t\tpublic branch: Branch;\r\n\t\tpublic directparent: Commit;\r\n\t\tpublic directchild: Commit;\r\n\r\n\t\tpublic view: CommitView;\r\n\r\n\t\tpublic committer: Identity;\r\n\t\tpublic author: Identity;\r\n\r\n\t\tconstructor(container: Gitline.Main, data) {\r\n\t\t\tthis.container = container;\r\n\t\t\tthis.data = data;\r\n\r\n\t\t\t// reference the data back to the object\r\n\t\t\tthis.data.obj = this;\r\n\r\n\t\t\tif (data.inHeads == null) data.inHeads = [];\r\n\t\t\tif (data.parenthashes == null) data.parenthashes = [];\r\n\t\t\tif (data.refnames == null) data.refnames = [];\r\n\r\n\t\t\tthis.sha = data.sha;\r\n\t\t\tthis.ssha = data.ssha;\r\n\t\t\tthis.subject = data.subject;\r\n\t\t\tthis.indexY = container.maxIndexY++;\r\n\r\n\t\t\tthis.committer = new Identity(this.data.committername, this.data.committeremail, moment.unix(this.data.committerdate));\r\n\t\t\tthis.author = new Identity(this.data.authorname, this.data.authoremail, moment.unix(this.data.authordate));\r\n\t\t}\r\n\r\n\t\tpublic getShortSha(): string {\r\n\t\t\treturn this.ssha;\r\n\t\t}\r\n\r\n\t\tpublic getFullSha(): string {\r\n\t\t\treturn this.sha;\r\n\t\t}\r\n\r\n\t\tpublic initRelations() {\r\n\t\t\tvar self = this;\r\n\r\n\t\t\tthis.data.parenthashes.forEach(hash => {\r\n\t\t\t\tvar parentCommit = this.container.commits[hash];\r\n\r\n\t\t\t\t// Create a virtual commit\r\n\t\t\t\tif (parentCommit == null) {\r\n\t\t\t\t\tparentCommit = new Commit(this.container, {sha: hash + Math.random()});\r\n\t\t\t\t\tparentCommit.outOfScope = true;\r\n\t\t\t\t\tself.container.addCommit(parentCommit);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.parents.push(parentCommit);\r\n\t\t\t\tparentCommit.childs.push(this);\r\n\t\t\t\tthis.siblings = parentCommit.childs; // this will be overwitten as new childs are found\r\n\r\n\t\t\t\tif (this.parents.length > 0) {\r\n\t\t\t\t\tvar dp = this.parents[0];\r\n\t\t\t\t\tthis.directparent = dp;\r\n\t\t\t\t\tdp.directchild = this;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tthis.data.inHeads.forEach(headsha => {\r\n\t\t\t\tvar commit = this.container.commits[headsha];\r\n\t\t\t\tif (this.inHeadsRef.indexOf(commit) === undefined) {\r\n\t\t\t\t\tthis.inHeadsRef.push(commit)\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t}\r\n\r\n\t\tpublic initDefaultBranch() {\r\n\t\t\tvar commit: Commit = this;\r\n\r\n\t\t\twhile (commit != null) {\r\n\r\n\t\t\t\t// GUESSING: The correct branch is usually the one with the least specific name\r\n\t\t\t\tif (commit.branch == null || commit.branch.specifity > this.branch.specifity) {\r\n\t\t\t\t\tcommit.branch = this.branch;\r\n\t\t\t\t\t//commit.debug(\"assigning \"+this.branch.ref)\r\n\t\t\t\t}\r\n\t\t\t\tcommit.branch.start = commit; // this function will traverse the parents, so the last one will be the first commit\r\n\t\t\t\tcommit.branch.origin = commit.directparent; // this could be null -> it is outside of the history.\r\n\t\t\t\tcommit = commit.directparent;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpublic initHeadSpecifity() {\r\n\t\t\tfor (var i = 0; i < this.data.refnames.length; i++) {\r\n\t\t\t\tvar refname = this.data.refnames[i];\r\n\r\n\t\t\t\tif (!this.container.config.remoteOnly || refname.indexOf(\"origin/\") == 0) {\r\n\r\n\t\t\t\t\tif (this.container.config.remoteOnly) {\r\n\t\t\t\t\t\trefname = refname.replace(/^origin./, '');\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tvar specifity = refname.replace(/[^\\/-]/g, '').length * 1000;\r\n\t\t\t\t\tspecifity += refname.replace(/[^a-zA-Z0-9-]/, '').length;\r\n\r\n\t\t\t\t\tthis.container.addBranch(refname, this, specifity);\r\n\r\n\t\t\t\t\t/* assign the most specific head on this tip commit */\r\n\t\t\t\t\tif (this.maxSpecifity == null || specifity < this.maxSpecifity) {\r\n\t\t\t\t\t\tLogger.debug(\"assigning branch\", refname, this.sha, this.maxSpecifity, specifity)\r\n\t\t\t\t\t\tthis.maxSpecifity = specifity;\r\n\t\t\t\t\t\tthis.branch = this.container.headsMap[refname];\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.initDefaultBranch();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpublic initMerges() {\r\n\r\n\t\t\tthis.merges = {standard: [], anonymous: []};\r\n\t\t\tthis.warnings = [];\r\n\r\n\t\t\t// Detect a merge (octopus currently not supported)\r\n\r\n\t\t\tif (this.parents.length == 1) {\r\n\t\t\t\tvar dp = this.parents[0];\r\n\t\t\t\tthis.directparent = dp;\r\n\t\t\t\tdp.directchild = this;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.parents.length >= 2) {\r\n\t\t\t\tvar dp = this.parents[0];\r\n\t\t\t\tthis.directparent = dp;\r\n\t\t\t\tdp.directchild = this;\r\n\r\n\t\t\t\tfor (var i = 1; i < this.parents.length; i++) {\r\n\t\t\t\t\tvar mp = this.parents[i];\r\n\r\n\t\t\t\t\tif (mp != null) {\r\n\r\n\t\t\t\t\t\t// Clues if this is a standard or anonymous merge\r\n\t\t\t\t\t\tif (mp.data.refnames.length > 0 // This is standard merge with mps head\r\n\t\t\t\t\t\t\t|| mp.inHeadsRef.length != dp.inHeadsRef.length // The heads of both are different\r\n\t\t\t\t\t\t) {\r\n\r\n\t\t\t\t\t\t\tthis.merges.standard.push({source: mp});\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t// This is a anonymous (automatic) merge on the same branch\r\n\t\t\t\t\t\t\tthis.merges.anonymous.push({source: mp})\r\n\t\t\t\t\t\t\tthis.initAnonymous();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpublic initAnonymous() {\r\n\t\t\t// Create a dummy branch for anonymous merges, which is as specific as the original branch.\r\n\t\t\t// try finding the original branch by going up direct childs, which will get the original\r\n\r\n\t\t\tthis.merges.anonymous.forEach(_merge => {\r\n\t\t\t\tvar merge: Commit = _merge.source\r\n\t\t\t\tvar child = this;\r\n\r\n\t\t\t\twhile (child != null && child.branch == null) {\r\n\t\t\t\t\tchild = child.directchild;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t/* this is only an anonymous branch head, if there is only one child (the merge)\r\n\t\t\t\t TODO: if there are multiple, it might result in wrongly assigned branches */\r\n\t\t\t\tif (child != null && merge.branch == null) {\r\n\t\t\t\t\tmerge.branch = new Branch(child.branch.ref + \"/anonymous\" + merge.sha + Math.random(), merge, child.branch.specifity + 1);\r\n\t\t\t\t\tmerge.branch.anonymous = true;\r\n\t\t\t\t\tmerge.branch.parent = child.branch;\r\n\t\t\t\t\tmerge.branch.start = child;\r\n\t\t\t\t\tmerge.branch.category = child.branch.category;\r\n\r\n\t\t\t\t\tthis.container.headsMap[merge.branch.ref] = merge.branch;\r\n\t\t\t\t}\r\n\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tpublic getColor(lightness: number): string {\r\n\t\t\tif (this.branch == null) {\r\n\t\t\t\tthis.warn(\"No Branch set\")\r\n\t\t\t} else {\r\n\t\t\t\tvar b = this.branch;\r\n\t\t\t\tif (this.branch.anonymous) {\r\n\t\t\t\t\tb = this.branch.parent;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar hue = b.lane * 300 / this.container.maxX;\r\n\t\t\t\treturn \"hsl(\" + hue + \", 100%, \" + lightness + \"%)\";\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpublic hasMerges(): boolean {\r\n\t\t\treturn this.merges.standard.length > 0 || this.merges.anonymous.length > 0;\r\n\t\t}\r\n\r\n\t\tpublic getX() {\r\n\t\t\treturn Gitline.indexToX(this.getLane());\r\n\t\t}\r\n\r\n\t\tpublic getY() {\r\n\t\t\tif (this.outOfScope) {\r\n\t\t\t\treturn this.container.rootLabel.offsetTop + 20;\r\n\t\t\t}\r\n\t\t\treturn this.view.label.offsetTop - this.container.firstCommit.view.label.offsetTop + this.view.label.offsetHeight / 2;\r\n\t\t}\r\n\r\n\t\tpublic getOriginIndexY(): number {\r\n\t\t\tif (this.branch.origin != undefined) {\r\n\t\t\t\treturn this.branch.origin.getIndexY();\r\n\t\t\t} else if (this.branch.start.outOfScope) {\r\n\t\t\t\treturn this.container.maxIndexY;\r\n\t\t\t} else {\r\n\t\t\t\treturn this.branch.start.indexY;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t\r\n\t\t/** Tip plus the next direct child index (position of last merge) */\r\n\t\tpublic getTipPlusIndexY(): number {\r\n\t\t\tif(this.branch != undefined && this.branch.commit != undefined) {\r\n\t\t\t\tvar indexY = this.branch.commit.indexY;\r\n\t\t\t\t\r\n\t\t\t\t// find the top child \r\n\t\t\t\tthis.branch.commit.childs.forEach(c => {\r\n\t\t\t\t\tindexY = Math.min(indexY, c.indexY);\t\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\treturn indexY;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// nothing found, assume top\r\n\t\t\treturn 0;\r\n\t\t}\t\t\r\n\r\n\t\t/** does this branch intersect with another when drawn next to each other. \r\n\t\t    can this branch be displayed on the same X axis without overlapping? */\r\n\t\tpublic intersects(other: Commit): boolean {\r\n\t\t\tvar otherY = 9999999, thisY = 999999;\r\n\t\t\tif (this.outOfScope || other.outOfScope) return true;\r\n\r\n\t\t\treturn this.getOriginIndexY() > other.getTipPlusIndexY() && this.getTipPlusIndexY() < other.getOriginIndexY();\r\n\t\t}\r\n\r\n\t\tpublic getIndexY(): number {\r\n\t\t\treturn this.indexY;\r\n\t\t}\r\n\r\n\t\tpublic warn(warning: string) {\r\n\t\t\tthis.warnings.push(warning);\r\n\t\t\tthis.debug(warning);\r\n\t\t}\r\n\r\n\t\tpublic debug(warning: string) {\r\n\t\t\tif (console) {\r\n\t\t\t\tLogger.debug(warning, this);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpublic getLane() {\r\n\t\t\tif (this.branch != null) { // TODO: anonymous branches will get their index from parent ones\r\n\t\t\t\treturn this.branch.commit.branch.lane;\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n}","///<reference path=\"Commit.ts\"/>\r\n\r\nmodule Gitline {\r\n\texport class Branch {\r\n\t\tpublic specifity: number;\r\n\t\tpublic start: Commit;\r\n\t\tpublic origin: Commit;\r\n\t\tpublic category: string;\r\n\t\tpublic commit: Commit; // Head commit\r\n\t\tpublic ref: string; // Name of the branch\r\n\t\tpublic shortname: string; // name without repo\r\n\t\tpublic lane: number;\r\n\t\tpublic parent: Branch;\r\n\t\tpublic anonymous: boolean;\r\n\r\n\r\n\t\tconstructor(refname: string, commit: Commit, specifity: number) {\r\n\t\t\tthis.ref = refname;\r\n\t\t\tthis.commit = commit;\r\n\t\t\tthis.specifity = specifity;\r\n\t\t\tthis.shortname = refname.split(\"@\")[0];\r\n\t\t\tthis.category = this.shortname.substring(0, this.shortname.lastIndexOf(\"/\"));\r\n\t\t}\r\n\t}\r\n}"],"sourceRoot":"/source/"}